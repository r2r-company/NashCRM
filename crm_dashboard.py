import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BASE_URL = "http://127.0.0.1:8000"
API_URL = f"{BASE_URL}/api"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="–ù–∞—àCRM Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª—ñ
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .sidebar .element-container {
        margin-bottom: 1rem;
    }
    .stButton > button {
        width: 100%;
        border-radius: 10px;
        border: none;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
    }
</style>
""", unsafe_allow_html=True)


class CRMClient:
    def __init__(self, base_url, token=None):
        self.base_url = base_url
        self.token = token
        self.headers = {}
        if token:
            self.headers['Authorization'] = f'Bearer {token}'

    def login(self, username, password):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
            login_data = {"username": username, "password": password}
            headers = {"Content-Type": "application/json"}

            # –°–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ /api/token/
            response = requests.post(
                f"{self.base_url}/token/",
                json=login_data,
                headers=headers,
                timeout=10
            )

            if response.status_code == 200:
                data = response.json()
                # –í–∞—à API –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–∫–µ–Ω –≤ data.access, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ access
                if 'data' in data and 'access' in data['data']:
                    self.token = data['data']['access']
                    self.headers['Authorization'] = f'Bearer {self.token}'
                    return True, "–£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
                elif 'access' in data:
                    # Fallback –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
                    self.token = data['access']
                    self.headers['Authorization'] = f'Bearer {self.token}'
                    return True, "–£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"
                else:
                    return False, f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {data}"
            else:
                return False, f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ö–æ–¥: {response.status_code}, –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}"

        except Exception as e:
            return False, f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {str(e)}"

    def get_dashboard(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥—É"""
        try:
            response = requests.get(f"{self.base_url}/crm/dashboard/", headers=self.headers)
            if response.status_code == 200:
                return response.json()
            return None
        except:
            return None

    def get_clients(self, filters=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
        try:
            url = f"{self.base_url}/clients/"
            if filters:
                params = "&".join([f"{k}={v}" for k, v in filters.items() if v])
                if params:
                    url += f"?{params}"
            response = requests.get(url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            return []
        except:
            return []

    def get_leads(self, filters=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
        try:
            url = f"{self.base_url}/leads/"
            if filters:
                params = "&".join([f"{k}={v}" for k, v in filters.items() if v])
                if params:
                    url += f"?{params}"
            response = requests.get(url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            return []
        except:
            return []

    def create_lead(self, lead_data):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞—è–≤–∫–∏"""
        try:
            response = requests.post(f"{self.base_url}/leads/", json=lead_data, headers=self.headers)
            return response.status_code == 201, response.json() if response.status_code == 201 else response.text
        except Exception as e:
            return False, str(e)

    def get_funnel(self, filters=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤"""
        try:
            url = f"{self.base_url}/funnel/"
            if filters:
                params = "&".join([f"{k}={v}" for k, v in filters.items() if v])
                if params:
                    url += f"?{params}"
            response = requests.get(url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            return None
        except:
            return None

    def get_payments(self, filters=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤"""
        try:
            url = f"{self.base_url}/payments/"
            if filters:
                params = "&".join([f"{k}={v}" for k, v in filters.items() if v])
                if params:
                    url += f"?{params}"
            response = requests.get(url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            return []
        except:
            return []

    def get_client_interactions(self, client_id=None):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏"""
        try:
            url = f"{self.base_url}/client-interactions/"
            if client_id:
                url += f"?client_id={client_id}"
            response = requests.get(url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            return []
        except:
            return []

    def create_interaction(self, interaction_data):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó"""
        try:
            response = requests.post(f"{self.base_url}/client-interactions/", json=interaction_data,
                                     headers=self.headers)
            return response.status_code == 201, response.json() if response.status_code == 201 else response.text
        except Exception as e:
            return False, str(e)

    def get_tasks(self, task_type="my"):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–¥–∞—á"""
        try:
            if task_type == "my":
                url = f"{self.base_url}/client-tasks/my_tasks/"
            elif task_type == "overdue":
                url = f"{self.base_url}/client-tasks/overdue_tasks/"
            else:
                url = f"{self.base_url}/client-tasks/"
            response = requests.get(url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            return []
        except:
            return []


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó
if 'crm_client' not in st.session_state:
    st.session_state.crm_client = CRMClient(API_URL)
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False


def login_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
    st.markdown('<h1 class="main-header">üîê –ù–∞—àCRM - –í—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏</h1>', unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        with st.form("login_form"):
            st.markdown("### –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")
            username = st.text_input("–õ–æ–≥—ñ–Ω", value="admin")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", value="11111")
            submit = st.form_submit_button("–£–≤—ñ–π—Ç–∏", use_container_width=True)

            if submit:
                with st.spinner("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è..."):
                    success, message = st.session_state.crm_client.login(username, password)
                    if success:
                        st.session_state.authenticated = True
                        st.success("–£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è!")
                        st.rerun()
                    else:
                        st.error(message)

                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                        st.warning("üí° –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
                        st.info(f"üîó –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ: {API_URL}/token/")
                        st.info("üìù –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç—É")

                        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
                        try:
                            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
                            test_response = requests.get(f"{BASE_URL}/", timeout=5)
                            st.info(f"üåê Django —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–∞—Ç—É—Å: {test_response.status_code}")
                        except Exception as e:
                            st.error(f"‚ùå Django —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {str(e)}")


def main_dashboard():
    """–ì–æ–ª–æ–≤–Ω–∏–π –¥–∞—à–±–æ—Ä–¥"""
    st.markdown('<h1 class="main-header">üìä –ù–∞—àCRM Dashboard</h1>', unsafe_allow_html=True)

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–∞—à–±–æ—Ä–¥—É
    dashboard_data = st.session_state.crm_client.get_dashboard()

    if dashboard_data and 'summary' in dashboard_data:
        summary = dashboard_data['summary']

        # –ú–µ—Ç—Ä–∏–∫–∏ —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric(
                label="üë• –í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
                value=summary.get('total_clients', 0),
                delta=f"+{summary.get('new_clients_today', 0)} —Å—å–æ–≥–æ–¥–Ω—ñ"
            )

        with col2:
            st.metric(
                label="üíé –ê–ö–ë –∫–ª—ñ—î–Ω—Ç—ñ–≤",
                value=summary.get('akb_clients', 0),
                delta=f"{summary.get('akb_percentage', 0):.1f}%"
            )

        with col3:
            st.metric(
                label="üî• –ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏",
                value=summary.get('hot_leads', 0),
                delta=f"{summary.get('hot_leads_percentage', 0):.1f}%"
            )

        with col4:
            revenue = summary.get('total_revenue', 0)
            try:
                formatted_revenue = f"{float(revenue):,.0f} ‚Ç¥"
                revenue_today = summary.get('revenue_today', 0)
                delta_revenue = f"+{float(revenue_today):,.0f} ‚Ç¥ —Å—å–æ–≥–æ–¥–Ω—ñ"
            except (ValueError, TypeError):
                formatted_revenue = "0 ‚Ç¥"
                delta_revenue = "+0 ‚Ç¥ —Å—å–æ–≥–æ–¥–Ω—ñ"

            st.metric(
                label="üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞",
                value=formatted_revenue,
                delta=delta_revenue
            )

        st.markdown("---")

        # –ì—Ä–∞—Ñ—ñ–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üå°Ô∏è –†–æ–∑–ø–æ–¥—ñ–ª –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ñ")
            temp_data = {
                '–•–æ–ª–æ–¥–Ω—ñ': summary.get('cold_leads', 0),
                '–¢–µ–ø–ª—ñ': summary.get('warm_leads', 0),
                '–ì–∞—Ä—è—á—ñ': summary.get('hot_leads', 0),
                '–ö–ª—ñ—î–Ω—Ç–∏': summary.get('customers', 0),
                '–õ–æ—è–ª—å–Ω—ñ': summary.get('loyal_clients', 0)
            }

            if any(temp_data.values()):
                fig_temp = px.pie(
                    values=list(temp_data.values()),
                    names=list(temp_data.keys()),
                    color_discrete_sequence=px.colors.qualitative.Set3
                )
                fig_temp.update_layout(height=400)
                st.plotly_chart(fig_temp, use_container_width=True)

        with col2:
            st.subheader("üíé –°–µ–≥–º–µ–Ω—Ç–∏ –ê–ö–ë")
            akb_data = {
                'VIP': summary.get('vip_clients', 0),
                'Premium': summary.get('premium_clients', 0),
                'Standard': summary.get('standard_clients', 0),
                'Basic': summary.get('basic_clients', 0),
                '–ù–æ–≤—ñ': summary.get('new_clients', 0)
            }

            if any(akb_data.values()):
                fig_akb = px.bar(
                    x=list(akb_data.keys()),
                    y=list(akb_data.values()),
                    color=list(akb_data.values()),
                    color_continuous_scale="Viridis"
                )
                fig_akb.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig_akb, use_container_width=True)

        # –¢–û–ü –∫–ª—ñ—î–Ω—Ç–∏
        if 'top_clients' in dashboard_data and dashboard_data['top_clients']:
            st.subheader("üèÜ –¢–û–ü –∫–ª—ñ—î–Ω—Ç–∏")
            top_clients_df = pd.DataFrame(dashboard_data['top_clients'])
            st.dataframe(top_clients_df, use_container_width=True)

    else:
        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–∞—à–±–æ—Ä–¥—É")


def clients_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    st.markdown('<h1 class="main-header">üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞–º–∏</h1>', unsafe_allow_html=True)

    # –§—ñ–ª—å—Ç—Ä–∏
    col1, col2, col3 = st.columns(3)

    with col1:
        temperature_filter = st.selectbox(
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:",
            ["", "cold", "warm", "hot", "customer", "loyal", "sleeping"],
            format_func=lambda x: {
                "": "–í—Å—ñ",
                "cold": "–•–æ–ª–æ–¥–Ω—ñ",
                "warm": "–¢–µ–ø–ª—ñ",
                "hot": "–ì–∞—Ä—è—á—ñ",
                "customer": "–ö–ª—ñ—î–Ω—Ç–∏",
                "loyal": "–õ–æ—è–ª—å–Ω—ñ",
                "sleeping": "–°–ø–ª—è—á—ñ"
            }.get(x, x)
        )

    with col2:
        akb_filter = st.selectbox(
            "–°–µ–≥–º–µ–Ω—Ç –ê–ö–ë:",
            ["", "vip", "premium", "standard", "basic", "new", "inactive"],
            format_func=lambda x: {
                "": "–í—Å—ñ",
                "vip": "VIP",
                "premium": "Premium",
                "standard": "Standard",
                "basic": "Basic",
                "new": "–ù–æ–≤–∏–π",
                "inactive": "–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            }.get(x, x)
        )

    with col3:
        if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ"):
            st.rerun()

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
    filters = {}
    if temperature_filter:
        filters['temperature'] = temperature_filter
    if akb_filter:
        filters['akb_segment'] = akb_filter

    clients = st.session_state.crm_client.get_clients(filters)

    if clients:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        if isinstance(clients, list) and len(clients) > 0:
            clients_df = pd.DataFrame(clients)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤", len(clients_df))
            with col2:
                if 'total_spent' in clients_df.columns:
                    total_revenue = clients_df['total_spent'].sum()
                    st.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞", f"{total_revenue:,.0f} ‚Ç¥")
            with col3:
                if 'temperature' in clients_df.columns:
                    hot_count = len(clients_df[clients_df['temperature'] == 'hot'])
                    st.metric("–ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏", hot_count)

            # –¢–∞–±–ª–∏—Ü—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
            st.subheader("üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤")

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
            display_cols = []
            if 'full_name' in clients_df.columns:
                display_cols.append('full_name')
            if 'phone' in clients_df.columns:
                display_cols.append('phone')
            if 'email' in clients_df.columns:
                display_cols.append('email')
            if 'temperature' in clients_df.columns:
                display_cols.append('temperature')
            if 'akb_segment' in clients_df.columns:
                display_cols.append('akb_segment')
            if 'total_spent' in clients_df.columns:
                display_cols.append('total_spent')
            if 'last_purchase_date' in clients_df.columns:
                display_cols.append('last_purchase_date')

            if display_cols:
                st.dataframe(clients_df[display_cols], use_container_width=True)
            else:
                st.dataframe(clients_df, use_container_width=True)
    else:
        st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")


def leads_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞—è–≤–æ–∫"""
    st.markdown('<h1 class="main-header">üìù –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏</h1>', unsafe_allow_html=True)

    tab1, tab2 = st.tabs(["üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É"])

    with tab1:
        # –§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è –∑–∞—è–≤–æ–∫
        col1, col2, col3 = st.columns(3)

        with col1:
            status_filter = st.selectbox(
                "–°—Ç–∞—Ç—É—Å:",
                ["", "new", "queued", "in_progress", "completed", "paid", "canceled"],
                format_func=lambda x: {
                    "": "–í—Å—ñ",
                    "new": "–ù–æ–≤–∞",
                    "queued": "–í —á–µ—Ä–∑—ñ",
                    "in_progress": "–í —Ä–æ–±–æ—Ç—ñ",
                    "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
                    "paid": "–û–ø–ª–∞—á–µ–Ω–∞",
                    "canceled": "–°–∫–∞—Å–æ–≤–∞–Ω–∞"
                }.get(x, x)
            )

        with col2:
            source_filter = st.selectbox(
                "–î–∂–µ—Ä–µ–ª–æ:",
                ["", "phone", "email", "instagram", "facebook", "website", "referral"],
                format_func=lambda x: {
                    "": "–í—Å—ñ",
                    "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "email": "Email",
                    "instagram": "Instagram",
                    "facebook": "Facebook",
                    "website": "–°–∞–π—Ç",
                    "referral": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"
                }.get(x, x)
            )

        with col3:
            if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∑–∞—è–≤–∫–∏"):
                st.rerun()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫
        filters = {}
        if status_filter:
            filters['status'] = status_filter
        if source_filter:
            filters['source'] = source_filter

        leads = st.session_state.crm_client.get_leads(filters)

        if leads:
            if isinstance(leads, list) and len(leads) > 0:
                leads_df = pd.DataFrame(leads)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Å—å–æ–≥–æ –∑–∞—è–≤–æ–∫", len(leads_df))
            with col2:
                if 'price' in leads_df.columns:
                    total_amount = leads_df['price'].sum()
                    # –ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–∞
                    try:
                        formatted_amount = f"{float(total_amount):,.0f} ‚Ç¥"
                    except (ValueError, TypeError):
                        formatted_amount = "0 ‚Ç¥"
                    st.metric("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", formatted_amount)
            with col3:
                if 'status' in leads_df.columns:
                    completed = len(leads_df[leads_df['status'] == 'completed'])
                    st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", completed)
            with col4:
                if 'status' in leads_df.columns:
                    paid = len(leads_df[leads_df['status'] == 'paid'])
                    st.metric("–û–ø–ª–∞—á–µ–Ω–æ", paid)

                # –¢–∞–±–ª–∏—Ü—è –∑–∞—è–≤–æ–∫
                st.subheader("üìã –ó–∞—è–≤–∫–∏")

                # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
                display_cols = []
                for col in ['id', 'full_name', 'phone', 'source', 'status', 'price', 'created_at']:
                    if col in leads_df.columns:
                        display_cols.append(col)

                if display_cols:
                    st.dataframe(leads_df[display_cols], use_container_width=True)
                else:
                    st.dataframe(leads_df, use_container_width=True)
        else:
            st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫")

    with tab2:
        # –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
        st.subheader("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞—è–≤–∫–∏")

        with st.form("create_lead_form"):
            col1, col2 = st.columns(2)

            with col1:
                full_name = st.text_input("–ü–æ–≤–Ω–µ —ñ–º'—è*", placeholder="–Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á")
                phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω*", placeholder="+380997777777")
                email = st.text_input("Email", placeholder="ivan@example.com")
                price = st.number_input("–¶—ñ–Ω–∞*", min_value=0.0, value=1000.0, step=100.0)

            with col2:
                source = st.selectbox(
                    "–î–∂–µ—Ä–µ–ª–æ*",
                    ["phone", "email", "instagram", "facebook", "website", "referral"],
                    format_func=lambda x: {
                        "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                        "email": "Email",
                        "instagram": "Instagram",
                        "facebook": "Facebook",
                        "website": "–°–∞–π—Ç",
                        "referral": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"
                    }.get(x, x)
                )

                advance = st.number_input("–ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", min_value=0.0, value=0.0, step=50.0)
                delivery_cost = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏", min_value=0.0, value=0.0, step=10.0)
                order_number = st.text_input("–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", placeholder="ORD-2024-001")

            description = st.text_area("–û–ø–∏—Å", placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∑–∞—è–≤–∫–∏")
            comment = st.text_area("–ö–æ–º–µ–Ω—Ç–∞—Ä", placeholder="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ")

            # –ê–¥—Ä–µ—Å–∞
            st.subheader("üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
            col1, col2 = st.columns(2)
            with col1:
                country = st.text_input("–ö—Ä–∞—ó–Ω–∞", value="–£–∫—Ä–∞—ó–Ω–∞")
                city = st.text_input("–ú—ñ—Å—Ç–æ", placeholder="–ö–∏—ó–≤")
            with col2:
                postal_code = st.text_input("–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å", placeholder="01001")
                street = st.text_input("–í—É–ª–∏—Ü—è", placeholder="–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1")

            full_address = st.text_input("–ü–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞", placeholder="–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1")

            submit_lead = st.form_submit_button("üöÄ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É", use_container_width=True)

            if submit_lead:
                if not full_name or not phone or not source:
                    st.error("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (—ñ–º'—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∂–µ—Ä–µ–ª–æ)")
                else:
                    lead_data = {
                        "full_name": full_name,
                        "phone": phone,
                        "source": source,
                        "price": price
                    }

                    # –î–æ–¥–∞—î–º–æ –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
                    if email:
                        lead_data["email"] = email
                    if description:
                        lead_data["description"] = description
                    if comment:
                        lead_data["comment"] = comment
                    if advance > 0:
                        lead_data["advance"] = advance
                    if delivery_cost > 0:
                        lead_data["delivery_cost"] = delivery_cost
                    if order_number:
                        lead_data["order_number"] = order_number
                    if country:
                        lead_data["country"] = country
                    if city:
                        lead_data["city"] = city
                    if postal_code:
                        lead_data["postal_code"] = postal_code
                    if street:
                        lead_data["street"] = street
                    if full_address:
                        lead_data["full_address"] = full_address

                    success, result = st.session_state.crm_client.create_lead(lead_data)
                    if success:
                        st.success(f"‚úÖ –ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! ID: {result.get('id', 'N/A')}")
                        st.rerun()
                    else:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏: {result}")


def funnel_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤"""
    st.markdown('<h1 class="main-header">üå™Ô∏è –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤</h1>', unsafe_allow_html=True)

    # –§—ñ–ª—å—Ç—Ä–∏
    col1, col2, col3 = st.columns(3)

    with col1:
        date_from = st.date_input("–í—ñ–¥ –¥–∞—Ç–∏:", value=datetime.now() - timedelta(days=30))
    with col2:
        date_to = st.date_input("–î–æ –¥–∞—Ç–∏:", value=datetime.now())
    with col3:
        if st.button("üìä –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≤–æ—Ä–æ–Ω–∫—É"):
            st.rerun()

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–æ—Ä–æ–Ω–∫–∏
    filters = {
        "from": date_from.strftime("%Y-%m-%d"),
        "to": date_to.strftime("%Y-%m-%d")
    }

    funnel_data = st.session_state.crm_client.get_funnel(filters)

    if funnel_data and 'funnel' in funnel_data:
        funnel = funnel_data['funnel']

        # –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏
        col1, col2, col3 = st.columns(3)

        with col1:
            total_leads = sum(funnel.values())
            st.metric("–í—Å—å–æ–≥–æ –ª—ñ–¥—ñ–≤", total_leads)

        with col2:
            conversion = funnel_data.get('conversion_rate', 0)
            # –ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó
            try:
                formatted_conversion = f"{float(conversion):.1f}%"
            except (ValueError, TypeError):
                formatted_conversion = "0.0%"
            st.metric("–ö–æ–Ω–≤–µ—Ä—Å—ñ—è", formatted_conversion)

        with col3:
            completed = funnel.get('completed', 0)
            if total_leads > 0:
                completion_rate = (completed / total_leads) * 100
                try:
                    formatted_completion = f"{float(completion_rate):.1f}%"
                except (ValueError, TypeError):
                    formatted_completion = "0.0%"
                st.metric("% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö", formatted_completion)
            else:
                st.metric("% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö", "0.0%")

        # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–æ—Ä–æ–Ω–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìä –í–æ—Ä–æ–Ω–∫–∞ –ø–æ –µ—Ç–∞–ø–∞—Ö")

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∞–∑–≤–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤
            status_names = {
                'new': '–ù–æ–≤—ñ',
                'queued': '–í —á–µ—Ä–∑—ñ',
                'in_progress': '–í —Ä–æ–±–æ—Ç—ñ',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω—ñ',
                'paid': '–û–ø–ª–∞—á–µ–Ω—ñ',
                'canceled': '–°–∫–∞—Å–æ–≤–∞–Ω—ñ'
            }

            funnel_df = pd.DataFrame([
                {"–ï—Ç–∞–ø": status_names.get(status, status), "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": count}
                for status, count in funnel.items()
            ])

            fig_funnel = px.bar(
                funnel_df,
                x="–ï—Ç–∞–ø",
                y="–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
                color="–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
                color_continuous_scale="Viridis"
            )
            fig_funnel.update_layout(height=400)
            st.plotly_chart(fig_funnel, use_container_width=True)

        with col2:
            st.subheader("ü•ß –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö")

            fig_pie = px.pie(
                values=list(funnel.values()),
                names=[status_names.get(status, status) for status in funnel.keys()],
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig_pie.update_layout(height=400)
            st.plotly_chart(fig_pie, use_container_width=True)

        # –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        funnel_table = []
        total = sum(funnel.values())

        for status, count in funnel.items():
            percentage = (count / total * 100) if total > 0 else 0
            funnel_table.append({
                "–ï—Ç–∞–ø": status_names.get(status, status),
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": count,
                "–í—ñ–¥—Å–æ—Ç–æ–∫": f"{percentage:.1f}%"
            })

        st.dataframe(pd.DataFrame(funnel_table), use_container_width=True)

    else:
        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –≤–æ—Ä–æ–Ω–∫–∏")


def finance_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤"""
    st.markdown('<h1 class="main-header">üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó</h1>', unsafe_allow_html=True)

    # –§—ñ–ª—å—Ç—Ä–∏
    col1, col2, col3 = st.columns(3)

    with col1:
        payment_type = st.selectbox(
            "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:",
            ["", "expected", "received"],
            format_func=lambda x: {
                "": "–í—Å—ñ",
                "expected": "–û—á—ñ–∫—É–≤–∞–Ω—ñ",
                "received": "–û—Ç—Ä–∏–º–∞–Ω—ñ"
            }.get(x, x)
        )

    with col2:
        date_from = st.date_input("–í—ñ–¥ –¥–∞—Ç–∏:", value=datetime.now() - timedelta(days=30))

    with col3:
        date_to = st.date_input("–î–æ –¥–∞—Ç–∏:", value=datetime.now())

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤
    filters = {}
    if payment_type:
        filters['type'] = payment_type

    payments = st.session_state.crm_client.get_payments(filters)

    if payments:
        if isinstance(payments, list) and len(payments) > 0:
            payments_df = pd.DataFrame(payments)

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –¥–∞—Ç–∞—Ö —è–∫—â–æ —î –∫–æ–ª–æ–Ω–∫–∞ created_at
            if 'created_at' in payments_df.columns:
                payments_df['created_at'] = pd.to_datetime(payments_df['created_at'])
                mask = (payments_df['created_at'].dt.date >= date_from) & (payments_df['created_at'].dt.date <= date_to)
                payments_df = payments_df[mask]

            # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("–í—Å—å–æ–≥–æ –æ–ø–µ—Ä–∞—Ü—ñ–π", len(payments_df))

            with col2:
                if 'amount' in payments_df.columns:
                    total_amount = payments_df['amount'].sum()
                    st.metric("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", f"{total_amount:,.0f} ‚Ç¥")

            with col3:
                if 'operation_type' in payments_df.columns:
                    received = payments_df[payments_df['operation_type'] == 'received'][
                        'amount'].sum() if 'amount' in payments_df.columns else 0
                    st.metric("–û—Ç—Ä–∏–º–∞–Ω–æ", f"{received:,.0f} ‚Ç¥")

            with col4:
                if 'operation_type' in payments_df.columns:
                    expected = payments_df[payments_df['operation_type'] == 'expected'][
                        'amount'].sum() if 'amount' in payments_df.columns else 0
                    st.metric("–û—á—ñ–∫—É—î—Ç—å—Å—è", f"{expected:,.0f} ‚Ç¥")

            # –ì—Ä–∞—Ñ—ñ–∫–∏
            col1, col2 = st.columns(2)

            with col1:
                if 'operation_type' in payments_df.columns and 'amount' in payments_df.columns:
                    st.subheader("üí∞ –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö")

                    type_summary = payments_df.groupby('operation_type')['amount'].sum().reset_index()
                    type_names = {
                        'expected': '–û—á—ñ–∫—É–≤–∞–Ω—ñ',
                        'received': '–û—Ç—Ä–∏–º–∞–Ω—ñ'
                    }
                    type_summary['operation_type'] = type_summary['operation_type'].map(type_names)

                    fig_types = px.pie(
                        type_summary,
                        values='amount',
                        names='operation_type',
                        color_discrete_sequence=px.colors.qualitative.Set2
                    )
                    fig_types.update_layout(height=400)
                    st.plotly_chart(fig_types, use_container_width=True)

            with col2:
                if 'created_at' in payments_df.columns and 'amount' in payments_df.columns:
                    st.subheader("üìà –î–∏–Ω–∞–º—ñ–∫–∞ –ø–ª–∞—Ç–µ–∂—ñ–≤")

                    payments_df['date'] = payments_df['created_at'].dt.date
                    daily_payments = payments_df.groupby('date')['amount'].sum().reset_index()

                    fig_timeline = px.line(
                        daily_payments,
                        x='date',
                        y='amount',
                        title="–ü–ª–∞—Ç–µ–∂—ñ –ø–æ –¥–Ω—è—Ö"
                    )
                    fig_timeline.update_layout(height=400)
                    st.plotly_chart(fig_timeline, use_container_width=True)

            # –¢–∞–±–ª–∏—Ü—è –ø–ª–∞—Ç–µ–∂—ñ–≤
            st.subheader("üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ–π")

            display_cols = []
            for col in ['id', 'lead', 'amount', 'operation_type', 'comment', 'created_at']:
                if col in payments_df.columns:
                    display_cols.append(col)

            if display_cols:
                st.dataframe(payments_df[display_cols], use_container_width=True)
            else:
                st.dataframe(payments_df, use_container_width=True)

    else:
        st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π")


def interactions_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏"""
    st.markdown('<h1 class="main-header">üìû –í–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏</h1>', unsafe_allow_html=True)

    tab1, tab2 = st.tabs(["üìã –°–ø–∏—Å–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ–π", "üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é"])

    with tab1:
        # –§—ñ–ª—å—Ç—Ä–∏
        col1, col2 = st.columns(2)

        with col1:
            client_id_filter = st.number_input("ID –∫–ª—ñ—î–Ω—Ç–∞:", min_value=0, value=0, step=1)

        with col2:
            if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó"):
                st.rerun()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ–π
        interactions = st.session_state.crm_client.get_client_interactions(
            client_id_filter if client_id_filter > 0 else None
        )

        if interactions:
            if isinstance(interactions, list) and len(interactions) > 0:
                interactions_df = pd.DataFrame(interactions)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                col1, col2, col3 = st.columns(3)

                with col1:
                    st.metric("–í—Å—å–æ–≥–æ –≤–∑–∞—î–º–æ–¥—ñ–π", len(interactions_df))

                with col2:
                    if 'interaction_type' in interactions_df.columns:
                        calls_count = len(interactions_df[interactions_df['interaction_type'] == 'call'])
                        st.metric("–î–∑–≤—ñ–Ω–∫—ñ–≤", calls_count)

                with col3:
                    if 'outcome' in interactions_df.columns:
                        positive_count = len(interactions_df[interactions_df['outcome'] == 'positive'])
                        st.metric("–ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö", positive_count)

                # –ì—Ä–∞—Ñ—ñ–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ–π
                col1, col2 = st.columns(2)

                with col1:
                    if 'interaction_type' in interactions_df.columns:
                        st.subheader("üìä –¢–∏–ø–∏ –≤–∑–∞—î–º–æ–¥—ñ–π")

                        type_counts = interactions_df['interaction_type'].value_counts()
                        type_names = {
                            'call': '–î–∑–≤—ñ–Ω–∫–∏',
                            'email': 'Email',
                            'meeting': '–ó—É—Å—Ç—Ä—ñ—á—ñ',
                            'sms': 'SMS'
                        }

                        fig_types = px.bar(
                            x=[type_names.get(t, t) for t in type_counts.index],
                            y=type_counts.values,
                            color=type_counts.values,
                            color_continuous_scale="Blues"
                        )
                        fig_types.update_layout(height=300)
                        st.plotly_chart(fig_types, use_container_width=True)

                with col2:
                    if 'outcome' in interactions_df.columns:
                        st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ–π")

                        outcome_counts = interactions_df['outcome'].value_counts()
                        outcome_names = {
                            'positive': '–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ',
                            'negative': '–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ',
                            'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ñ',
                            'follow_up': '–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è'
                        }

                        fig_outcomes = px.pie(
                            values=outcome_counts.values,
                            names=[outcome_names.get(o, o) for o in outcome_counts.index],
                            color_discrete_sequence=px.colors.qualitative.Pastel
                        )
                        fig_outcomes.update_layout(height=300)
                        st.plotly_chart(fig_outcomes, use_container_width=True)

                # –¢–∞–±–ª–∏—Ü—è –≤–∑–∞—î–º–æ–¥—ñ–π
                st.subheader("üìã –î–µ—Ç–∞–ª—ñ –≤–∑–∞—î–º–æ–¥—ñ–π")

                display_cols = []
                for col in ['id', 'client', 'interaction_type', 'direction', 'subject', 'outcome', 'created_at']:
                    if col in interactions_df.columns:
                        display_cols.append(col)

                if display_cols:
                    st.dataframe(interactions_df[display_cols], use_container_width=True)
                else:
                    st.dataframe(interactions_df, use_container_width=True)
        else:
            st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∑–∞—î–º–æ–¥—ñ–π")

    with tab2:
        # –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó
        st.subheader("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó")

        with st.form("create_interaction_form"):
            col1, col2 = st.columns(2)

            with col1:
                client_id = st.number_input("ID –∫–ª—ñ—î–Ω—Ç–∞*", min_value=1, value=1, step=1)
                interaction_type = st.selectbox(
                    "–¢–∏–ø –≤–∑–∞—î–º–æ–¥—ñ—ó*",
                    ["call", "email", "meeting", "sms"],
                    format_func=lambda x: {
                        "call": "–î–∑–≤—ñ–Ω–æ–∫",
                        "email": "Email",
                        "meeting": "–ó—É—Å—Ç—Ä—ñ—á",
                        "sms": "SMS"
                    }.get(x, x)
                )
                direction = st.selectbox(
                    "–ù–∞–ø—Ä—è–º–æ–∫*",
                    ["incoming", "outgoing"],
                    format_func=lambda x: {
                        "incoming": "–í—Ö—ñ–¥–Ω–∏–π",
                        "outgoing": "–í–∏—Ö—ñ–¥–Ω–∏–π"
                    }.get(x, x)
                )

            with col2:
                outcome = st.selectbox(
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç*",
                    ["positive", "negative", "neutral", "follow_up"],
                    format_func=lambda x: {
                        "positive": "–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π",
                        "negative": "–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π",
                        "neutral": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π",
                        "follow_up": "–ü–æ—Ç—Ä–µ–±—É—î –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è"
                    }.get(x, x)
                )

                follow_up_date = st.date_input(
                    "–î–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É",
                    value=datetime.now().date() + timedelta(days=1)
                )

                follow_up_time = st.time_input(
                    "–ß–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É",
                    value=datetime.now().time()
                )

            subject = st.text_input("–¢–µ–º–∞*", placeholder="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –ø–æ —Ç–æ–≤–∞—Ä—É")
            description = st.text_area("–û–ø–∏—Å", placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")

            submit_interaction = st.form_submit_button("üìû –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é", use_container_width=True)

            if submit_interaction:
                if not subject:
                    st.error("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è")
                else:
                    interaction_data = {
                        "client": client_id,
                        "interaction_type": interaction_type,
                        "direction": direction,
                        "subject": subject,
                        "outcome": outcome
                    }

                    if description:
                        interaction_data["description"] = description

                    if follow_up_date:
                        interaction_data["follow_up_date"] = follow_up_date.isoformat()

                    success, result = st.session_state.crm_client.create_interaction(interaction_data)
                    if success:
                        st.success("‚úÖ –í–∑–∞—î–º–æ–¥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                        st.rerun()
                    else:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó: {result}")


def tasks_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–¥–∞—á"""
    st.markdown('<h1 class="main-header">üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–¥–∞—á–∞–º–∏</h1>', unsafe_allow_html=True)

    # –¢–∏–ø–∏ –∑–∞–¥–∞—á
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ", use_container_width=True):
            st.session_state.task_type = "my"

    with col2:
        if st.button("‚è∞ –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ", use_container_width=True):
            st.session_state.task_type = "overdue"

    with col3:
        if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏", use_container_width=True):
            st.rerun()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø –∑–∞–¥–∞—á —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if 'task_type' not in st.session_state:
        st.session_state.task_type = "my"

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–¥–∞—á
    tasks = st.session_state.crm_client.get_tasks(st.session_state.task_type)

    if tasks:
        if isinstance(tasks, list) and len(tasks) > 0:
            tasks_df = pd.DataFrame(tasks)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric("–í—Å—å–æ–≥–æ –∑–∞–¥–∞—á", len(tasks_df))

            with col2:
                if 'status' in tasks_df.columns:
                    pending_count = len(tasks_df[tasks_df['status'] == 'pending'])
                    st.metric("–û—á—ñ–∫—É—é—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", pending_count)

            with col3:
                if 'priority' in tasks_df.columns:
                    urgent_count = len(tasks_df[tasks_df['priority'] == 'urgent'])
                    st.metric("–¢–µ—Ä–º—ñ–Ω–æ–≤–æ", urgent_count)

            # –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞–¥–∞—á –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
            if 'priority' in tasks_df.columns:
                st.subheader("üéØ –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É")

                priority_counts = tasks_df['priority'].value_counts()
                priority_names = {
                    'low': '–ù–∏–∑—å–∫–∏–π',
                    'medium': '–°–µ—Ä–µ–¥–Ω—ñ–π',
                    'high': '–í–∏—Å–æ–∫–∏–π',
                    'urgent': '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ'
                }

                fig_priority = px.bar(
                    x=[priority_names.get(p, p) for p in priority_counts.index],
                    y=priority_counts.values,
                    color=priority_counts.values,
                    color_continuous_scale="Reds"
                )
                fig_priority.update_layout(height=300)
                st.plotly_chart(fig_priority, use_container_width=True)

            # –¢–∞–±–ª–∏—Ü—è –∑–∞–¥–∞—á
            st.subheader(f"üìã {['–ú–æ—ó –∑–∞–¥–∞—á—ñ', '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–¥–∞—á—ñ'][st.session_state.task_type == 'overdue']}")

            display_cols = []
            for col in ['id', 'title', 'client', 'priority', 'status', 'due_date', 'created_at']:
                if col in tasks_df.columns:
                    display_cols.append(col)

            if display_cols:
                st.dataframe(tasks_df[display_cols], use_container_width=True)
            else:
                st.dataframe(tasks_df, use_container_width=True)
        else:
            st.info("–ó–∞–¥–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–¥–∞—á—ñ")


def reports_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–≤—ñ—Ç—ñ–≤"""
    st.markdown('<h1 class="main-header">üìä –ó–≤—ñ—Ç–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞</h1>', unsafe_allow_html=True)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–≤—ñ—Ç—É
    col1, col2, col3 = st.columns(3)

    with col1:
        date_from = st.date_input("–í—ñ–¥ –¥–∞—Ç–∏:", value=datetime.now() - timedelta(days=30))

    with col2:
        date_to = st.date_input("–î–æ –¥–∞—Ç–∏:", value=datetime.now())

    with col3:
        if st.button("üìà –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç"):
            st.rerun()

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É
    leads = st.session_state.crm_client.get_leads()
    clients = st.session_state.crm_client.get_clients()
    payments = st.session_state.crm_client.get_payments()

    if leads and clients:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame
        leads_df = pd.DataFrame(leads) if isinstance(leads, list) else pd.DataFrame()
        clients_df = pd.DataFrame(clients) if isinstance(clients, list) else pd.DataFrame()
        payments_df = pd.DataFrame(payments) if isinstance(payments, list) and payments else pd.DataFrame()

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –¥–∞—Ç–∞—Ö
        if not leads_df.empty and 'created_at' in leads_df.columns:
            leads_df['created_at'] = pd.to_datetime(leads_df['created_at'])
            mask = (leads_df['created_at'].dt.date >= date_from) & (leads_df['created_at'].dt.date <= date_to)
            leads_df = leads_df[mask]

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("–ó–∞—è–≤–æ–∫ –∑–∞ –ø–µ—Ä—ñ–æ–¥", len(leads_df))

        with col2:
            if not leads_df.empty and 'price' in leads_df.columns:
                total_revenue = leads_df['price'].sum()
                st.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞", f"{total_revenue:,.0f} ‚Ç¥")
            else:
                st.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∏—Ä—É—á–∫–∞", "0 ‚Ç¥")

        with col3:
            if not leads_df.empty and 'price' in leads_df.columns:
                avg_deal = leads_df['price'].mean()
                st.metric("–°–µ—Ä–µ–¥–Ω—è —É–≥–æ–¥–∞", f"{avg_deal:,.0f} ‚Ç¥")
            else:
                st.metric("–°–µ—Ä–µ–¥–Ω—è —É–≥–æ–¥–∞", "0 ‚Ç¥")

        with col4:
            st.metric("–í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤", len(clients_df))

        # –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ
        col1, col2 = st.columns(2)

        with col1:
            if not leads_df.empty and 'source' in leads_df.columns:
                st.subheader("üì± –î–∂–µ—Ä–µ–ª–∞ –ª—ñ–¥—ñ–≤")

                source_counts = leads_df['source'].value_counts()
                source_names = {
                    'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
                    'email': 'Email',
                    'instagram': 'Instagram',
                    'facebook': 'Facebook',
                    'website': '–°–∞–π—Ç',
                    'referral': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó'
                }

                fig_sources = px.pie(
                    values=source_counts.values,
                    names=[source_names.get(s, s) for s in source_counts.index],
                    color_discrete_sequence=px.colors.qualitative.Set1
                )
                fig_sources.update_layout(height=400)
                st.plotly_chart(fig_sources, use_container_width=True)

        with col2:
            if not leads_df.empty and 'status' in leads_df.columns:
                st.subheader("üìä –°—Ç–∞—Ç—É—Å–∏ –∑–∞—è–≤–æ–∫")

                status_counts = leads_df['status'].value_counts()
                status_names = {
                    'new': '–ù–æ–≤—ñ',
                    'queued': '–í —á–µ—Ä–∑—ñ',
                    'in_progress': '–í —Ä–æ–±–æ—Ç—ñ',
                    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω—ñ',
                    'paid': '–û–ø–ª–∞—á–µ–Ω—ñ',
                    'canceled': '–°–∫–∞—Å–æ–≤–∞–Ω—ñ'
                }

                fig_statuses = px.bar(
                    x=[status_names.get(s, s) for s in status_counts.index],
                    y=status_counts.values,
                    color=status_counts.values,
                    color_continuous_scale="Viridis"
                )
                fig_statuses.update_layout(height=400)
                st.plotly_chart(fig_statuses, use_container_width=True)

        # –î–∏–Ω–∞–º—ñ–∫–∞ –ø–æ –¥–Ω—è—Ö
        if not leads_df.empty and 'created_at' in leads_df.columns:
            st.subheader("üìà –î–∏–Ω–∞–º—ñ–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ –¥–Ω—è—Ö")

            leads_df['date'] = leads_df['created_at'].dt.date
            daily_leads = leads_df.groupby('date').size().reset_index(name='count')

            if 'price' in leads_df.columns:
                daily_revenue = leads_df.groupby('date')['price'].sum().reset_index()
                daily_stats = daily_leads.merge(daily_revenue, on='date', how='left')
            else:
                daily_stats = daily_leads
                daily_stats['price'] = 0

            fig_timeline = go.Figure()

            # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—é –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—è–≤–æ–∫
            fig_timeline.add_trace(go.Scatter(
                x=daily_stats['date'],
                y=daily_stats['count'],
                mode='lines+markers',
                name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—è–≤–æ–∫',
                yaxis='y',
                line=dict(color='blue')
            ))

            # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—é –≤–∏—Ä—É—á–∫–∏ (—è–∫—â–æ —î)
            if 'price' in daily_stats.columns:
                fig_timeline.add_trace(go.Scatter(
                    x=daily_stats['date'],
                    y=daily_stats['price'],
                    mode='lines+markers',
                    name='–í–∏—Ä—É—á–∫–∞ (‚Ç¥)',
                    yaxis='y2',
                    line=dict(color='green')
                ))

            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–µ–π
            fig_timeline.update_layout(
                height=400,
                yaxis=dict(title='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—è–≤–æ–∫', side='left'),
                yaxis2=dict(title='–í–∏—Ä—É—á–∫–∞ (‚Ç¥)', side='right', overlaying='y'),
                xaxis=dict(title='–î–∞—Ç–∞')
            )

            st.plotly_chart(fig_timeline, use_container_width=True)

        # –¢–æ–ø –∫–ª—ñ—î–Ω—Ç–∏
        if not clients_df.empty:
            st.subheader("üèÜ –¢–û–ü –∫–ª—ñ—î–Ω—Ç–∏")

            # –Ø–∫—â–æ —î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
            if 'total_spent' in clients_df.columns:
                top_clients = clients_df.nlargest(10, 'total_spent')[['full_name', 'total_spent', 'temperature']]
                st.dataframe(top_clients, use_container_width=True)
            else:
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
                display_cols = []
                for col in ['full_name', 'phone', 'email', 'temperature', 'akb_segment']:
                    if col in clients_df.columns:
                        display_cols.append(col)

                if display_cols:
                    st.dataframe(clients_df[display_cols].head(10), use_container_width=True)

    else:
        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    if not st.session_state.authenticated:
        login_page()
        return

    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    st.sidebar.title("üöÄ –ù–∞—àCRM")
    st.sidebar.markdown("---")

    # –ú–µ–Ω—é –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    menu_items = {
        "üìä –î–∞—à–±–æ—Ä–¥": "dashboard",
        "üë• –ö–ª—ñ—î–Ω—Ç–∏": "clients",
        "üìù –ó–∞—è–≤–∫–∏": "leads",
        "üå™Ô∏è –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤": "funnel",
        "üí∞ –§—ñ–Ω–∞–Ω—Å–∏": "finance",
        "üìû –í–∑–∞—î–º–æ–¥—ñ—ó": "interactions",
        "üìã –ó–∞–¥–∞—á—ñ": "tasks",
        "üìä –ó–≤—ñ—Ç–∏": "reports"
    }

    selected = st.sidebar.radio("–ù–∞–≤—ñ–≥–∞—Ü—ñ—è", list(menu_items.keys()))
    page = menu_items[selected]

    st.sidebar.markdown("---")

    # –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É
    if st.sidebar.button("üö™ –í–∏–π—Ç–∏", use_container_width=True):
        st.session_state.authenticated = False
        st.session_state.crm_client.token = None
        st.rerun()

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    st.sidebar.markdown("### üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    st.sidebar.info("–í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ admin")

    # –®–≤–∏–¥–∫—ñ –¥—ñ—ó
    st.sidebar.markdown("### ‚ö° –®–≤–∏–¥–∫—ñ –¥—ñ—ó")
    if st.sidebar.button("üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞", use_container_width=True):
        st.session_state.quick_action = "new_lead"

    if st.sidebar.button("üìû –ù–æ–≤–∞ –≤–∑–∞—î–º–æ–¥—ñ—è", use_container_width=True):
        st.session_state.quick_action = "new_interaction"

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    if page == "dashboard":
        main_dashboard()
    elif page == "clients":
        clients_page()
    elif page == "leads":
        leads_page()
    elif page == "funnel":
        funnel_page()
    elif page == "finance":
        finance_page()
    elif page == "interactions":
        interactions_page()
    elif page == "tasks":
        tasks_page()
    elif page == "reports":
        reports_page()


if __name__ == "__main__":
    main()