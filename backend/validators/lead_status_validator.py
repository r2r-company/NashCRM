# backend/validators/lead_status_validator.py - –ü–û–í–ù–ò–ô –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –í–ê–õ–Ü–î–ê–¢–û–†

"""
–í–∞–ª—ñ–¥–∞—Ç–æ—Ä –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤ –ª—ñ–¥—ñ–≤ –¥–ª—è ERP/CRM —Å–∏—Å—Ç–µ–º–∏
–û–Ω–æ–≤–ª–µ–Ω–∏–π –∑ –Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å–æ–º "–°–∫–ª–∞–¥ - –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–≥—Ä—É–∑–∫–∏"
"""

from django.db.models import Sum
from backend.models import Lead, LeadPaymentOperation
from decimal import Decimal
from typing import List, Tuple, Optional


class LeadStatusValidator:
    """
    –í–∞–ª—ñ–¥–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞—è–≤–æ–∫ –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –æ–ø–ª–∞—Ç —Ç–∞ —Ü—ñ–Ω–∏
    """

    # üî• –ü–†–ê–í–ò–õ–¨–ù–ê –ü–û–°–õ–Ü–î–û–í–ù–Ü–°–¢–¨ –°–¢–ê–¢–£–°–Ü–í
    STATUS_FLOW = [
        'queued',  # 0 - –£ —á–µ—Ä–∑—ñ
        'in_work',  # 1 - –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–æ–±–ª—è—î
        'awaiting_prepayment',  # 2 - –û—á—ñ–∫—É—é –∞–≤–∞–Ω—Å
        'preparation',  # 3 - –ê–¥–º—ñ–Ω –≤ —Ä–æ–±–æ—Ç—ñ
        'warehouse_processing',  # 4 - –û–±—Ä–æ–±–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥—ñ
        'warehouse_ready',  # 5 - üÜï –ì–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–≥—Ä—É–∑–∫–∏
        'on_the_way',  # 6 - –í –¥–æ—Ä–æ–∑—ñ
        'completed',  # 7 - –ó–∞–≤–µ—Ä—à–µ–Ω–æ
        'declined'  # 8 - –í—ñ–¥–º–æ–≤–ª–µ–Ω–æ (–æ–∫—Ä–µ–º–æ)
    ]

    # üÜï –û–ù–û–í–õ–ï–ù–Ü –ù–ê–ó–í–ò –°–¢–ê–¢–£–°–Ü–í
    STATUS_NAMES = {
        'queued': '–£ —á–µ—Ä–∑—ñ',
        'in_work': '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
        'awaiting_prepayment': '–û—á—ñ–∫—É—é –∞–≤–∞–Ω—Å',
        'preparation': '–í —Ä–æ–±–æ—Ç—É (–∞–¥–º—ñ–Ω)',
        'warehouse_processing': '–û–±—Ä–æ–±–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥—ñ',
        'warehouse_ready': '–°–∫–ª–∞–¥ - –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–≥—Ä—É–∑–∫–∏',  # üÜï
        'on_the_way': '–í –¥–æ—Ä–æ–∑—ñ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'declined': '–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ'
    }

    @classmethod
    def get_allowed_transitions(cls, current_status: str, lead: Lead = None) -> List[str]:
        """
        üî• –í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê –ü–ï–†–ï–•–û–î–Ü–í
        """
        if current_status not in cls.STATUS_FLOW:
            return []

        allowed = []

        # –ó–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–º–æ–≤–∏—Ç–∏ (–∫—Ä—ñ–º —É–∂–µ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–∏—Ö)
        if current_status != 'declined':
            allowed.append('declined')

        # –ó–∞–≤–µ—Ä—à–µ–Ω—ñ —Ç–∞ –≤—ñ–¥–º–æ–≤–ª–µ–Ω—ñ - —Ñ—ñ–Ω–∞–ª—å–Ω—ñ
        if current_status in ['completed', 'declined']:
            return allowed

        current_index = cls.STATUS_FLOW.index(current_status)

        # üî• –õ–û–ì–Ü–ö–ê –ü–ï–†–ï–•–û–î–Ü–í –í–ü–ï–†–ï–î
        if current_index + 1 < len(cls.STATUS_FLOW) - 1:  # -1 –±–æ declined –æ–∫—Ä–µ–º–æ
            next_status = cls.STATUS_FLOW[current_index + 1]

            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
            if next_status == 'warehouse_processing':
                # preparation ‚Üí warehouse_processing: –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞ + –ø–ª–∞—Ç—ñ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏
                if lead and lead.price and lead.price > 0:
                    has_payments = LeadPaymentOperation.objects.filter(lead=lead).exists()
                    if has_payments:
                        allowed.append(next_status)

            elif next_status == 'warehouse_ready':
                # warehouse_processing ‚Üí warehouse_ready: –∑–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞
                allowed.append(next_status)

            elif next_status == 'on_the_way':
                # warehouse_ready ‚Üí on_the_way: –∑–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞
                allowed.append(next_status)

            elif next_status == 'completed':
                # on_the_way ‚Üí completed: —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ–≤–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ
                if lead and cls.is_fully_paid(lead):
                    allowed.append(next_status)

            else:
                # –Ü–Ω—à—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏ - –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —É–º–æ–≤
                allowed.append(next_status)

        # üî• –õ–û–ì–Ü–ö–ê –ü–ï–†–ï–•–û–î–Ü–í –ù–ê–ó–ê–î
        if current_index > 0:
            prev_status = cls.STATUS_FLOW[current_index - 1]

            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –Ω–∞–∑–∞–¥
            if current_status == 'warehouse_ready':
                # –ó warehouse_ready –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ warehouse_processing
                allowed.append('warehouse_processing')
            elif current_status == 'on_the_way':
                # –ó on_the_way –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ warehouse_ready (–Ω–µ warehouse_processing!)
                allowed.append('warehouse_ready')
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞–∑–∞–¥
                allowed.append(prev_status)

        return list(set(allowed))  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏

    @classmethod
    def can_transition(cls, current_status: str, new_status: str, lead: Lead = None) -> Tuple[bool, str]:
        """
        üî• –°–ü–†–û–©–ï–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ü–ï–†–ï–•–û–î–£
        """
        if current_status == new_status:
            return True, "–°—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è"

        allowed = cls.get_allowed_transitions(current_status, lead)

        if new_status not in allowed:
            return False, f"–ü–µ—Ä–µ—Ö—ñ–¥ {current_status} ‚Üí {new_status} –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π"

        # üî• –î–û–î–ê–¢–ö–û–í–Ü –ü–ï–†–ï–í–Ü–†–ö–ò

        # –î–ª—è warehouse_processing
        if current_status == 'preparation' and new_status == 'warehouse_processing':
            if not lead or not lead.price or lead.price <= 0:
                return False, "–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞ –ª—ñ–¥–∞ > 0"
            if not LeadPaymentOperation.objects.filter(lead=lead).exists():
                return False, "–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–ª–∞—Ç—ñ–∂–Ω–∏–π –∑–∞–ø–∏—Å"

        # –î–ª—è completed
        if new_status == 'completed':
            if not lead or not lead.price or lead.price <= 0:
                return False, "–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞ –ª—ñ–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"
            if not cls.is_fully_paid(lead):
                payment_info = cls.get_payment_info(lead)
                return False, f"–ù–µ –≤–∏—Å—Ç–∞—á–∞—î {payment_info['shortage']} –≥—Ä–Ω"

        return True, "–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–æ"

    @classmethod
    def get_next_required_action(cls, lead: Lead) -> str:
        """
        üî• –û–ù–û–í–õ–ï–ù–Ü –û–ü–ò–°–ò –î–Ü–ô
        """
        status = lead.status

        actions = {
            'queued': "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞—î –≤–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É",
            'in_work': "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞—Ü—é—î –∑ –∫–ª—ñ—î–Ω—Ç–æ–º",
            'awaiting_prepayment': "–û—á—ñ–∫—É—î—Ç—å—Å—è –∞–≤–∞–Ω—Å –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞",
            'preparation': "–ê–¥–º—ñ–Ω –≥–æ—Ç—É—î –¥–æ –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–∞ —Å–∫–ª–∞–¥ (–ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞ + –ø–ª–∞—Ç—ñ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏)",
            'warehouse_processing': "–°–∫–ª–∞–¥ –æ–±—Ä–æ–±–ª—è—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
            'warehouse_ready': "üÜï –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤–∏–π - –æ—á—ñ–∫—É—î –º–∞—à–∏–Ω—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏",
            'on_the_way': "–¢–æ–≤–∞—Ä –≤ –¥–æ—Ä–æ–∑—ñ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–≤–Ω—É –æ–ø–ª–∞—Ç—É –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º",
            'completed': "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            'declined': "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ"
        }

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É preparation
        if status == 'preparation' and lead:
            payment_info = cls.get_payment_info(lead)

            if payment_info['price'] <= 0:
                return "–ê–¥–º—ñ–Ω –º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω—É –ª—ñ–¥–∞"

            has_payments = LeadPaymentOperation.objects.filter(lead=lead).exists()
            if not has_payments:
                return "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ —Ö–æ—á–∞ –± —è–∫—É—Å—å —Å—É–º—É –≤ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó"

            return "–ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏"

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É on_the_way
        if status == 'on_the_way' and lead:
            if not lead.price or lead.price <= 0:
                return "–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω—É –ª—ñ–¥–∞"

            if not cls.is_fully_paid(lead):
                payment_info = cls.get_payment_info(lead)
                return f"–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–ª–∞—Ç–∞ {payment_info['shortage']} –≥—Ä–Ω –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º"

            return "–ú–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É"

        return actions.get(status, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å")

    @classmethod
    def _get_transition_description(cls, from_status: str, to_status: str) -> str:
        """
        –û–ø–∏—Å —â–æ –æ–∑–Ω–∞—á–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥
        """
        descriptions = {
            ('queued', 'in_work'): "–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É",
            ('in_work', 'awaiting_prepayment'): "–ü–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É",
            ('in_work', 'queued'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤ —á–µ—Ä–≥—É",
            ('awaiting_prepayment', 'preparation'): "–ü–µ—Ä–µ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—É (–∞–≤–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ)",
            ('awaiting_prepayment', 'in_work'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É",
            ('preparation', 'warehouse_processing'): "–ü–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏",
            ('preparation', 'awaiting_prepayment'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É",
            ('warehouse_processing', 'warehouse_ready'): "–¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–≥—Ä—É–∑–∫–∏",  # üÜï
            ('warehouse_processing', 'preparation'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω—É",
            ('warehouse_ready', 'on_the_way'): "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É (–º–∞—à–∏–Ω–∞ –∑–∞–±—Ä–∞–ª–∞)",  # üÜï
            ('warehouse_ready', 'warehouse_processing'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ –æ–±—Ä–æ–±–∫—É",  # üÜï
            ('on_the_way', 'completed'): "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ (–ø—Ä–∏ –ø–æ–≤–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ)",
            ('on_the_way', 'warehouse_ready'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥",  # üÜï
        }

        # –í—ñ–¥–º–æ–≤–∞ –º–æ–∂–ª–∏–≤–∞ –∑ –±—É–¥—å-—è–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
        if to_status == 'declined':
            return "–í—ñ–¥–º–æ–≤–∏—Ç–∏ –≤—ñ–¥ –∑–∞—è–≤–∫–∏"

        return descriptions.get((from_status, to_status), f"–ü–µ—Ä–µ–π—Ç–∏ –≤ {cls.STATUS_NAMES.get(to_status)}")

    @classmethod
    def is_fully_paid(cls, lead: Lead) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ª—ñ–¥ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–ø–ª–∞—á–µ–Ω–∏–π
        """
        if not lead.price or lead.price <= 0:
            return False

        payment_info = cls.get_payment_info(lead)
        return payment_info['received'] >= payment_info['price']

    @classmethod
    def get_payment_info(cls, lead: Lead) -> dict:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø–ª–∞—Ç–∏ –ª—ñ–¥–∞
        """
        try:
            payments = LeadPaymentOperation.objects.filter(lead=lead)

            expected = payments.filter(operation_type='expected').aggregate(
                total=Sum('amount')
            )['total'] or Decimal('0')

            received = payments.filter(operation_type='received').aggregate(
                total=Sum('amount')
            )['total'] or Decimal('0')

            price = lead.price or Decimal('0')

            return {
                'price': float(price),
                'expected': float(expected),
                'received': float(received),
                'shortage': float(max(price - received, Decimal('0'))),
                'overpaid': float(max(received - price, Decimal('0'))) if price > 0 else 0.0,
                'payment_percentage': round((received / price * 100), 2) if price > 0 else 100.0
            }
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ payment_info: {e}")
            return {
                'price': 0.0,
                'expected': 0.0,
                'received': 0.0,
                'shortage': 0.0,
                'overpaid': 0.0,
                'payment_percentage': 0.0
            }

    @classmethod
    def validate_status_change(cls, lead: Lead, new_status: str, user=None) -> dict:
        """
        –ü–æ–≤–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        """
        current_status = lead.status
        can_change, reason = cls.can_transition(current_status, new_status, lead)

        result = {
            'allowed': can_change,
            'reason': reason,
            'current_status': {
                'code': current_status,
                'name': cls.STATUS_NAMES.get(current_status, current_status)
            },
            'new_status': {
                'code': new_status,
                'name': cls.STATUS_NAMES.get(new_status, new_status)
            },
            'payment_info': cls.get_payment_info(lead),
            'next_action': cls.get_next_required_action(lead) if not can_change else None
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏
        available_transitions = cls.get_allowed_transitions(current_status, lead)
        result['available_transitions'] = [
            {
                'code': status,
                'name': cls.STATUS_NAMES.get(status, status),
                'description': cls._get_transition_description(current_status, status)
            }
            for status in available_transitions
        ]

        return result

    @classmethod
    def get_detailed_requirements(cls, current_status: str, target_status: str, lead: Lead = None) -> dict:
        """
        üî• –î–µ—Ç–∞–ª—å–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        """
        requirements = {
            'status_transition': f"{cls.STATUS_NAMES.get(current_status)} ‚Üí {cls.STATUS_NAMES.get(target_status)}",
            'requirements': [],
            'current_state': {},
            'missing': [],
            'blocking_factors': []
        }

        if not lead:
            requirements['blocking_factors'].append("–õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return requirements

        # –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–∫–ª–∞–¥
        if current_status == 'preparation' and target_status == 'warehouse_processing':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ü—ñ–Ω—É
            price_ok = lead.price and lead.price > 0
            payment_records_count = LeadPaymentOperation.objects.filter(lead=lead).count()

            requirements['requirements'].extend([
                "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü—ñ–Ω–∞ –ª—ñ–¥–∞ > 0",
                "–ú—ñ–Ω—ñ–º—É–º –æ–¥–∏–Ω –∑–∞–ø–∏—Å —É –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ—è—Ö"
            ])

            requirements['current_state'] = {
                'price': float(lead.price or 0),
                'price_set': price_ok,
                'payment_records_count': payment_records_count
            }

            if not price_ok:
                requirements['missing'].append("–¶—ñ–Ω–∞ –ª—ñ–¥–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–±–æ = 0")
                requirements['blocking_factors'].append("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ü—ñ–Ω—É –ª—ñ–¥–∞ –≤ –ø–æ–ª—ñ 'price'")

            if payment_records_count == 0:
                requirements['missing'].append("–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –ø–ª–∞—Ç–µ–∂—ñ")
                requirements['blocking_factors'].append(
                    f"–î–æ–¥–∞–π—Ç–µ –ø–ª–∞—Ç—ñ–∂–Ω–∏–π –∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ POST /api/leads/{lead.id}/add-payment/")

        # –í–∏–º–æ–≥–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        elif target_status == 'completed':
            payment_info = cls.get_payment_info(lead)
            fully_paid = cls.is_fully_paid(lead)

            requirements['requirements'].extend([
                "–¶—ñ–Ω–∞ –ª—ñ–¥–∞ > 0",
                f"–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞ ({payment_info['price']} –≥—Ä–Ω)"
            ])

            requirements['current_state'] = {
                'price': payment_info['price'],
                'received': payment_info['received'],
                'shortage': payment_info['shortage'],
                'payment_percentage': payment_info['payment_percentage'],
                'fully_paid': fully_paid
            }

            if payment_info['price'] <= 0:
                requirements['missing'].append("–¶—ñ–Ω–∞ –ª—ñ–¥–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                requirements['blocking_factors'].append("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ü—ñ–Ω—É –ª—ñ–¥–∞")

            if not fully_paid:
                requirements['missing'].append(f"–ù–µ –≤–∏—Å—Ç–∞—á–∞—î {payment_info['shortage']} –≥—Ä–Ω")
                requirements['blocking_factors'].append(f"–î–æ–¥–∞–π—Ç–µ –ø–ª–∞—Ç—ñ–∂ –Ω–∞ —Å—É–º—É {payment_info['shortage']} –≥—Ä–Ω")

        return requirements

    @classmethod
    def get_status_flow_info(cls) -> dict:
        """
        üî• –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ—Å—å flow —Å—Ç–∞—Ç—É—Å—ñ–≤
        """
        return {
            'flow': cls.STATUS_FLOW,
            'names': cls.STATUS_NAMES,
            'total_statuses': len(cls.STATUS_FLOW),
            'final_statuses': ['completed', 'declined'],
            'active_statuses': [s for s in cls.STATUS_FLOW if s not in ['completed', 'declined']],
            'warehouse_statuses': ['warehouse_processing', 'warehouse_ready'],
            'manager_statuses': ['queued', 'in_work', 'awaiting_prepayment'],
            'admin_statuses': ['preparation'],
            'delivery_statuses': ['on_the_way']
        }

    @classmethod
    def get_status_by_role(cls, user_role: str) -> List[str]:
        """
        üî• –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –°—Ç–∞—Ç—É—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è —Ä–æ–ª—ñ
        """
        role_statuses = {
            'manager': ['queued', 'in_work', 'awaiting_prepayment'],
            'accountant': ['preparation', 'awaiting_prepayment', 'on_the_way', 'completed'],
            'warehouse': ['warehouse_processing', 'warehouse_ready'],
            'admin': cls.STATUS_FLOW.copy(),
            'superadmin': cls.STATUS_FLOW.copy()
        }

        return role_statuses.get(user_role, [])


def get_lead_requirements(lead_id: int, target_status: str) -> dict:
    """
    üî• –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É
    """
    try:
        lead = Lead.objects.get(id=lead_id)
        return LeadStatusValidator.get_detailed_requirements(lead.status, target_status, lead)
    except Lead.DoesNotExist:
        return {
            'error': 'LEAD_NOT_FOUND',
            'message': f'–õ—ñ–¥ –∑ ID {lead_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        }


def validate_lead_status_change(lead_id: int, new_status: str, user=None) -> dict:
    """
    –ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞—Ö
    """
    try:
        lead = Lead.objects.get(id=lead_id)
        return LeadStatusValidator.validate_status_change(lead, new_status, user)
    except Lead.DoesNotExist:
        return {
            'allowed': False,
            'reason': f'–õ—ñ–¥ –∑ ID {lead_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
            'error': 'LEAD_NOT_FOUND'
        }


def get_status_transitions_map() -> dict:
    """
    üî• –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ö–∞—Ä—Ç–∞ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤
    """
    transitions = {}

    for status in LeadStatusValidator.STATUS_FLOW:
        transitions[status] = {
            'name': LeadStatusValidator.STATUS_NAMES.get(status),
            'index': LeadStatusValidator.STATUS_FLOW.index(status),
            'can_transition_to': LeadStatusValidator.get_allowed_transitions(status),
            'is_final': status in ['completed', 'declined']
        }

    return transitions


def check_status_requirements(lead: Lead, target_status: str) -> dict:
    """
    üî• –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–º–æ–≥ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
    """
    current_status = lead.status

    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É
    can_transition, reason = LeadStatusValidator.can_transition(current_status, target_status, lead)

    if not can_transition:
        return {
            'can_change': False,
            'reason': reason,
            'requirements_met': False
        }

    # –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–º–æ–≥
    requirements = LeadStatusValidator.get_detailed_requirements(current_status, target_status, lead)

    return {
        'can_change': True,
        'reason': '–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–æ',
        'requirements_met': len(requirements['missing']) == 0,
        'missing_requirements': requirements['missing'],
        'blocking_factors': requirements['blocking_factors']
    }