# backend/validators/lead_status_validator.py
"""
–í–∞–ª—ñ–¥–∞—Ç–æ—Ä –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ —Å—Ç–∞—Ç—É—Å—ñ–≤ –ª—ñ–¥—ñ–≤ –¥–ª—è ERP/CRM —Å–∏—Å—Ç–µ–º–∏
–Ø–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä, –ø–æ—Ç—Ä—ñ–±–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤
"""

from django.db.models import Sum
from backend.models import Lead, LeadPaymentOperation
from decimal import Decimal
from typing import List, Tuple, Optional


class LeadStatusValidator:
    """
    –í–∞–ª—ñ–¥–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞—è–≤–æ–∫ –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –æ–ø–ª–∞—Ç
    """

    # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —Å—Ç–∞—Ç—É—Å—ñ–≤ (–º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥)
    STATUS_FLOW = [
        'queued',  # 0 - –£ —á–µ—Ä–∑—ñ
        'in_work',  # 1 - –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–æ–±–ª—è—î
        'awaiting_prepayment',  # 2 - –û—á—ñ–∫—É—é –∞–≤–∞–Ω—Å (–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—Ä–∏–º–∞–≤ –æ–ø–ª–∞—Ç—É)
        'preparation',  # 3 - –ê–¥–º—ñ–Ω –≤ —Ä–æ–±–æ—Ç—ñ (–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ü—ñ–Ω—É)
        'warehouse_processing',  # 4 - –°–∫–ª–∞–¥
        'on_the_way',  # 5 - –í –¥–æ—Ä–æ–∑—ñ
        'completed',  # 6 - –ó–∞–≤–µ—Ä—à–µ–Ω–æ (—Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ–≤–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ!)
        'declined'  # 7 - –í—ñ–¥–º–æ–≤–ª–µ–Ω–æ (–º–æ–∂–Ω–∞ –∑ –±—É–¥—å-—è–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É)
    ]

    STATUS_NAMES = {
        'queued': '–£ —á–µ—Ä–∑—ñ',
        'in_work': '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
        'awaiting_prepayment': '–û—á—ñ–∫—É—é –∞–≤–∞–Ω—Å',
        'preparation': '–í —Ä–æ–±–æ—Ç—É (–∞–¥–º—ñ–Ω)',
        'warehouse_processing': '–°–∫–ª–∞–¥',
        'on_the_way': '–í –¥–æ—Ä–æ–∑—ñ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'declined': '–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ'
    }

    @classmethod
    def get_allowed_transitions(cls, current_status: str, lead: Lead = None) -> List[str]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
        """
        if current_status not in cls.STATUS_FLOW:
            return []

        current_index = cls.STATUS_FLOW.index(current_status)
        allowed = []

        # –ó–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–º–æ–≤–∏—Ç–∏ (–∫—Ä—ñ–º —É–∂–µ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–∏—Ö)
        if current_status != 'declined':
            allowed.append('declined')

        # –ó–∞–≤–µ—Ä—à–µ–Ω—ñ —Ç–∞ –≤—ñ–¥–º–æ–≤–ª–µ–Ω—ñ - —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏
        if current_status in ['completed', 'declined']:
            return allowed

        # –ú–æ–∂–Ω–∞ –π—Ç–∏ –Ω–∞ –æ–¥–∏–Ω –∫—Ä–æ–∫ –≤–ø–µ—Ä–µ–¥
        if current_index + 1 < len(cls.STATUS_FLOW) - 1:  # -1 –±–æ declined –æ–∫—Ä–µ–º–æ
            next_status = cls.STATUS_FLOW[current_index + 1]

            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è completed - —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ–≤–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ
            if next_status == 'completed' and lead:
                # üî• –£–ú–û–í–ê 1: –¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                if lead.price and lead.price > 0 and cls.is_fully_paid(lead):
                    allowed.append(next_status)
                # –Ø–∫—â–æ —Ü—ñ–Ω–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–±–æ –Ω–µ –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞ - –Ω–µ –¥–æ–¥–∞—î–º–æ completed

            # üî• –ù–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê: warehouse_processing —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –æ–ø–ª–∞—Ç—É
            elif next_status == 'warehouse_processing' and lead and current_status == 'preparation':
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –•–û–ß–ê –ë –û–î–ò–ù –∑–∞–ø–∏—Å –≤ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ—è—Ö
                has_any_payment_record = LeadPaymentOperation.objects.filter(lead=lead).exists()
                if has_any_payment_record:
                    allowed.append(next_status)
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É - –Ω–µ –¥–æ–¥–∞—î–º–æ warehouse_processing

            else:
                allowed.append(next_status)

        # –ú–æ–∂–Ω–∞ –π—Ç–∏ –Ω–∞ –æ–¥–∏–Ω –∫—Ä–æ–∫ –Ω–∞–∑–∞–¥ (–∫—Ä—ñ–º queued)
        if current_index > 0:
            prev_status = cls.STATUS_FLOW[current_index - 1]
            allowed.append(prev_status)

        return allowed

    @classmethod
    def can_transition(cls, current_status: str, new_status: str, lead: Lead = None) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –∑ –æ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –≤ —ñ–Ω—à–∏–π
        –ü–æ–≤–µ—Ä—Ç–∞—î (–¥–æ–∑–≤–æ–ª–µ–Ω–æ, –ø—Ä–∏—á–∏–Ω–∞)
        """
        if current_status == new_status:
            return True, "–°—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è"

        allowed = cls.get_allowed_transitions(current_status, lead)

        if new_status not in allowed:
            return False, f"–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –∑ '{cls.STATUS_NAMES.get(current_status)}' –≤ '{cls.STATUS_NAMES.get(new_status)}'"

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è completed
        if new_status == 'completed' and lead:
            # üî• –ü–ï–†–ï–í–Ü–†–ö–ê 1: –¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if not lead.price or lead.price <= 0:
                return False, f"–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ - –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü—ñ–Ω–∞ –ª—ñ–¥–∞. –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ü—ñ–Ω—É –≤ —Å—Ç–∞—Ç—É—Å—ñ 'preparation'"

            # üî• –ü–ï–†–ï–í–Ü–†–ö–ê 2: –ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞ –≤—ñ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–Ω–∏
            if not cls.is_fully_paid(lead):
                payment_info = cls.get_payment_info(lead)
                shortage = payment_info['price'] - payment_info['received']
                return False, f"–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ - –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î {shortage} –≥—Ä–Ω –¥–ª—è –ø–æ–≤–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ (–≤—ñ–¥ —Ü—ñ–Ω–∏ {payment_info['price']} –≥—Ä–Ω)"

        # üî• –ù–û–í–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ—Ö—ñ–¥ preparation ‚Üí warehouse_processing
        if current_status == 'preparation' and new_status == 'warehouse_processing' and lead:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –•–û–ß–ê –ë –û–î–ò–ù –∑–∞–ø–∏—Å –ø—Ä–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É –æ–ø–µ—Ä–∞—Ü—ñ—é
            has_any_payment_record = LeadPaymentOperation.objects.filter(lead=lead).exists()
            if not has_any_payment_record:
                return False, f"–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥ - –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –ø—Ä–æ –æ–ø–ª–∞—Ç—É. –°–ø–æ—á–∞—Ç–∫—É –≤–Ω–µ—Å—ñ—Ç—å —Ö–æ—á–∞ –± —è–∫—É—Å—å —Å—É–º—É –≤ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó"

        return True, "–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–æ"

    @classmethod
    def is_fully_paid(cls, lead: Lead) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ª—ñ–¥ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–ø–ª–∞—á–µ–Ω–∏–π
        """
        # üî• –ù–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –Ø–∫—â–æ —Ü—ñ–Ω–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–ø–ª–∞—á–µ–Ω–∏–π
        if not lead.price or lead.price <= 0:
            return False  # –ë–µ–∑ —Ü—ñ–Ω–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ "–ø–æ–≤–Ω—ñ—Å—Ç—é –æ–ø–ª–∞—á–µ–Ω–∏–π"

        payment_info = cls.get_payment_info(lead)
        return payment_info['received'] >= payment_info['price']

    @classmethod
    def get_payment_info(cls, lead: Lead) -> dict:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø–ª–∞—Ç–∏ –ª—ñ–¥–∞
        """
        payments = LeadPaymentOperation.objects.filter(lead=lead)

        expected = payments.filter(operation_type='expected').aggregate(
            total=Sum('amount')
        )['total'] or Decimal('0')

        received = payments.filter(operation_type='received').aggregate(
            total=Sum('amount')
        )['total'] or Decimal('0')

        price = lead.price or Decimal('0')

        return {
            'price': price,
            'expected': expected,
            'received': received,
            'shortage': max(price - received, Decimal('0')),
            'overpaid': max(received - price, Decimal('0')) if price > 0 else Decimal('0'),
            'payment_percentage': round((received / price * 100), 2) if price > 0 else 100
        }

    @classmethod
    def get_next_required_action(cls, lead: Lead) -> str:
        """
        –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ –∑ –ª—ñ–¥–æ–º
        """
        status = lead.status
        payment_info = cls.get_payment_info(lead)

        if status == 'queued':
            return "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞—î –≤–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É"

        elif status == 'in_work':
            return "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞—î –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–ª–∞—Ç—É"

        elif status == 'awaiting_prepayment':
            return "–û—á—ñ–∫—É—î—Ç—å—Å—è –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–≤–∞–Ω—Å—É –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞"

        elif status == 'preparation':
            if payment_info['price'] <= 0:
                return "–ê–¥–º—ñ–Ω –º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω—É –ª—ñ–¥–∞"
            else:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–∞–ø–∏—Å–∏ –ø—Ä–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
                has_any_payment_record = LeadPaymentOperation.objects.filter(lead=lead).exists() if lead else False
                if not has_any_payment_record:
                    return "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ —Ö–æ—á–∞ –± —è–∫—É—Å—å —Å—É–º—É –≤ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó"
                else:
                    return "–ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥"

        elif status == 'warehouse_processing':
            return "–°–∫–ª–∞–¥ –º–∞—î –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"

        elif status == 'on_the_way':
            if not lead.price or lead.price <= 0:
                return "–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω—É –ª—ñ–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å—ñ 'preparation'"
            elif not cls.is_fully_paid(lead):
                payment_info = cls.get_payment_info(lead)
                return f"–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–ª–∞—Ç–∞ {payment_info['shortage']} –≥—Ä–Ω –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º (–≤—ñ–¥ —Ü—ñ–Ω–∏ {payment_info['price']} –≥—Ä–Ω)"
            else:
                return "–ú–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É"

        elif status == 'completed':
            return "–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

        elif status == 'declined':
            return "–ó–∞—è–≤–∫–∞ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–∞"

        return "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å"

    @classmethod
    def validate_status_change(cls, lead: Lead, new_status: str, user=None) -> dict:
        """
        –ü–æ–≤–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        """
        current_status = lead.status
        can_change, reason = cls.can_transition(current_status, new_status, lead)

        result = {
            'allowed': can_change,
            'reason': reason,
            'current_status': {
                'code': current_status,
                'name': cls.STATUS_NAMES.get(current_status)
            },
            'new_status': {
                'code': new_status,
                'name': cls.STATUS_NAMES.get(new_status)
            },
            'payment_info': cls.get_payment_info(lead),
            'next_action': cls.get_next_required_action(lead) if not can_change else None
        }

        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏
        result['available_transitions'] = [
            {
                'code': status,
                'name': cls.STATUS_NAMES.get(status),
                'description': cls._get_transition_description(current_status, status)
            }
            for status in cls.get_allowed_transitions(current_status, lead)
        ]

        return result

    @classmethod
    def _get_transition_description(cls, from_status: str, to_status: str) -> str:
        """
        –û–ø–∏—Å —â–æ –æ–∑–Ω–∞—á–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥
        """
        descriptions = {
            ('queued', 'in_work'): "–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É",
            ('in_work', 'awaiting_prepayment'): "–ü–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É (–∫–ª—ñ—î–Ω—Ç –≥–æ—Ç–æ–≤–∏–π –ø–ª–∞—Ç–∏—Ç–∏)",
            ('in_work', 'queued'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤ —á–µ—Ä–≥—É",
            ('awaiting_prepayment', 'preparation'): "–ü–µ—Ä–µ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—É (–∞–≤–∞–Ω—Å –æ—Ç—Ä–∏–º–∞–Ω–æ)",
            ('awaiting_prepayment', 'in_work'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É",
            ('preparation', 'warehouse_processing'): "–ü–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥",
            ('preparation', 'in_work'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É",
            ('warehouse_processing', 'on_the_way'): "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É",
            ('warehouse_processing', 'preparation'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω—É",
            ('on_the_way', 'completed'): "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ (–ø—Ä–∏ –ø–æ–≤–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ)",
            ('on_the_way', 'warehouse_processing'): "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥",
        }

        # –í—ñ–¥–º–æ–≤–∞ –º–æ–∂–ª–∏–≤–∞ –∑ –±—É–¥—å-—è–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
        if to_status == 'declined':
            return "–í—ñ–¥–º–æ–≤–∏—Ç–∏ –≤—ñ–¥ –∑–∞—è–≤–∫–∏"

        return descriptions.get((from_status, to_status), f"–ü–µ—Ä–µ–π—Ç–∏ –≤ {cls.STATUS_NAMES.get(to_status)}")


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ views
def validate_lead_status_change(lead_id: int, new_status: str, user=None) -> dict:
    """
    –ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞—Ö
    """
    try:
        lead = Lead.objects.get(id=lead_id)
        return LeadStatusValidator.validate_status_change(lead, new_status, user)
    except Lead.DoesNotExist:
        return {
            'allowed': False,
            'reason': f'–õ—ñ–¥ –∑ ID {lead_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
            'error': 'LEAD_NOT_FOUND'
        }