# backend/utils/api_responses.py - –°–¢–ê–ù–î–ê–†–¢–ù–Ü API –í–Ü–î–ü–û–í–Ü–î–Ü

from rest_framework.response import Response
from django.utils import timezone
from typing import Dict, Any, Optional, List, Union
from enum import Enum


class ErrorType(Enum):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫"""
    VALIDATION = "VALIDATION_ERROR"
    PERMISSION = "PERMISSION_ERROR"
    NOT_FOUND = "NOT_FOUND_ERROR"
    DUPLICATE = "DUPLICATE_ERROR"
    BUSINESS_RULE = "BUSINESS_RULE_ERROR"
    SYSTEM = "SYSTEM_ERROR"


class StatusChangeError(Enum):
    """–¢–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ –ª—ñ–¥—ñ–≤"""
    INVALID_TRANSITION = "INVALID_TRANSITION"
    MISSING_PAYMENT = "MISSING_PAYMENT"
    INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS"
    MISSING_PRICE = "MISSING_PRICE"
    BUSINESS_RULE_VIOLATION = "BUSINESS_RULE_VIOLATION"


class APIResponse:
    """
    –ö–ª–∞—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    """

    @staticmethod
    def success(data=None, message=None, meta=None, status_code=200):
        """
        ‚úÖ –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
        {
            "success": true,
            "data": { ... },
            "message": "–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞",
            "errors": null,
            "meta": { "timestamp": "...", "status_code": 200 }
        }
        """
        response_data = {
            "success": True,
            "data": data or {},
            "message": message,
            "errors": None,
            "meta": {
                "timestamp": timezone.now().isoformat(),
                "status_code": status_code,
                **(meta or {})
            }
        }

        return Response(response_data, status=status_code)

    @staticmethod
    def error(error_type, message, details=None, field_errors=None, meta=None, status_code=400):
        """
        ‚ùå –ü–æ–º–∏–ª–∫–∞

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
        {
            "success": false,
            "data": null,
            "message": "–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏",
            "errors": {
                "type": "ERROR_TYPE",
                "message": "–û–ø–∏—Å –ø–æ–º–∏–ª–∫–∏",
                "details": { ... },
                "field_errors": { "field": ["–ø–æ–º–∏–ª–∫–∞1", "–ø–æ–º–∏–ª–∫–∞2"] }
            },
            "meta": { "timestamp": "...", "status_code": 400 }
        }
        """
        # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ enum - –±–µ—Ä–µ–º–æ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
        if isinstance(error_type, (ErrorType, StatusChangeError)):
            error_type = error_type.value

        response_data = {
            "success": False,
            "data": None,
            "message": message,
            "errors": {
                "type": error_type,
                "message": message,
                "details": details or {},
                "field_errors": field_errors or {}
            },
            "meta": {
                "timestamp": timezone.now().isoformat(),
                "status_code": status_code,
                **(meta or {})
            }
        }

        return Response(response_data, status=status_code)

    @staticmethod
    def validation_error(message="–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó", field_errors=None, details=None, meta=None):
        """
        üìù –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (400)

        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è: –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º, –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è, —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö
        """
        return APIResponse.error(
            error_type=ErrorType.VALIDATION,
            message=message,
            field_errors=field_errors,
            details=details,
            meta=meta,
            status_code=400
        )

    @staticmethod
    def duplicate_error(resource, duplicate_field, duplicate_value, existing_resource=None, meta=None):
        """
        üîÑ –ü–æ–º–∏–ª–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—É (409)

        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è: –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤, –Ω–æ–º–µ—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å, email
        """
        message = f"{resource} –∑ {duplicate_field} '{duplicate_value}' –≤–∂–µ —ñ—Å–Ω—É—î"

        return APIResponse.error(
            error_type=ErrorType.DUPLICATE,
            message=message,
            details={
                "resource": resource,
                "duplicate_field": duplicate_field,
                "duplicate_value": duplicate_value,
                "existing_resource": existing_resource or {}
            },
            meta=meta,
            status_code=409
        )

    @staticmethod
    def not_found_error(resource, resource_id=None, meta=None):
        """
        üîç –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (404)

        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è: –ª—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î
        """
        message = f"{resource} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        if resource_id:
            message += f" (ID: {resource_id})"

        return APIResponse.error(
            error_type=ErrorType.NOT_FOUND,
            message=message,
            details={
                "resource": resource,
                "resource_id": resource_id
            },
            meta=meta,
            status_code=404
        )

    @staticmethod
    def permission_error(message="–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É", required_role=None, meta=None):
        """
        üîí –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É (403)

        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è: –Ω–µ–º–∞—î –ø—Ä–∞–≤, —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        """
        return APIResponse.error(
            error_type=ErrorType.PERMISSION,
            message=message,
            details={
                "required_role": required_role
            },
            meta=meta,
            status_code=403
        )

    @staticmethod
    def business_rule_error(message, rule_name=None, suggested_actions=None, meta=None):
        """
        üìã –ü–æ—Ä—É—à–µ–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª (422)

        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è: –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏, –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π
        """
        return APIResponse.error(
            error_type=ErrorType.BUSINESS_RULE,
            message=message,
            details={
                "rule_name": rule_name,
                "suggested_actions": suggested_actions or []
            },
            meta=meta,
            status_code=422
        )

    @staticmethod
    def system_error(message, exception_details=None, meta=None):
        """
        üö® –°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ (500)

        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è: –ø–æ–º–∏–ª–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        """
        return APIResponse.error(
            error_type=ErrorType.SYSTEM,
            message=message,
            details={
                "exception_details": exception_details
            },
            meta=meta,
            status_code=500
        )


class LeadStatusResponse:
    """
    –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ª—ñ–¥—ñ–≤
    """

    @staticmethod
    def invalid_transition(current_status, attempted_status, available_transitions, reason=None):
        """
        üîÑ –ù–µ–º–æ–∂–ª–∏–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ —Å—Ç–∞—Ç—É—Å—É

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ errors.details:
        {
            "current_status": "queued",
            "attempted_status": "completed",
            "available_transitions": [
                {"code": "in_work", "name": "–í —Ä–æ–±–æ—Ç—ñ", "description": "–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É"}
            ],
            "reason": "–û–ø–∏—Å —á–æ–º—É –Ω–µ–º–æ–∂–ª–∏–≤–æ"
        }
        """
        message = reason or f"–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑ '{current_status}' –Ω–∞ '{attempted_status}'"

        return APIResponse.error(
            error_type=StatusChangeError.INVALID_TRANSITION,
            message=message,
            details={
                "current_status": current_status,
                "attempted_status": attempted_status,
                "available_transitions": available_transitions or [],
                "reason": reason
            },
            meta={"error_category": "status_change"},
            status_code=422
        )

    @staticmethod
    def missing_payment(current_status, attempted_status, payment_info, required_amount=None):
        """
        üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ errors.details:
        {
            "current_status": "on_the_way",
            "attempted_status": "completed",
            "payment_info": {
                "price": 1000,
                "received": 500,
                "shortage": 500
            },
            "required_amount": 500
        }
        """
        if required_amount:
            message = f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ '{attempted_status}' –ø–æ—Ç—Ä—ñ–±–Ω–æ {required_amount} –≥—Ä–Ω"
        else:
            message = f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ '{attempted_status}' –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞"

        return APIResponse.error(
            error_type=StatusChangeError.INSUFFICIENT_FUNDS,
            message=message,
            details={
                "current_status": current_status,
                "attempted_status": attempted_status,
                "payment_info": payment_info,
                "required_amount": required_amount
            },
            meta={"error_category": "status_change"},
            status_code=422
        )

    @staticmethod
    def missing_price(current_status, attempted_status, lead_id):
        """
        üí∏ –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü—ñ–Ω–∞ –ª—ñ–¥–∞

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ errors.details:
        {
            "current_status": "preparation",
            "attempted_status": "warehouse_processing",
            "lead_id": 123,
            "required_action": "PATCH /api/leads/123/ {'price': 1000}"
        }
        """
        return APIResponse.error(
            error_type=StatusChangeError.MISSING_PRICE,
            message=f"–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ '{attempted_status}' –±–µ–∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–Ω–∏ –ª—ñ–¥–∞",
            details={
                "current_status": current_status,
                "attempted_status": attempted_status,
                "lead_id": lead_id,
                "required_action": f"PATCH /api/leads/{lead_id}/ {{'price': 1000}}"
            },
            meta={"error_category": "status_change"},
            status_code=422
        )

    @staticmethod
    def success_transition(lead_id, old_status, new_status, lead_data, payment_info=None, next_action=None):
        """
        ‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ data:
        {
            "lead": { ... },
            "status_change": {
                "from": "queued",
                "to": "in_work",
                "timestamp": "2025-01-01T10:00:00Z"
            },
            "payment_info": { ... },
            "next_action": "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞—î –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º"
        }
        """
        return APIResponse.success(
            data={
                "lead": lead_data,
                "status_change": {
                    "from": old_status,
                    "to": new_status,
                    "timestamp": timezone.now().isoformat()
                },
                "payment_info": payment_info or {},
                "next_action": next_action
            },
            message=f"–°—Ç–∞—Ç—É—Å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ: {old_status} ‚Üí {new_status}",
            meta={
                "lead_id": lead_id,
                "change_type": "status_update"
            }
        )


# üî• –ü–†–ò–ö–õ–ê–î–ò –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:

"""
# 1. –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
return APIResponse.success(
    data={"leads": [...]},
    message="–õ—ñ–¥–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ",
    meta={"total_count": 150}
)

# 2. –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
return APIResponse.validation_error(
    message="–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ",
    field_errors={
        "phone": ["–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π"],
        "email": ["–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email"]
    }
)

# 3. –î—É–±–ª—ñ–∫–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É
return APIResponse.duplicate_error(
    resource="–õ—ñ–¥",
    duplicate_field="—Ç–µ–ª–µ—Ñ–æ–Ω",
    duplicate_value="+380123456789",
    existing_resource={"id": 123, "name": "–Ü–≤–∞–Ω"}
)

# 4. –õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
return APIResponse.not_found_error(
    resource="–õ—ñ–¥",
    resource_id=999
)

# 5. –ù–µ–º–æ–∂–ª–∏–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ —Å—Ç–∞—Ç—É—Å—É
return LeadStatusResponse.invalid_transition(
    current_status="queued",
    attempted_status="completed",
    available_transitions=[
        {"code": "in_work", "name": "–í —Ä–æ–±–æ—Ç—ñ"}
    ],
    reason="–ù–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—Ç—Ä–∏–±—É–≤–∞—Ç–∏ –µ—Ç–∞–ø–∏"
)

# 6. –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤
return LeadStatusResponse.missing_payment(
    current_status="on_the_way",
    attempted_status="completed",
    payment_info={
        "price": 1000,
        "received": 500,
        "shortage": 500
    },
    required_amount=500
)

# 7. –£—Å–ø—ñ—à–Ω–∞ –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É
return LeadStatusResponse.success_transition(
    lead_id=123,
    old_status="queued",
    new_status="in_work",
    lead_data={"id": 123, "name": "–Ü–≤–∞–Ω"},
    next_action="–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞—î –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É"
)
"""