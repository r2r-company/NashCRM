# backend/utils/api_responses.py - –¢–Ü–õ–¨–ö–ò –û–°–ù–û–í–ù–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø

from rest_framework.response import Response
from django.utils import timezone
from enum import Enum

from backend.validators.lead_status_validator import LeadStatusValidator


class ErrorType(Enum):
    VALIDATION = "VALIDATION_ERROR"
    PERMISSION = "PERMISSION_ERROR"
    NOT_FOUND = "NOT_FOUND_ERROR"
    DUPLICATE = "DUPLICATE_ERROR"
    BUSINESS_RULE = "BUSINESS_RULE_ERROR"
    SYSTEM = "SYSTEM_ERROR"
    AUTHENTICATION = "AUTHENTICATION_ERROR"


class StatusChangeError(Enum):
    INVALID_TRANSITION = "INVALID_TRANSITION"
    MISSING_PAYMENT = "MISSING_PAYMENT"
    INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS"
    MISSING_PRICE = "MISSING_PRICE"
    STATUS_TRANSITION_BLOCKED = "STATUS_TRANSITION_BLOCKED"


class APIResponse:
    """
    üî• –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: success —Ç–µ–ø–µ—Ä –≤ data
    """

    @staticmethod
    def success(data=None, message=None, meta=None, status_code=200):
        """
        ‚úÖ –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - success –≤ data, message —ñ errors –≤ meta

        –†–µ–∑—É–ª—å—Ç–∞—Ç:
        {
            "data": {
                "success": true,
                "leads": [...],
                "access": "..."
            },
            "meta": {
                "message": "...",
                "errors": null,
                "timestamp": "...",
                "status_code": 200
            }
        }
        """
        # –Ø–∫—â–æ data None - —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç
        if data is None:
            data = {}

        # –Ø–∫—â–æ data –Ω–µ —Å–ª–æ–≤–Ω–∏–∫ - –æ–±–≥–æ—Ä—Ç–∞—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫
        if not isinstance(data, dict):
            data = {"result": data}

        # üî• –ì–û–õ–û–í–ù–ï: –¥–æ–¥–∞—î–º–æ success –≤ data
        data["success"] = True

        # üî• –ì–û–õ–û–í–ù–ï: message —ñ errors –≤ meta
        meta_data = {
            "message": message,
            "errors": None,
            "timestamp": timezone.now().isoformat(),
            "status_code": status_code,
            **(meta or {})
        }

        response_data = {
            "data": data,
            "meta": meta_data
        }

        return Response(response_data, status=status_code)

    @staticmethod
    def error(error_type, message, details=None, field_errors=None, meta=None, status_code=400):
        """
        ‚ùå –ü–æ–º–∏–ª–∫–∞ - success –≤ data, message —ñ errors –≤ meta

        –†–µ–∑—É–ª—å—Ç–∞—Ç:
        {
            "data": {
                "success": false
            },
            "meta": {
                "message": "...",
                "errors": {...},
                "timestamp": "...",
                "status_code": 400
            }
        }
        """
        if isinstance(error_type, (ErrorType, StatusChangeError)):
            error_type = error_type.value

        # üî• –ì–û–õ–û–í–ù–ï: message —ñ errors –≤ meta
        meta_data = {
            "message": message,
            "errors": {
                "type": error_type,
                "message": message,
                "details": details or {},
                "field_errors": field_errors or {}
            },
            "timestamp": timezone.now().isoformat(),
            "status_code": status_code,
            **(meta or {})
        }

        response_data = {
            "data": {
                "success": False
            },
            "meta": meta_data
        }

        return Response(response_data, status=status_code)

    # –®–≤–∏–¥–∫—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
    @staticmethod
    def validation_error(message="–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó", field_errors=None, details=None, meta=None):
        return APIResponse.error(
            error_type=ErrorType.VALIDATION,
            message=message,
            field_errors=field_errors,
            details=details,
            meta=meta,
            status_code=400
        )

    @staticmethod
    def not_found_error(resource, resource_id=None, meta=None):
        message = f"{resource} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        if resource_id:
            message += f" (ID: {resource_id})"

        return APIResponse.error(
            error_type=ErrorType.NOT_FOUND,
            message=message,
            details={"resource": resource, "resource_id": resource_id},
            meta=meta,
            status_code=404
        )

    @staticmethod
    def duplicate_error(resource, duplicate_field, duplicate_value, existing_resource=None, meta=None):
        message = f"{resource} –∑ {duplicate_field} '{duplicate_value}' –≤–∂–µ —ñ—Å–Ω—É—î"

        return APIResponse.error(
            error_type=ErrorType.DUPLICATE,
            message=message,
            details={
                "resource": resource,
                "duplicate_field": duplicate_field,
                "duplicate_value": duplicate_value,
                "existing_resource": existing_resource or {}
            },
            meta=meta,
            status_code=409
        )


class LeadStatusResponse:
    """
    üî• –°–ü–ï–¶–Ü–ê–õ–¨–ù–Ü –í–Ü–î–ü–û–í–Ü–î–Ü –î–õ–Ø –°–¢–ê–¢–£–°–Ü–í –õ–Ü–î–Ü–í

    –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ data/meta
    """

    @staticmethod
    def invalid_transition(current_status: str, attempted_status: str, available_transitions: list, reason: str = None):
        """‚ùå –ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ —Å—Ç–∞—Ç—É—Å—É"""

        transitions_info = []
        for transition in available_transitions:
            if isinstance(transition, dict):
                transitions_info.append(transition)
            else:
                transitions_info.append({
                    'code': transition,
                    'name': LeadStatusValidator.STATUS_NAMES.get(transition, transition),
                    'description': f'–ü–µ—Ä–µ–π—Ç–∏ –≤ {transition}'
                })

        error_message = reason or f"–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –∑ '{LeadStatusValidator.STATUS_NAMES.get(current_status)}' –≤ '{LeadStatusValidator.STATUS_NAMES.get(attempted_status)}'"

        return {
            "data": None,
            "meta": {
                "message": error_message,
                "errors": {
                    "status": [
                        {
                            "type": "INVALID_TRANSITION",
                            "message": error_message,
                            "details": {
                                "current_status": {
                                    "code": current_status,
                                    "name": LeadStatusValidator.STATUS_NAMES.get(current_status)
                                },
                                "attempted_status": {
                                    "code": attempted_status,
                                    "name": LeadStatusValidator.STATUS_NAMES.get(attempted_status)
                                },
                                "available_transitions": transitions_info
                            }
                        }
                    ]
                },
                "status_code": 400,
                "code": "invalid_transition",
                "timestamp": timezone.now()
            }
        }

    @staticmethod
    def missing_payment(current_status, attempted_status, payment_info, required_amount=None):
        """
        üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É
        """
        if required_amount:
            message = f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ '{attempted_status}' –ø–æ—Ç—Ä—ñ–±–Ω–æ {required_amount} –≥—Ä–Ω"
        else:
            message = f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ '{attempted_status}' –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞"

        return APIResponse.error(
            error_type=StatusChangeError.INSUFFICIENT_FUNDS,
            message=message,
            details={
                "current_status": {
                    "code": current_status,
                    "name": current_status
                },
                "attempted_status": {
                    "code": attempted_status,
                    "name": attempted_status
                },
                "payment_info": payment_info,
                "required_amount": required_amount,
                "required_action": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–Ω–µ—Å—Ç–∏ —Ö–æ—á–∞ –± —è–∫—É—Å—å —Å—É–º—É –≤ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó"
            },
            meta={"error_category": "status_change"},
            status_code=422
        )

    @staticmethod
    def missing_price(current_status, attempted_status, lead_id):
        """
        üí∏ –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü—ñ–Ω–∞ –ª—ñ–¥–∞
        """
        return APIResponse.error(
            error_type=StatusChangeError.MISSING_PRICE,
            message=f"–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ '{attempted_status}' –±–µ–∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–Ω–∏ –ª—ñ–¥–∞",
            details={
                "current_status": {
                    "code": current_status,
                    "name": current_status
                },
                "attempted_status": {
                    "code": attempted_status,
                    "name": attempted_status
                },
                "lead_id": lead_id,
                "required_action": f"PATCH /api/leads/{lead_id}/ {{'price': 1000}}"
            },
            meta={"error_category": "status_change"},
            status_code=422
        )

    @staticmethod
    def success_transition(lead_id, old_status, new_status, lead_data, payment_info=None, next_action=None):
        """
        ‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É
        """
        return APIResponse.success(
            data={
                "lead": lead_data,
                "status_change": {
                    "from": old_status,
                    "to": new_status,
                    "timestamp": timezone.now().isoformat()
                },
                "payment_info": payment_info or {},
                "next_action": next_action
            },
            message=f"–°—Ç–∞—Ç—É—Å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ: {old_status} ‚Üí {new_status}",
            meta={
                "lead_id": lead_id,
                "change_type": "status_update"
            }
        )



# üî• –ì–û–õ–û–í–ù–ï: –°—Ç–∞—Ä–∏–π api_response —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤–∏–π APIResponse
def api_response(data=None, meta=None, message=None, errors=None, status_code=200):
    """
    –ó–í–û–†–û–¢–ù–ê –°–£–ú–Ü–°–ù–Ü–°–¢–¨: –°—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–æ–≤–∏–π APIResponse
    """
    if errors is not None or status_code >= 400:
        return APIResponse.error(
            error_type=ErrorType.SYSTEM,
            message=message or "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞",
            details=errors if isinstance(errors, dict) else {"error": errors},
            meta=meta,
            status_code=status_code
        )
    else:
        return APIResponse.success(
            data=data,
            message=message,
            meta=meta,
            status_code=status_code
        )


@staticmethod
def system_error(message="–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞", exception_details=None, meta=None):
    """üî• –°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    return APIResponse.error(
        error_type=ErrorType.SYSTEM,
        message=message,
        details=exception_details or {},
        meta=meta,
        status_code=500
    )


@staticmethod
def permission_error(message="–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤", required_role=None, meta=None):
    """üîí –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É"""
    details = {}
    if required_role:
        details["required_role"] = required_role

    return APIResponse.error(
        error_type=ErrorType.PERMISSION,
        message=message,
        details=details,
        meta=meta,
        status_code=403
    )


@staticmethod
def business_rule_error(message, rule_name=None, suggested_actions=None, meta=None):
    """üìã –ü–æ—Ä—É—à–µ–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞"""
    return APIResponse.error(
        error_type=ErrorType.BUSINESS_RULE,
        message=message,
        details={
            "rule_name": rule_name,
            "suggested_actions": suggested_actions or []
        },
        meta=meta,
        status_code=422
    )