from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib.auth import authenticate, get_user_model
from django.core.cache import cache
from django.db.models import Count, Sum, DurationField, ExpressionWrapper, F, Q, Avg, Case, When, DecimalField
from django.shortcuts import render
from django.utils.dateparse import parse_date
from django.utils.timezone import now
from rest_framework import viewsets, status
from rest_framework.decorators import api_view, permission_classes, action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.views import TokenObtainPairView
import requests
from django.contrib.auth.models import Permission
from datetime import datetime, timedelta

from NashCRM import settings
from backend.forms import LeadsReportForm
from backend.models import CustomUser, Lead, Client, LeadPaymentOperation
from backend.serializers import LeadSerializer, ClientSerializer, ExternalLeadSerializer, MyTokenObtainPairSerializer, \
    ManagerSerializer
from backend.services.lead_creation_service import create_lead_with_logic


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def ping(request):
    return Response({"msg": f"–ü—Ä–∏–≤—ñ—Ç, {request.user.username}!"})


def home(request):
    return render(request, "base.html")


class MyTokenObtainPairView(TokenObtainPairView):
    serializer_class = MyTokenObtainPairSerializer

    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)
        raw = response.data

        # –í—ñ–¥–¥—ñ–ª—è—î–º–æ —Ç–æ–∫–µ–Ω–∏ —ñ —Ä–µ—à—Ç—É
        tokens = {
            "access": raw.get("access"),
            "refresh": raw.get("refresh"),
        }
        user_info = {
            k: v for k, v in raw.items() if k not in tokens
        }

        response.data = {
            "data": {
                **tokens,
                "user": user_info
            },
            "meta": {}
        }
        return response


class LoginView(APIView):
    def post(self, request):
        username = request.data.get("username")
        password = request.data.get("password")

        user = authenticate(username=username, password=password)
        if user is None:
            return Response({"detail": "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å"}, status=status.HTTP_401_UNAUTHORIZED)

        refresh = RefreshToken.for_user(user)

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å–µ
        try:
            custom_user = CustomUser.objects.select_related('user').get(user=user)
            interface_type = custom_user.interface_type
        except CustomUser.DoesNotExist:
            interface_type = None

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä—É–ø —ñ –ø—Ä–∞–≤
        groups = list(user.groups.values_list("name", flat=True))
        permissions = list(user.user_permissions.values_list("codename", flat=True))

        return Response({
            "access": str(refresh.access_token),
            "refresh": str(refresh),
            "user": {
                "id": user.id,
                "username": user.username,
                "email": user.email,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "interface_type": interface_type,
                "groups": groups,
                "permissions": permissions,
                "is_staff": user.is_staff,
                "is_superuser": user.is_superuser,
                "last_login": user.last_login,
                "date_joined": user.date_joined,
            }
        })


class ClientViewSet(viewsets.ModelViewSet):
    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–¥—Ä–∞–∑—É
    queryset = Client.objects.select_related('assigned_to').order_by('-created_at')
    serializer_class = ClientSerializer
    permission_classes = [IsAuthenticated]

    @action(detail=True, methods=['get'])
    def leads(self, request, pk=None):
        client = self.get_object()
        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–¥—Ä–∞–∑—É
        leads = Lead.objects.select_related('assigned_to').filter(phone=client.phone)

        return Response([
            {
                "id": lead.id,
                "full_name": lead.full_name,
                "status": lead.status,
                "price": float(lead.price or 0),
                "created_at": lead.created_at,
            } for lead in leads
        ])

    @action(detail=True, methods=['get'])
    def payments(self, request, pk=None):
        client = self.get_object()

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–ª–∞—Ç–µ–∂—ñ
        payments = LeadPaymentOperation.objects.select_related('lead').filter(
            lead__phone=client.phone
        ).order_by('-created_at')

        return Response([
            {
                "id": p.id,
                "lead_id": p.lead_id,
                "type": p.operation_type,
                "amount": float(p.amount),
                "comment": p.comment,
                "created_at": p.created_at,
            } for p in payments
        ])


class ExternalLeadView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        serializer = ExternalLeadSerializer(data=request.data)
        if serializer.is_valid():
            lead, context = create_lead_with_logic(serializer.validated_data)

            return Response({
                "lead_id": lead.id,
                "client_name": lead.full_name,
                "assigned_manager": context['assigned_to'],
                "status": context['final_status'],
                "created_at": lead.created_at,
                "details": context,
                "message": f"–õ—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {lead.full_name} ‚Äî —Å—Ç–∞—Ç—É—Å: {context['final_status'].upper()}"
            }, status=status.HTTP_201_CREATED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def leads_report(request):
    date_from = request.GET.get("date_from")
    date_to = request.GET.get("date_to")

    if not date_from or not date_to:
        return Response({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ?date_from=...&date_to=..."}, status=400)

    try:
        start = datetime.strptime(date_from, "%Y-%m-%d")
        end = datetime.strptime(date_to, "%Y-%m-%d") + timedelta(days=1)
    except ValueError:
        return Response({"error": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD"}, status=400)

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º
    cache_key = f"leads_report_{date_from}_{date_to}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return Response(cached_result)

    leads = Lead.objects.filter(created_at__range=(start, end))

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –∑–∞–º—ñ—Å—Ç—å –æ–∫—Ä–µ–º–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    status_counts = dict(leads.values('status').annotate(count=Count('id')).values_list('status', 'count'))

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –æ—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–∏
    payment_totals = LeadPaymentOperation.objects.filter(
        lead__created_at__range=(start, end)
    ).aggregate(
        expected_sum=Sum('amount', filter=Q(operation_type='expected')),
        received_sum=Sum('amount', filter=Q(operation_type='received'))
    )

    expected_sum = float(payment_totals['expected_sum'] or 0)
    received_sum = float(payment_totals['received_sum'] or 0)
    delta = expected_sum - received_sum

    result = {
        "total": leads.count(),
        "by_status": status_counts,
        "expected_sum": expected_sum,
        "received_sum": received_sum,
        "delta": delta
    }

    # –ö–µ—à—É—î–º–æ –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
    cache.set(cache_key, result, 300)
    return Response(result)


@staff_member_required
def leads_report_page(request):
    form = LeadsReportForm(request.GET or None)
    context = {"form": form}

    if form.is_valid():
        # —Ç—É—Ç –º–æ–∂–µ—à —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É, –≥—Ä–∞—Ñ—ñ–∫–∏, whatever
        pass

    return render(request, "admin/reports/leads_report_form.html", context)


User = get_user_model()


class LeadsReportView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        date_from = parse_date(request.GET.get('date_from'))
        date_to = parse_date(request.GET.get('date_to'))

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
        cache_key = f"detailed_report_{date_from}_{date_to}"
        cached_result = cache.get(cache_key)
        if cached_result:
            return Response(cached_result)

        leads = Lead.objects.select_related('assigned_to')
        if date_from:
            leads = leads.filter(created_at__date__gte=date_from)
        if date_to:
            leads = leads.filter(created_at__date__lte=date_to)

        now_date = now()

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–≤—ñ—Ç –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        managers_stats = leads.values(
            'assigned_to__id',
            'assigned_to__username'
        ).annotate(
            total_leads=Count('id'),
            completed=Count('id', filter=Q(status='completed')),
            in_work=Count('id', filter=Q(status='in_work')),
            queued=Count('id', filter=Q(status='queued')),
            total_price=Sum('price', filter=Q(status='completed')),
            avg_check=Avg('price', filter=Q(status='completed'))
        ).filter(assigned_to__isnull=False)

        managers_report = []
        for stat in managers_stats:
            conversion = round((stat['completed'] / stat['total_leads']) * 100, 1) if stat['total_leads'] else 0
            avg_check = round(float(stat['avg_check'] or 0), 2)

            # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –æ–∫—Ä–µ–º–∏–º –∑–∞–ø–∏—Ç–æ–º —Ç—ñ–ª—å–∫–∏ –¥–ª—è completed
            completed_leads = leads.filter(
                assigned_to__id=stat['assigned_to__id'],
                status='completed',
                status_updated_at__isnull=False
            ).annotate(
                duration=ExpressionWrapper(
                    F("status_updated_at") - F("created_at"),
                    output_field=DurationField()
                )
            ).values_list('duration', flat=True)

            durations = [d.total_seconds() for d in completed_leads if d]
            avg_minutes = int(sum(durations) / len(durations) / 60) if durations else None

            managers_report.append({
                "manager": stat['assigned_to__username'],
                "total_leads": stat['total_leads'],
                "completed": stat['completed'],
                "in_work": stat['in_work'],
                "queued": stat['queued'],
                "total_price": str(float(stat['total_price'] or 0)),
                "avg_duration_minutes": avg_minutes,
                "conversion_rate": f"{conversion}%",
                "avg_check": f"{avg_check}",
            })

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ë–æ—Ä–≥–∏ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        client_debts = Client.objects.annotate(
            total_price=Sum(
                'phone__price',
                filter=Q(phone__status='completed') & Q(phone__in=leads)
            ),
            total_received=Sum(
                'phone__payment_operations__amount',
                filter=Q(
                    phone__payment_operations__operation_type='received'
                ) & Q(phone__in=leads)
            )
        ).annotate(
            debt=F('total_price') - F('total_received')
        ).filter(debt__gt=0).values(
            'full_name', 'phone', 'debt', 'total_received', 'total_price'
        )

        clients_report = [
            {
                "client": debt['full_name'],
                "phone": debt['phone'],
                "total_unpaid": str(float(debt['debt'] or 0)),
                "received": str(float(debt['total_received'] or 0)),
                "expected": str(float(debt['total_price'] or 0))
            }
            for debt in client_debts
        ]

        # –¢–æ–ø-5 –±–æ—Ä–∂–Ω–∏–∫—ñ–≤
        top_debts = sorted(clients_report, key=lambda x: float(x['total_unpaid']), reverse=True)[:5]

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –í–æ—Ä–æ–Ω–∫–∞ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        funnel_data = leads.aggregate(
            new=Count('id', filter=Q(status='new')),
            queued=Count('id', filter=Q(status='queued')),
            in_work=Count('id', filter=Q(status='in_work')),
            awaiting_packaging=Count('id', filter=Q(status='awaiting_packaging')),
            on_the_way=Count('id', filter=Q(status='on_the_way')),
            awaiting_cash=Count('id', filter=Q(status='awaiting_cash')),
            completed=Count('id', filter=Q(status='completed'))
        )

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        daily_stats = Lead.objects.aggregate(
            new_today=Count('id', filter=Q(created_at__date=now_date.date())),
            completed_today=Count('id', filter=Q(
                status='completed',
                status_updated_at__date=now_date.date()
            )),
            last_7_days=Count('id', filter=Q(
                created_at__gte=now_date - timedelta(days=7)
            ))
        )

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ü—Ä–æ–±–ª–µ–º–Ω—ñ –ª—ñ–¥–∏ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        long_in_work_ids = list(Lead.objects.filter(
            status="in_work",
            created_at__lte=now_date - timedelta(days=1)
        ).values_list("id", flat=True))

        # –õ—ñ–¥–∏ –±–µ–∑ –æ–ø–ª–∞—Ç
        paid_lead_ids = set(LeadPaymentOperation.objects.filter(
            operation_type='received'
        ).values_list('lead_id', flat=True))

        without_cash_ids = list(leads.filter(
            status="completed"
        ).exclude(id__in=paid_lead_ids).values_list("id", flat=True))

        result = {
            "managers": managers_report,
            "debts": clients_report,
            "top_debtors": top_debts,
            "funnel": funnel_data,
            "stats": daily_stats,
            "delayed_leads": long_in_work_ids,
            "completed_without_cash": without_cash_ids,
        }

        # –ö–µ—à—É—î–º–æ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
        cache.set(cache_key, result, 600)
        return Response(result)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def geocode_address(request):
    address = request.query_params.get("address")
    if not address:
        return Response({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä ?address="}, status=400)

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
    cache_key = f"geocode_{hash(address)}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return Response(cached_result)

    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        "address": address,
        "key": settings.GOOGLE_MAPS_API_KEY
    }

    response = requests.get(url, params=params).json()
    if response["status"] != "OK":
        return Response({"error": "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ Google"}, status=400)

    result_data = response["results"][0]
    location = result_data["geometry"]["location"]
    components = {c['types'][0]: c['long_name'] for c in result_data['address_components']}

    result = {
        "address": result_data["formatted_address"],
        "lat": location["lat"],
        "lng": location["lng"],
        "country": components.get("country"),
        "city": components.get("locality") or components.get("administrative_area_level_1"),
        "postal_code": components.get("postal_code"),
        "street": components.get("route"),
    }

    # –ö–µ—à—É—î–º–æ –∞–¥—Ä–µ—Å–∏ –Ω–∞ 1 –¥–µ–Ω—å
    cache.set(cache_key, result, 86400)
    return Response(result)


@staff_member_required
def map_search_view(request):
    return render(request, "admin/map_search.html", {
        "GOOGLE_MAPS_API_KEY": settings.GOOGLE_MAPS_API_KEY
    })


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def funnel_data(request):
    date_from_raw = request.GET.get("from")
    date_to_raw = request.GET.get("to")
    manager_id = request.GET.get("manager_id")

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è –≤–æ—Ä–æ–Ω–∫–∏
    cache_key = f"funnel_{date_from_raw}_{date_to_raw}_{manager_id}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return Response(cached_result)

    date_from = parse_date(date_from_raw) if date_from_raw else None
    date_to = parse_date(date_to_raw) if date_to_raw else None

    leads = Lead.objects.all()

    if date_from:
        leads = leads.filter(created_at__date__gte=date_from)
    if date_to:
        leads = leads.filter(created_at__date__lte=date_to)
    if manager_id:
        leads = leads.filter(assigned_to_id=manager_id)

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º —Ä–∞—Ö—É—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ç—É—Å–∏
    funnel = leads.aggregate(
        new=Count('id', filter=Q(status='new')),
        queued=Count('id', filter=Q(status='queued')),
        in_work=Count('id', filter=Q(status='in_work')),
        awaiting_packaging=Count('id', filter=Q(status='awaiting_packaging')),
        on_the_way=Count('id', filter=Q(status='on_the_way')),
        awaiting_cash=Count('id', filter=Q(status='awaiting_cash')),
        completed=Count('id', filter=Q(status='completed')),
        declined=Count('id', filter=Q(status='declined'))
    )

    total_attempted = sum(funnel.values())
    conversion = round((funnel["completed"] / total_attempted) * 100, 1) if total_attempted > 0 else 0.0

    result = {
        "funnel": funnel,
        "conversion_rate": f"{conversion}%"
    }

    # –ö–µ—à—É—î–º–æ –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
    cache.set(cache_key, result, 300)
    return Response(result)


class LeadViewSet(viewsets.ModelViewSet):
    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ –æ–¥—Ä–∞–∑—É
    queryset = Lead.objects.select_related('assigned_to').prefetch_related('payment_operations').order_by('-created_at')
    serializer_class = LeadSerializer
    permission_classes = [IsAuthenticated]

    @action(detail=True, methods=['get'])
    def payments(self, request, pk=None):
        lead = self.get_object()
        # –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ prefetch_related, –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
        ops = lead.payment_operations.all()
        return Response([
            {
                "id": op.id,
                "type": op.operation_type,
                "amount": float(op.amount),
                "comment": op.comment,
                "created_at": op.created_at,
            } for op in ops
        ])

    @action(detail=True, methods=['post'])
    def add_payment(self, request, pk=None):
        lead = self.get_object()
        amount = request.data.get("amount")
        op_type = request.data.get("operation_type")
        comment = request.data.get("comment", "")

        if not amount or not op_type:
            return Response({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ amount —ñ operation_type"}, status=400)

        op = LeadPaymentOperation.objects.create(
            lead=lead,
            operation_type=op_type,
            amount=amount,
            comment=comment
        )

        return Response({
            "message": "–ü–ª–∞—Ç—ñ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
            "id": op.id
        })

    @action(detail=True, methods=['patch'])
    def update_status(self, request, pk=None):
        """–ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ª—ñ–¥–∞"""
        lead = self.get_object()
        new_status = request.data.get('status')
        old_status = lead.status

        # üí∞ –î–ª—è —Å—Ç–∞—Ç—É—Å—É "paid" –æ—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É –æ–ø–ª–∞—Ç–∏
        received_amount = request.data.get('received_amount')

        if not new_status:
            return Response({
                'error': '–ü–∞—Ä–∞–º–µ—Ç—Ä "status" —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
            }, status=status.HTTP_400_BAD_REQUEST)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—Ç–∞—Ç—É—Å –≤–∞–ª—ñ–¥–Ω–∏–π
        valid_statuses = [choice[0] for choice in Lead.STATUS_CHOICES]
        if new_status not in valid_statuses:
            return Response({
                'error': f'–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ñ: {", ".join(valid_statuses)}'
            }, status=status.HTTP_400_BAD_REQUEST)

        # üîí –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ü–û–°–õ–Ü–î–û–í–ù–û–°–¢–Ü –°–¢–ê–¢–£–°–Ü–í
        def validate_status_transition(from_status, to_status):
            """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –º—ñ–∂ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
            allowed_transitions = {
                'new': ['queued', 'in_work', 'declined'],
                'queued': ['in_work', 'declined'],
                'in_work': ['awaiting_packaging', 'declined'],
                'awaiting_packaging': ['on_the_way', 'declined'],
                'on_the_way': ['awaiting_cash', 'paid', 'completed', 'declined'],
                'awaiting_cash': ['paid', 'completed', 'declined'],
                'paid': ['completed', 'declined'],
                'completed': [],
                'declined': [],
            }

            if to_status in allowed_transitions.get(from_status, []):
                return True, None

            available = allowed_transitions.get(from_status, [])
            if not available:
                return False, f'–°—Ç–∞—Ç—É—Å "{from_status}" —î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–º. –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –Ω–µ–º–æ–∂–ª–∏–≤–∞.'

            return False, f'–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑ "{from_status}" –Ω–∞ "{to_status}". –î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏: {", ".join(available)}'

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ—Ö—ñ–¥
        is_valid, error_message = validate_status_transition(old_status, new_status)
        if not is_valid:
            return Response({
                'error': f'‚ùå {error_message}',
                'code': 'INVALID_STATUS_TRANSITION',
                'current_status': old_status,
                'requested_status': new_status,
                'workflow_info': {
                    'description': '–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–∞—Ç—É—Å—ñ–≤',
                    'flow': [
                        'new ‚Üí queued/in_work',
                        'queued ‚Üí in_work',
                        'in_work ‚Üí awaiting_packaging (–º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–æ–±–∏–≤)',
                        'awaiting_packaging ‚Üí on_the_way (—Å–∫–ª–∞–¥ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤)',
                        'on_the_way ‚Üí awaiting_cash/paid (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)',
                        'awaiting_cash ‚Üí paid (–≥—Ä–æ—à—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ)',
                        '* declined - –º–æ–∂–Ω–∞ –∑ –±—É–¥—å-—è–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É'
                    ]
                }
            }, status=status.HTTP_422_UNPROCESSABLE_ENTITY)

        # üî• –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–õ–Ø –°–¢–ê–¢–£–°–£ "PAID"
        if new_status == "paid":
            if received_amount is None:
                return Response({
                    'error': '‚ùå –î–ª—è —Å—Ç–∞—Ç—É—Å—É "paid" –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å—É–º—É –æ–ø–ª–∞—Ç–∏ –≤ –ø–æ–ª—ñ "received_amount"',
                    'code': 'RECEIVED_AMOUNT_REQUIRED',
                    'example': {
                        'status': 'paid',
                        'received_amount': 1500.00
                    }
                }, status=status.HTTP_400_BAD_REQUEST)

            try:
                received_amount = float(received_amount)
                if received_amount < 0:
                    return Response({
                        'error': '‚ùå –°—É–º–∞ –æ–ø–ª–∞—Ç–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥\'—î–º–Ω–æ—é',
                        'code': 'NEGATIVE_AMOUNT'
                    }, status=status.HTTP_400_BAD_REQUEST)
            except (ValueError, TypeError):
                return Response({
                    'error': '‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—É–º–∏. –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.',
                    'code': 'INVALID_AMOUNT_FORMAT'
                }, status=status.HTTP_400_BAD_REQUEST)

        # üî• –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–õ–Ø –°–¢–ê–¢–£–°–£ "COMPLETED"
        if new_status == "completed":
            if received_amount is not None:
                try:
                    received_amount = float(received_amount)
                    if received_amount < 0:
                        return Response({
                            'error': '‚ùå –°—É–º–∞ –¥–æ–ø–ª–∞—Ç–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥\'—î–º–Ω–æ—é',
                            'code': 'NEGATIVE_AMOUNT'
                        }, status=status.HTTP_400_BAD_REQUEST)
                except (ValueError, TypeError):
                    return Response({
                        'error': '‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—É–º–∏ –¥–æ–ø–ª–∞—Ç–∏. –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.',
                        'code': 'INVALID_AMOUNT_FORMAT'
                    }, status=status.HTTP_400_BAD_REQUEST)

        # üî• –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ë–Ü–ó–ù–ï–°-–õ–û–ì–Ü–ö–ò
        if new_status == "awaiting_packaging":
            current_price = float(lead.price or 0)
            if current_price <= 0:
                return Response({
                    'error': f'‚ùå –ù–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª—ñ–¥ –Ω–∞ —Å–∫–ª–∞–¥ –±–µ–∑ –≤–∫–∞–∑–∞–Ω–æ—ó —Å—É–º–∏! –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price} –≥—Ä–Ω',
                    'code': 'PRICE_REQUIRED',
                    'current_price': current_price,
                    'required_action': '–°–ø–æ—á–∞—Ç–∫—É –≤–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É –¥–ª—è –ª—ñ–¥–∞ (–º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0)',
                    'lead_info': {
                        'id': lead.id,
                        'name': lead.full_name,
                        'phone': lead.phone
                    }
                }, status=status.HTTP_422_UNPROCESSABLE_ENTITY)

        # –Ø–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ - –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ actual_cash –¥–ª—è —Å—Ç–∞—Ç—É—Å—É paid
            if new_status == "paid":
                lead.actual_cash = received_amount
            elif new_status == "completed" and received_amount is not None:
                # –î–ª—è completed - —Ü–µ –¥–æ–ø–ª–∞—Ç–∞, –¥–æ–¥–∞—î–º–æ –¥–æ actual_cash
                current_actual_cash = float(lead.actual_cash or 0)
                lead.actual_cash = current_actual_cash + received_amount

            lead.status = new_status
            lead.save()

            # üî• –†–£–ß–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø –û–ü–ï–†–ê–¶–Ü–ô
            if new_status == "on_the_way":
                operation, created_op = LeadPaymentOperation.objects.get_or_create(
                    lead=lead,
                    operation_type='expected',
                    defaults={
                        "amount": lead.price,
                        "comment": f"–û—á—ñ–∫—É—î—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –ª—ñ–¥ #{lead.id} - {lead.full_name}"
                    }
                )

            elif new_status == "paid":
                operation = LeadPaymentOperation.objects.create(
                    lead=lead,
                    operation_type='received',
                    amount=received_amount,
                    comment=f"–ì—Ä–æ—à—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ –≤–æ–¥—ñ—è: {received_amount} –≥—Ä–Ω –∑–∞ –ª—ñ–¥ #{lead.id} - {lead.full_name}"
                )

                # –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ª—ñ–¥
                if lead.assigned_to:
                    from backend.services.lead_queue import on_lead_closed
                    on_lead_closed(lead)

            elif new_status == "completed":
                if received_amount and received_amount > 0:
                    operation = LeadPaymentOperation.objects.create(
                        lead=lead,
                        operation_type='received',
                        amount=received_amount,
                        comment=f"–î–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ: {received_amount} –≥—Ä–Ω –∑–∞ –ª—ñ–¥ #{lead.id} - {lead.full_name}"
                    )

                # –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ª—ñ–¥
                if lead.assigned_to:
                    from backend.services.lead_queue import on_lead_closed
                    on_lead_closed(lead)

            # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response_data = {
                'message': f'‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –∑ "{old_status}" –Ω–∞ "{new_status}"',
                'lead_id': lead.id,
                'lead_name': lead.full_name,
                'status_changed': {
                    'from': old_status,
                    'to': new_status
                },
                'timestamp': lead.status_updated_at,
                'operations_created': new_status in ["on_the_way", "paid"]
            }

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏
            def get_next_steps(current_status):
                next_steps = {
                    'new': ['–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É (queued/in_work)'],
                    'queued': ['–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É (in_work)'],
                    'in_work': ['–û–±—Ä–æ–±–∏—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥ (awaiting_packaging)'],
                    'awaiting_packaging': ['–°–∫–ª–∞–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–æ–≤–∞—Ä (on_the_way)'],
                    'on_the_way': ['–¢–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ—á—ñ–∫—É—î–º–æ –æ–ø–ª–∞—Ç—É (awaiting_cash/paid)'],
                    'awaiting_cash': ['–û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–æ—à—ñ –≤—ñ–¥ –≤–æ–¥—ñ—è (paid)'],
                    'paid': ['‚úÖ –õ—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'],
                    'declined': ['‚ùå –õ—ñ–¥ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ'],
                    'completed': ['‚úÖ –õ—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Å—Ç–∞—Ç—É—Å)']
                }
                return next_steps.get(current_status, [])

            response_data['next_steps'] = get_next_steps(new_status)

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø–ª–∞—Ç—É –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤ paid —ñ completed
            if new_status == "paid":
                response_data['payment_info'] = {
                    'received_amount': float(received_amount),
                    'expected_amount': float(lead.price or 0),
                    'difference': float(lead.price or 0) - float(received_amount),
                    'status': 'partial_payment' if float(lead.price or 0) > float(received_amount) else 'full_payment'
                }
            elif new_status == "completed":
                expected_total = float(lead.price or 0)
                received_total = float(lead.actual_cash or 0)
                final_difference = expected_total - received_total

                response_data['payment_info'] = {
                    'additional_payment': float(received_amount) if received_amount else 0,
                    'total_received': received_total,
                    'expected_amount': expected_total,
                    'final_difference': final_difference,
                    'debt_remaining': final_difference > 0
                }

            return Response(response_data)

        except Exception as e:
            return Response({
                'error': f'–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {str(e)}',
                'code': 'SAVE_ERROR'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=True, methods=['patch'])
    def update_price(self, request, pk=None):
        """–®–≤–∏–¥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –ª—ñ–¥–∞"""
        lead = self.get_object()
        new_price = request.data.get('price')

        if new_price is None:
            return Response({
                'error': '–ü–∞—Ä–∞–º–µ—Ç—Ä "price" —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            new_price = float(new_price)
            if new_price < 0:
                return Response({
                    'error': '–¶—ñ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥\'—î–º–Ω–æ—é'
                }, status=status.HTTP_400_BAD_REQUEST)

            old_price = float(lead.price or 0)
            lead.price = new_price
            lead.save()

            return Response({
                'message': f'‚úÖ –¶—ñ–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ –∑ {old_price} –≥—Ä–Ω –Ω–∞ {new_price} –≥—Ä–Ω',
                'lead_id': lead.id,
                'lead_name': lead.full_name,
                'price_changed': {
                    'from': old_price,
                    'to': new_price
                },
                'can_send_to_warehouse': new_price > 0
            })

        except (ValueError, TypeError):
            return Response({
                'error': '–ù–µ–≤–∞–ª—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏. –ú–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.'
            }, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=True, methods=['get'])
    def financial_summary(self, request, pk=None):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç –ø–æ –ª—ñ–¥—É"""
        lead = self.get_object()

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ prefetch_related –¥–∞–Ω—ñ
        operations = lead.payment_operations.all().order_by('-created_at')

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –∑–∞–º—ñ—Å—Ç—å —Ü–∏–∫–ª—É
        totals = operations.aggregate(
            expected_sum=Sum('amount', filter=Q(operation_type='expected')),
            received_sum=Sum('amount', filter=Q(operation_type='received'))
        )

        expected_sum = float(totals['expected_sum'] or 0)
        received_sum = float(totals['received_sum'] or 0)
        balance = expected_sum - received_sum

        return Response({
            'lead_id': lead.id,
            'lead_name': lead.full_name,
            'lead_price': float(lead.price or 0),
            'expected_sum': expected_sum,
            'received_sum': received_sum,
            'balance': balance,
            'status': lead.status,
            'operations': [
                {
                    'id': op.id,
                    'type': op.operation_type,
                    'amount': float(op.amount),
                    'comment': op.comment,
                    'created_at': op.created_at
                }
                for op in operations
            ]
        })

    @action(detail=True, methods=['get'])
    def available_statuses(self, request, pk=None):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –∑–º—ñ–Ω–∏"""
        lead = self.get_object()
        current_status = lead.status

        # –ö–∞—Ä—Ç–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤
        allowed_transitions = {
            'new': ['queued', 'in_work', 'declined'],
            'queued': ['in_work', 'declined'],
            'in_work': ['awaiting_packaging', 'declined'],
            'awaiting_packaging': ['on_the_way', 'declined'],
            'on_the_way': ['awaiting_cash', 'paid', 'completed', 'declined'],
            'awaiting_cash': ['paid', 'completed', 'declined'],
            'paid': ['completed', 'declined'],
            'completed': [],
            'declined': [],
        }

        # –û–ø–∏—Å —Å—Ç–∞—Ç—É—Å—ñ–≤
        status_descriptions = {
            'new': '–ù–æ–≤–∏–π –ª—ñ–¥',
            'queued': '–£ —á–µ—Ä–∑—ñ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'in_work': '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
            'awaiting_packaging': '–û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥—ñ',
            'on_the_way': '–¢–æ–≤–∞—Ä –≤ –¥–æ—Ä–æ–∑—ñ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞',
            'awaiting_cash': '–û—á—ñ–∫—É—î–º–æ –æ–ø–ª–∞—Ç—É –≤—ñ–¥ –≤–æ–¥—ñ—è',
            'paid': '–û–ø–ª–∞—á–µ–Ω–æ (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)',
            'declined': '–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ (–∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π)'
        }

        available = allowed_transitions.get(current_status, [])

        return Response({
            'lead_id': lead.id,
            'lead_name': lead.full_name,
            'current_status': {
                'code': current_status,
                'description': status_descriptions.get(current_status, current_status)
            },
            'available_statuses': [
                {
                    'code': status_code,
                    'description': status_descriptions.get(status_code, status_code),
                    'requires_additional_data': status_code == 'paid'
                }
                for status_code in available
            ],
            'is_final': len(available) == 0,
            'workflow_position': self._get_workflow_position(current_status)
        })

    def _get_workflow_position(self, status):
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –≤ —Ä–æ–±–æ—á–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ"""
        workflow = [
            'new',
            'queued',
            'in_work',
            'awaiting_packaging',
            'on_the_way',
            'awaiting_cash',
            'paid'
        ]

        try:
            position = workflow.index(status) + 1
            return {
                'step': position,
                'total_steps': len(workflow),
                'progress_percent': round((position / len(workflow)) * 100, 1)
            }
        except ValueError:
            if status == 'declined':
                return {'step': 'declined', 'total_steps': len(workflow), 'progress_percent': 0}
            return {'step': 'unknown', 'total_steps': len(workflow), 'progress_percent': 0}


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def all_payments(request):
    lead_id = request.GET.get("lead_id")
    client_id = request.GET.get("client_id")
    op_type = request.GET.get("type")

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª—ñ–¥ –æ–¥—Ä–∞–∑—É
    payments = LeadPaymentOperation.objects.select_related('lead')

    if lead_id:
        payments = payments.filter(lead_id=lead_id)
    if client_id:
        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º —á–µ—Ä–µ–∑ JOIN
        payments = payments.filter(lead__phone__in=
                                   Client.objects.filter(id=client_id).values_list("phone", flat=True)
                                   )
    if op_type:
        payments = payments.filter(operation_type=op_type)

    return Response([
        {
            "id": p.id,
            "lead_id": p.lead_id,
            "type": p.operation_type,
            "amount": float(p.amount),
            "comment": p.comment,
            "created_at": p.created_at,
        } for p in payments.order_by("-created_at")
    ])


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def list_managers(request):
    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ user –¥–∞–Ω—ñ –æ–¥—Ä–∞–∑—É
    managers = CustomUser.objects.select_related('user').filter(interface_type='accountant')
    serializer = ManagerSerializer(managers, many=True)
    return Response(serializer.data)


class ManagerViewSet(viewsets.ModelViewSet):
    queryset = CustomUser.objects.select_related('user').filter(interface_type='accountant')
    serializer_class = ManagerSerializer
    permission_classes = [IsAuthenticated]