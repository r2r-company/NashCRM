from django.contrib.admin.views.decorators import staff_member_required
from django.contrib.auth import authenticate, get_user_model
from django.core.cache import cache
from django.db.models import Count, Sum, DurationField, ExpressionWrapper, F, Q, Avg, Case, When, DecimalField, Prefetch
from django.shortcuts import render
from django.utils.dateparse import parse_date
from django.utils.timezone import now
from rest_framework import viewsets, status
from rest_framework.decorators import api_view, permission_classes, action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.views import TokenObtainPairView
import requests
from django.contrib.auth.models import Permission
from datetime import datetime, timedelta

from NashCRM import settings
from backend.forms import LeadsReportForm
from backend.models import CustomUser, Lead, Client, LeadPaymentOperation, LeadFile
from backend.serializers import LeadSerializer, ClientSerializer, ExternalLeadSerializer, MyTokenObtainPairSerializer, \
    ManagerSerializer
from backend.services.lead_creation_service import create_lead_with_logic
from rest_framework.parsers import MultiPartParser, FormParser


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def ping(request):
    return Response({"msg": f"–ü—Ä–∏–≤—ñ—Ç, {request.user.username}!"})


def home(request):
    return render(request, "base.html")


class MyTokenObtainPairView(TokenObtainPairView):
    serializer_class = MyTokenObtainPairSerializer

    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)
        raw = response.data

        # –í—ñ–¥–¥—ñ–ª—è—î–º–æ —Ç–æ–∫–µ–Ω–∏ —ñ —Ä–µ—à—Ç—É
        tokens = {
            "access": raw.get("access"),
            "refresh": raw.get("refresh"),
        }
        user_info = {
            k: v for k, v in raw.items() if k not in tokens
        }

        response.data = {
            "data": {
                **tokens,
                "user": user_info
            },
            "meta": {}
        }
        return response


class LoginView(APIView):
    def post(self, request):
        username = request.data.get("username")
        password = request.data.get("password")

        user = authenticate(username=username, password=password)
        if user is None:
            return Response({"detail": "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å"}, status=status.HTTP_401_UNAUTHORIZED)

        refresh = RefreshToken.for_user(user)

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å–µ
        try:
            custom_user = CustomUser.objects.select_related('user').get(user=user)
            interface_type = custom_user.interface_type
        except CustomUser.DoesNotExist:
            interface_type = None

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥—Ä—É–ø —ñ –ø—Ä–∞–≤
        groups = list(user.groups.values_list("name", flat=True))
        permissions = list(user.user_permissions.values_list("codename", flat=True))

        return Response({
            "access": str(refresh.access_token),
            "refresh": str(refresh),
            "user": {
                "id": user.id,
                "username": user.username,
                "email": user.email,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "interface_type": interface_type,
                "groups": groups,
                "permissions": permissions,
                "is_staff": user.is_staff,
                "is_superuser": user.is_superuser,
                "last_login": user.last_login,
                "date_joined": user.date_joined,
            }
        })


class ClientViewSet(viewsets.ModelViewSet):
    # üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: Client –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    queryset = Client.objects.select_related('assigned_to').order_by('-created_at')
    serializer_class = ClientSerializer
    permission_classes = [IsAuthenticated]

    @action(detail=True, methods=['get'])
    def leads(self, request, pk=None):
        client = self.get_object()
        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–¥—Ä–∞–∑—É
        leads = Lead.objects.select_related('assigned_to').filter(phone=client.phone)

        return Response([
            {
                "id": lead.id,
                "full_name": lead.full_name,
                "status": lead.status,
                "price": float(lead.price or 0),
                "created_at": lead.created_at,
            } for lead in leads
        ])

    @action(detail=True, methods=['get'])
    def payments(self, request, pk=None):
        client = self.get_object()

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–ª–∞—Ç–µ–∂—ñ
        payments = LeadPaymentOperation.objects.select_related('lead').filter(
            lead__phone=client.phone
        ).order_by('-created_at')

        return Response([
            {
                "id": p.id,
                "lead_id": p.lead_id,
                "type": p.operation_type,
                "amount": float(p.amount),
                "comment": p.comment,
                "created_at": p.created_at,
            } for p in payments
        ])


class ExternalLeadView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        serializer = ExternalLeadSerializer(data=request.data)
        if serializer.is_valid():
            lead, context = create_lead_with_logic(serializer.validated_data)

            return Response({
                "lead_id": lead.id,
                "client_name": lead.full_name,
                "assigned_manager": context['assigned_to'],
                "status": context['final_status'],
                "created_at": lead.created_at,
                "details": context,
                "message": f"–õ—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {lead.full_name} ‚Äî —Å—Ç–∞—Ç—É—Å: {context['final_status'].upper()}"
            }, status=status.HTTP_201_CREATED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def leads_report(request):
    date_from = request.GET.get("date_from")
    date_to = request.GET.get("date_to")

    if not date_from or not date_to:
        return Response({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ?date_from=...&date_to=..."}, status=400)

    try:
        start = datetime.strptime(date_from, "%Y-%m-%d")
        end = datetime.strptime(date_to, "%Y-%m-%d") + timedelta(days=1)
    except ValueError:
        return Response({"error": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD"}, status=400)

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º
    cache_key = f"leads_report_{date_from}_{date_to}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return Response(cached_result)

    leads = Lead.objects.filter(created_at__range=(start, end))

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –∑–∞–º—ñ—Å—Ç—å –æ–∫—Ä–µ–º–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    status_counts = dict(leads.values('status').annotate(count=Count('id')).values_list('status', 'count'))

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –æ—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–∏
    payment_totals = LeadPaymentOperation.objects.filter(
        lead__created_at__range=(start, end)
    ).aggregate(
        expected_sum=Sum('amount', filter=Q(operation_type='expected')),
        received_sum=Sum('amount', filter=Q(operation_type='received'))
    )

    expected_sum = float(payment_totals['expected_sum'] or 0)
    received_sum = float(payment_totals['received_sum'] or 0)
    delta = expected_sum - received_sum

    result = {
        "total": leads.count(),
        "by_status": status_counts,
        "expected_sum": expected_sum,
        "received_sum": received_sum,
        "delta": delta
    }

    # –ö–µ—à—É—î–º–æ –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
    cache.set(cache_key, result, 300)
    return Response(result)


@staff_member_required
def leads_report_page(request):
    form = LeadsReportForm(request.GET or None)
    context = {"form": form}

    if form.is_valid():
        # —Ç—É—Ç –º–æ–∂–µ—à —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É, –≥—Ä–∞—Ñ—ñ–∫–∏, whatever
        pass

    return render(request, "admin/reports/leads_report_form.html", context)


User = get_user_model()


class LeadsReportView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        date_from = parse_date(request.GET.get('date_from'))
        date_to = parse_date(request.GET.get('date_to'))

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
        cache_key = f"detailed_report_{date_from}_{date_to}"
        cached_result = cache.get(cache_key)
        if cached_result:
            return Response(cached_result)

        leads = Lead.objects.select_related('assigned_to')
        if date_from:
            leads = leads.filter(created_at__date__gte=date_from)
        if date_to:
            leads = leads.filter(created_at__date__lte=date_to)

        now_date = now()

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–≤—ñ—Ç –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        managers_stats = leads.values(
            'assigned_to__id',
            'assigned_to__username'
        ).annotate(
            total_leads=Count('id'),
            completed=Count('id', filter=Q(status='completed')),
            in_work=Count('id', filter=Q(status='in_work')),
            queued=Count('id', filter=Q(status='queued')),
            total_price=Sum('price', filter=Q(status='completed')),
            avg_check=Avg('price', filter=Q(status='completed'))
        ).filter(assigned_to__isnull=False)

        managers_report = []
        for stat in managers_stats:
            conversion = round((stat['completed'] / stat['total_leads']) * 100, 1) if stat['total_leads'] else 0
            avg_check = round(float(stat['avg_check'] or 0), 2)

            # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –æ–∫—Ä–µ–º–∏–º –∑–∞–ø–∏—Ç–æ–º —Ç—ñ–ª—å–∫–∏ –¥–ª—è completed
            completed_leads = leads.filter(
                assigned_to__id=stat['assigned_to__id'],
                status='completed',
                status_updated_at__isnull=False
            ).annotate(
                duration=ExpressionWrapper(
                    F("status_updated_at") - F("created_at"),
                    output_field=DurationField()
                )
            ).values_list('duration', flat=True)

            durations = [d.total_seconds() for d in completed_leads if d]
            avg_minutes = int(sum(durations) / len(durations) / 60) if durations else None

            managers_report.append({
                "manager": stat['assigned_to__username'],
                "total_leads": stat['total_leads'],
                "completed": stat['completed'],
                "in_work": stat['in_work'],
                "queued": stat['queued'],
                "total_price": str(float(stat['total_price'] or 0)),
                "avg_duration_minutes": avg_minutes,
                "conversion_rate": f"{conversion}%",
                "avg_check": f"{avg_check}",
            })

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ë–æ—Ä–≥–∏ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        client_debts = Client.objects.annotate(
            total_price=Sum(
                'phone__price',
                filter=Q(phone__status='completed') & Q(phone__in=leads)
            ),
            total_received=Sum(
                'phone__payment_operations__amount',
                filter=Q(
                    phone__payment_operations__operation_type='received'
                ) & Q(phone__in=leads)
            )
        ).annotate(
            debt=F('total_price') - F('total_received')
        ).filter(debt__gt=0).values(
            'full_name', 'phone', 'debt', 'total_received', 'total_price'
        )

        clients_report = [
            {
                "client": debt['full_name'],
                "phone": debt['phone'],
                "total_unpaid": str(float(debt['debt'] or 0)),
                "received": str(float(debt['total_received'] or 0)),
                "expected": str(float(debt['total_price'] or 0))
            }
            for debt in client_debts
        ]

        # –¢–æ–ø-5 –±–æ—Ä–∂–Ω–∏–∫—ñ–≤
        top_debts = sorted(clients_report, key=lambda x: float(x['total_unpaid']), reverse=True)[:5]

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –í–æ—Ä–æ–Ω–∫–∞ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        funnel_data = leads.aggregate(
            new=Count('id', filter=Q(status='new')),
            queued=Count('id', filter=Q(status='queued')),
            in_work=Count('id', filter=Q(status='in_work')),
            awaiting_packaging=Count('id', filter=Q(status='awaiting_packaging')),
            on_the_way=Count('id', filter=Q(status='on_the_way')),
            awaiting_cash=Count('id', filter=Q(status='awaiting_cash')),
            completed=Count('id', filter=Q(status='completed'))
        )

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        daily_stats = Lead.objects.aggregate(
            new_today=Count('id', filter=Q(created_at__date=now_date.date())),
            completed_today=Count('id', filter=Q(
                status='completed',
                status_updated_at__date=now_date.date()
            )),
            last_7_days=Count('id', filter=Q(
                created_at__gte=now_date - timedelta(days=7)
            ))
        )

        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ü—Ä–æ–±–ª–µ–º–Ω—ñ –ª—ñ–¥–∏ –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        long_in_work_ids = list(Lead.objects.filter(
            status="in_work",
            created_at__lte=now_date - timedelta(days=1)
        ).values_list("id", flat=True))

        # –õ—ñ–¥–∏ –±–µ–∑ –æ–ø–ª–∞—Ç
        paid_lead_ids = set(LeadPaymentOperation.objects.filter(
            operation_type='received'
        ).values_list('lead_id', flat=True))

        without_cash_ids = list(leads.filter(
            status="completed"
        ).exclude(id__in=paid_lead_ids).values_list("id", flat=True))

        result = {
            "managers": managers_report,
            "debts": clients_report,
            "top_debtors": top_debts,
            "funnel": funnel_data,
            "stats": daily_stats,
            "delayed_leads": long_in_work_ids,
            "completed_without_cash": without_cash_ids,
        }

        # –ö–µ—à—É—î–º–æ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
        cache.set(cache_key, result, 600)
        return Response(result)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def geocode_address(request):
    address = request.query_params.get("address")
    if not address:
        return Response({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä ?address="}, status=400)

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
    cache_key = f"geocode_{hash(address)}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return Response(cached_result)

    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        "address": address,
        "key": settings.GOOGLE_MAPS_API_KEY
    }

    response = requests.get(url, params=params).json()
    if response["status"] != "OK":
        return Response({"error": "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ Google"}, status=400)

    result_data = response["results"][0]
    location = result_data["geometry"]["location"]
    components = {c['types'][0]: c['long_name'] for c in result_data['address_components']}

    result = {
        "address": result_data["formatted_address"],
        "lat": location["lat"],
        "lng": location["lng"],
        "country": components.get("country"),
        "city": components.get("locality") or components.get("administrative_area_level_1"),
        "postal_code": components.get("postal_code"),
        "street": components.get("route"),
    }

    # –ö–µ—à—É—î–º–æ –∞–¥—Ä–µ—Å–∏ –Ω–∞ 1 –¥–µ–Ω—å
    cache.set(cache_key, result, 86400)
    return Response(result)


@staff_member_required
def map_search_view(request):
    return render(request, "admin/map_search.html", {
        "GOOGLE_MAPS_API_KEY": settings.GOOGLE_MAPS_API_KEY
    })


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def funnel_data(request):
    date_from_raw = request.GET.get("from")
    date_to_raw = request.GET.get("to")
    manager_id = request.GET.get("manager_id")

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è –≤–æ—Ä–æ–Ω–∫–∏
    cache_key = f"funnel_{date_from_raw}_{date_to_raw}_{manager_id}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return Response(cached_result)

    date_from = parse_date(date_from_raw) if date_from_raw else None
    date_to = parse_date(date_to_raw) if date_to_raw else None

    leads = Lead.objects.all()

    if date_from:
        leads = leads.filter(created_at__date__gte=date_from)
    if date_to:
        leads = leads.filter(created_at__date__lte=date_to)
    if manager_id:
        leads = leads.filter(assigned_to_id=manager_id)

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º —Ä–∞—Ö—É—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ç—É—Å–∏
    funnel = leads.aggregate(
        new=Count('id', filter=Q(status='new')),
        queued=Count('id', filter=Q(status='queued')),
        in_work=Count('id', filter=Q(status='in_work')),
        awaiting_packaging=Count('id', filter=Q(status='awaiting_packaging')),
        on_the_way=Count('id', filter=Q(status='on_the_way')),
        awaiting_cash=Count('id', filter=Q(status='awaiting_cash')),
        completed=Count('id', filter=Q(status='completed')),
        declined=Count('id', filter=Q(status='declined'))
    )

    total_attempted = sum(funnel.values())
    conversion = round((funnel["completed"] / total_attempted) * 100, 1) if total_attempted > 0 else 0.0

    result = {
        "funnel": funnel,
        "conversion_rate": f"{conversion}%"
    }

    # –ö–µ—à—É—î–º–æ –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
    cache.set(cache_key, result, 300)
    return Response(result)


class LeadViewSet(viewsets.ModelViewSet):
    # üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: Leads –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º + –ø–ª–∞—Ç–µ–∂—ñ
    queryset = Lead.objects.select_related('assigned_to').prefetch_related(
        Prefetch('payment_operations', queryset=LeadPaymentOperation.objects.order_by('-created_at'))
    ).order_by('-created_at')
    serializer_class = LeadSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        """üöÄ –î–û–î–ê–¢–ö–û–í–ê –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ª—ñ–¥—ñ–≤"""
        cache_key = f"leads_list_{self.request.user.id}"
        cached_queryset = cache.get(cache_key)

        if cached_queryset is None:
            queryset = super().get_queryset()
            # –ö–µ—à—É—î–º–æ —Ç—ñ–ª—å–∫–∏ ID –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ —Å–µ—Ä–∏–∞–ª—ñ–∑–∞—Ü—ñ—î—é
            cached_ids = list(queryset.values_list('id', flat=True)[:100])  # –ü–µ—Ä—à—ñ 100
            cache.set(cache_key, cached_ids, 60)  # –ö–µ—à –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É
            return queryset

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π queryset –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–∫–µ—à–æ–≤–∞–Ω–∏—Ö ID
        return self.queryset.filter(id__in=cached_queryset)

    @action(detail=True, methods=['post'])
    def upload_file(self, request, pk=None):
        lead = self.get_object()
        files = request.FILES.getlist('file')
        if not files:
            return Response({"error": "–§–∞–π–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ"}, status=400)

        result = []
        for f in files:
            obj = LeadFile.objects.create(lead=lead, file=f)
            result.append({
                "file_id": obj.id,
                "file_name": obj.file.name,
            })

        return Response({
            "message": f"‚úÖ –î–æ–¥–∞–Ω–æ {len(result)} —Ñ–∞–π–ª(–∏)",
            "files": result
        })

    @action(detail=True, methods=['get'])
    def files(self, request, pk=None):
        lead = self.get_object()
        files = lead.uploaded_files.all()

        result = [{
            "id": f.id,
            "name": f.file.name,
            "url": request.build_absolute_uri(f.file.url),
            "uploaded_at": f.uploaded_at,
        } for f in files]

        return Response({
            "lead_id": lead.id,
            "files": result
        })

    @action(detail=True, methods=['get'])
    def payments(self, request, pk=None):
        """üöÄ –ù–û–í–ê –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ü–ª–∞—Ç–µ–∂—ñ –ø–æ –ª—ñ–¥—É –∑ –∫–µ—à–µ–º"""
        lead = self.get_object()

        cache_key = f"lead_payments_{lead.id}"
        cached_payments = cache.get(cache_key)

        if cached_payments is None:
            payments = lead.payment_operations.all()
            cached_payments = [
                {
                    "id": p.id,
                    "type": p.operation_type,
                    "amount": float(p.amount),
                    "comment": p.comment,
                    "created_at": p.created_at,
                } for p in payments
            ]
            cache.set(cache_key, cached_payments, 300)  # 5 —Ö–≤–∏–ª–∏–Ω

        return Response(cached_payments)

    @action(detail=True, methods=['post'])
    def add_payment(self, request, pk=None):
        """üöÄ –î–û–î–ê–í–ê–ù–ù–Ø –ü–õ–ê–¢–ï–ñ–£ –ó –û–ß–ò–©–ï–ù–ù–Ø–ú –ö–ï–®–£"""
        lead = self.get_object()

        operation_type = request.data.get('operation_type')
        amount = request.data.get('amount')
        comment = request.data.get('comment', '')

        if not operation_type or not amount:
            return Response({"error": "operation_type —ñ amount –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ"}, status=400)

        payment = LeadPaymentOperation.objects.create(
            lead=lead,
            operation_type=operation_type,
            amount=amount,
            comment=comment
        )

        # üöÄ –û–ß–ò–©–£–Ñ–ú–û –ö–ï–® –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        cache.delete(f"lead_payments_{lead.id}")
        cache.delete(f"leads_list_{request.user.id}")

        return Response({
            "message": "‚úÖ –ü–ª–∞—Ç—ñ–∂ –¥–æ–¥–∞–Ω–æ",
            "payment": {
                "id": payment.id,
                "type": payment.operation_type,
                "amount": float(payment.amount),
                "comment": payment.comment,
                "created_at": payment.created_at,
            }
        }, status=201)

    @action(detail=True, methods=['patch'])
    def update_status(self, request, pk=None):
        lead = self.get_object()
        new_status = request.data.get('status')
        old_status = lead.status

        if not new_status:
            return Response({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å"}, status=400)

        allowed_transitions = {
            'queued': ['in_work', 'declined'],
            'in_work': ['awaiting_prepayment', 'declined'],
            'awaiting_prepayment': ['preparation', 'declined'],
            'preparation': ['warehouse_processing', 'declined'],
            'warehouse_processing': ['on_the_way', 'declined'],
            'on_the_way': ['completed', 'declined'],
            'completed': [],
            'declined': [],
        }

        if new_status not in allowed_transitions.get(old_status, []):
            return Response({
                "error": f"–ù–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å—É '{old_status}' —É '{new_status}'"
            }, status=422)

        if new_status == 'preparation':
            if not lead.price or lead.price <= 0:
                return Response({"error": "–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–¥ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–æ—é!"}, status=400)

        try:
            lead.status = new_status
            lead.save()

            # üöÄ –û–ß–ò–©–£–Ñ–ú–û –ö–ï–® –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
            cache.delete(f"leads_list_{request.user.id}")
            cache.delete(f"lead_payments_{lead.id}")
            cache.delete("funnel_None_None_None")
            cache.delete_pattern("funnel_*")
            cache.delete_pattern("leads_report_*")
            cache.delete_pattern("detailed_report_*")

            if new_status == "on_the_way":
                LeadPaymentOperation.objects.get_or_create(
                    lead=lead,
                    operation_type='expected',
                    defaults={
                        "amount": lead.price,
                        "comment": f"–û—á—ñ–∫—É—î—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –ª—ñ–¥ #{lead.id}"
                    }
                )

            elif new_status == "completed":
                LeadPaymentOperation.objects.create(
                    lead=lead,
                    operation_type='received',
                    amount=lead.actual_cash or lead.price,
                    comment=f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –ª—ñ–¥–∞ #{lead.id}"
                )
                if lead.assigned_to:
                    from backend.services.lead_queue import on_lead_closed
                    on_lead_closed(lead)

            elif new_status == "declined":
                if lead.assigned_to:
                    from backend.services.lead_queue import on_lead_closed
                    on_lead_closed(lead)

            return Response({
                "message": f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_status}",
                "lead_id": lead.id,
                "new_status": new_status
            })
        except Exception as e:
            return Response({"error": str(e)}, status=500)

    @action(detail=True, methods=['get'])
    def available_statuses(self, request, pk=None):
        lead = self.get_object()
        current_status = lead.status

        allowed_transitions = {
            'queued': ['in_work', 'declined'],
            'in_work': ['awaiting_prepayment', 'declined'],
            'awaiting_prepayment': ['preparation', 'declined'],
            'preparation': ['warehouse_processing', 'declined'],
            'warehouse_processing': ['on_the_way', 'declined'],
            'on_the_way': ['completed', 'declined'],
            'completed': [],
            'declined': [],
        }

        status_descriptions = {
            'queued': '–£ —á–µ—Ä–∑—ñ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
            'in_work': '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
            'awaiting_prepayment': '–û—á—ñ–∫—É—î—Ç—å—Å—è –∞–≤–∞–Ω—Å',
            'preparation': '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
            'warehouse_processing': '–û–±—Ä–æ–±–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥—ñ',
            'on_the_way': '–í –¥–æ—Ä–æ–∑—ñ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            'declined': '–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ'
        }

        available = allowed_transitions.get(current_status, [])

        return Response({
            'lead_id': lead.id,
            'lead_name': lead.full_name,
            'current_status': {
                'code': current_status,
                'description': status_descriptions.get(current_status, current_status)
            },
            'available_statuses': [
                {
                    'code': status_code,
                    'description': status_descriptions.get(status_code, status_code),
                    'requires_additional_data': False
                }
                for status_code in available
            ],
            'is_final': len(available) == 0,
            'workflow_position': self._get_workflow_position(current_status)
        })

    def _get_workflow_position(self, status):
        workflow = [
            'queued',
            'in_work',
            'awaiting_prepayment',
            'preparation',
            'warehouse_processing',
            'on_the_way',
            'completed'
        ]

        try:
            position = workflow.index(status) + 1
            return {
                'step': position,
                'total_steps': len(workflow),
                'progress_percent': round((position / len(workflow)) * 100, 1)
            }
        except ValueError:
            return {'step': 'unknown', 'total_steps': len(workflow), 'progress_percent': 0}


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def all_payments(request):
    lead_id = request.GET.get("lead_id")
    client_id = request.GET.get("client_id")
    op_type = request.GET.get("type")

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤
    cache_key = f"payments_{lead_id}_{client_id}_{op_type}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return Response(cached_result)

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª—ñ–¥ –æ–¥—Ä–∞–∑—É
    payments = LeadPaymentOperation.objects.select_related('lead')

    if lead_id:
        payments = payments.filter(lead_id=lead_id)
    if client_id:
        # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º —á–µ—Ä–µ–∑ JOIN
        payments = payments.filter(lead__phone__in=
                                   Client.objects.filter(id=client_id).values_list("phone", flat=True)
                                   )
    if op_type:
        payments = payments.filter(operation_type=op_type)

    result = [
        {
            "id": p.id,
            "lead_id": p.lead_id,
            "type": p.operation_type,
            "amount": float(p.amount),
            "comment": p.comment,
            "created_at": p.created_at,
        } for p in payments.order_by("-created_at")
    ]

    # –ö–µ—à—É—î–º–æ –Ω–∞ 2 —Ö–≤–∏–ª–∏–Ω–∏
    cache.set(cache_key, result, 120)
    return Response(result)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def list_managers(request):
    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
    cache_key = "managers_list"
    cached_result = cache.get(cache_key)
    if cached_result:
        return Response(cached_result)

    # üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ user –¥–∞–Ω—ñ –æ–¥—Ä–∞–∑—É
    managers = CustomUser.objects.select_related('user').filter(interface_type='accountant')
    serializer = ManagerSerializer(managers, many=True)

    # –ö–µ—à—É—î–º–æ –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω (–º–µ–Ω–µ–¥–∂–µ—Ä–∏ —Ä—ñ–¥–∫–æ –∑–º—ñ–Ω—é—é—Ç—å—Å—è)
    cache.set(cache_key, serializer.data, 600)
    return Response(serializer.data)


class ManagerViewSet(viewsets.ModelViewSet):
    # üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑ user –¥–∞–Ω–∏–º–∏
    queryset = CustomUser.objects.select_related('user').filter(interface_type='accountant')
    serializer_class = ManagerSerializer
    permission_classes = [IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser]

    def get_serializer_context(self):
        """–î–æ–¥–∞—î–º–æ request –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è avatar_url"""
        context = super().get_serializer_context()
        context.update({"request": self.request})
        return context

    def create(self, request, *args, **kwargs):
        """üöÄ –û–ß–ò–©–ï–ù–ù–Ø –ö–ï–®–£ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        response = super().create(request, *args, **kwargs)
        cache.delete("managers_list")
        return response

    def update(self, request, *args, **kwargs):
        """üöÄ –û–ß–ò–©–ï–ù–ù–Ø –ö–ï–®–£ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        response = super().update(request, *args, **kwargs)
        cache.delete("managers_list")
        return response

    def destroy(self, request, *args, **kwargs):
        """üöÄ –û–ß–ò–©–ï–ù–ù–Ø –ö–ï–®–£ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        response = super().destroy(request, *args, **kwargs)
        cache.delete("managers_list")
        return response


class CreateLeadView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        serializer = LeadSerializer(data=request.data)
        if serializer.is_valid():
            lead = serializer.save()

            # üöÄ –û–ß–ò–©–£–Ñ–ú–û –ö–ï–® –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–¥–∞
            cache.delete(f"leads_list_{request.user.id}")

            return Response({
                "lead_id": lead.id,
                "status": lead.status,
                "full_name": lead.full_name,
                "created_at": lead.created_at
            }, status=201)
        return Response(serializer.errors, status=400)