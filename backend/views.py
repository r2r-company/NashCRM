from decimal import Decimal

from django.contrib.admin.views.decorators import staff_member_required
from django.contrib.auth import authenticate, get_user_model
from django.core.cache import cache
from django.db.models import Count, Sum, DurationField, ExpressionWrapper, F, Q, Avg, Case, When, DecimalField, Prefetch
from django.shortcuts import render
from django.utils import timezone  # ‚Üê –¶–ï–ô –†–Ø–î–û–ö –í–Ü–†–û–ì–Ü–î–ù–û –Ñ
from django.utils.dateparse import parse_date
from django.utils.timezone import now
from rest_framework import viewsets, status
from rest_framework.decorators import api_view, permission_classes, action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.views import TokenObtainPairView
import requests
from django.contrib.auth.models import Permission

# üöÄ –î–û–î–ê–ô–¢–ï –¶–Ü –Ü–ú–ü–û–†–¢–ò:
from datetime import datetime, timedelta

from NashCRM import settings
from backend.forms import LeadsReportForm
from backend.models import CustomUser, Lead, Client, LeadPaymentOperation, LeadFile, ClientInteraction, ClientTask
from backend.serializers import LeadSerializer, ClientSerializer, ExternalLeadSerializer, MyTokenObtainPairSerializer, \
    ManagerSerializer, ClientTaskSerializer, ClientInteractionSerializer
from backend.services.lead_creation_service import create_lead_with_logic
from rest_framework.parsers import MultiPartParser, FormParser, JSONParser

# üöÄ –£–¢–ò–õ–Ü–¢–ê –î–õ–Ø –†–û–ó–£–ú–ù–û–ì–û –û–ß–ò–©–ï–ù–ù–Ø –ö–ï–®–£
from backend.validators.lead_status_validator import LeadStatusValidator, validate_lead_status_change


def smart_cache_invalidation(lead_id=None, client_phone=None, manager_id=None):
    """
    –†–æ–∑—É–º–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É - —Ç—ñ–ª—å–∫–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ
    –Ø–∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    """
    keys_to_delete = []

    # –ó–∞–≤–∂–¥–∏ –æ—á–∏—â—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª—ñ–¥—ñ–≤
    keys_to_delete.extend([
        "funnel_None_None_None",
        "managers_list",
    ])

    # –û—á–∏—â—É—î–º–æ –∫–µ—à –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if manager_id:
        keys_to_delete.append(f"funnel_None_None_{manager_id}")

    # –û—á–∏—â—É—î–º–æ –∫–µ—à –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª—ñ–¥—É
    if lead_id:
        keys_to_delete.append(f"lead_payments_{lead_id}")

    # –û—á–∏—â—É—î–º–æ –∫–µ—à –∑–≤—ñ—Ç—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–∞–±–ª–æ–Ω)
    cache.delete_many(keys_to_delete)

    # –û—á–∏—â—É—î–º–æ –∫–µ—à –ø–æ —à–∞–±–ª–æ–Ω–∞—Ö (–¥–ª—è –∑–≤—ñ—Ç—ñ–≤ –∑ –¥–∞—Ç–∞–º–∏)
    try:
        cache.delete_pattern("funnel_*")
        cache.delete_pattern("leads_report_*")
        cache.delete_pattern("detailed_report_*")
        cache.delete_pattern("payments_*")
    except AttributeError:
        # –Ø–∫—â–æ backend –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î delete_pattern
        pass


# üöÄ –£–¢–ò–õ–Ü–¢–ê –î–õ–Ø –°–¢–ê–ù–î–ê–†–¢–ò–ó–ê–¶–Ü–á –í–Ü–î–ü–û–í–Ü–î–ï–ô
def api_response(data=None, meta=None, message=None, errors=None, status_code=200):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è API –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π

    Args:
        data: –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        meta: –ú–µ—Ç–∞–¥–∞–Ω—ñ (–ø–∞–≥—ñ–Ω–∞—Ü—ñ—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—â–æ)
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        errors: –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        status_code: HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
    """
    response_data = {
        "data": data or {},
        "meta": meta or {}
    }

    # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ meta —è–∫—â–æ —î
    if message:
        response_data["meta"]["message"] = message

    # –î–æ–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤ meta —è–∫—â–æ —î
    if errors:
        response_data["meta"]["errors"] = errors

    return Response(response_data, status=status_code)


# üöÄ –û–ù–û–í–õ–ï–ù–ò–ô PING ENDPOINT
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def ping(request):
    """üèì –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è"""

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω —Ä—ñ–∑–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
    system_status = {
        "api_status": "online",
        "user": {
            "id": request.user.id,
            "username": request.user.username,
            "is_authenticated": True,
            "permissions": list(request.user.user_permissions.values_list("codename", flat=True))[:5]
        },
        "database_status": "connected",
        "cache_status": "unknown"
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        Lead.objects.count()
        system_status["database_status"] = "connected"
    except Exception as e:
        system_status["database_status"] = f"error: {str(e)}"

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    try:
        cache_test_key = "ping_test"
        cache.set(cache_test_key, "test_value", 5)
        if cache.get(cache_test_key) == "test_value":
            system_status["cache_status"] = "working"
            cache.delete(cache_test_key)
        else:
            system_status["cache_status"] = "not_working"
    except Exception as e:
        system_status["cache_status"] = f"error: {str(e)}"

    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
    try:
        custom_user = CustomUser.objects.select_related('user').get(user=request.user)
        system_status["user"]["interface_type"] = custom_user.interface_type
    except CustomUser.DoesNotExist:
        system_status["user"]["interface_type"] = "default"

    return api_response(
        data=system_status,
        meta={
            "ping_time": timezone.now(),
            "server_time": timezone.now(),
            "response_time_ms": 1,  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            "system_uptime": "unknown",  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π uptime
            "version": "1.0.0"
        },
        message=f"üèì Pong! –ü—Ä–∏–≤—ñ—Ç, {request.user.username}! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    )


def home(request):
    """üè† –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ CRM —Å–∏—Å—Ç–µ–º–∏"""

    # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    context_data = {
        "system_info": {
            "name": "Nash CRM & ERP System",
            "version": "1.0.0",
            "environment": getattr(settings, 'ENVIRONMENT', 'production')
        },
        "user_info": None,
        "quick_stats": {}
    }

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π - –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ
    if request.user.is_authenticated:
        try:
            custom_user = CustomUser.objects.select_related('user').get(user=request.user)
            interface_type = custom_user.interface_type
        except CustomUser.DoesNotExist:
            interface_type = 'default'

        context_data["user_info"] = {
            "username": request.user.username,
            "full_name": f"{request.user.first_name} {request.user.last_name}".strip(),
            "email": request.user.email,
            "interface_type": interface_type,
            "is_staff": request.user.is_staff,
            "last_login": request.user.last_login
        }

        # –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        if request.user.is_staff:
            try:
                today = timezone.now().date()
                context_data["quick_stats"] = {
                    "leads_today": Lead.objects.filter(created_at__date=today).count(),
                    "total_clients": Client.objects.count(),
                    "pending_tasks": ClientTask.objects.filter(
                        status__in=['pending', 'in_progress'],
                        assigned_to=request.user
                    ).count() if hasattr(ClientTask, 'assigned_to') else 0
                }
            except:
                context_data["quick_stats"] = {}

    context_data["meta"] = {
        "page_loaded_at": timezone.now(),
        "user_agent": request.META.get('HTTP_USER_AGENT', ''),
        "ip_address": request.META.get('REMOTE_ADDR', ''),
        "session_key": request.session.session_key
    }

    return render(request, "base.html", {
        "page_data": context_data
    })


class MyTokenObtainPairView(TokenObtainPairView):
    """üîê –û—Ç—Ä–∏–º–∞–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
    serializer_class = MyTokenObtainPairSerializer

    def post(self, request, *args, **kwargs):
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –º–µ—Ç–æ–¥
        response = super().post(request, *args, **kwargs)

        # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        if response.status_code != 200:
            return api_response(
                errors={
                    "authentication_error": "–ù–µ–≤—ñ—Ä–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ",
                    "details": response.data
                },
                meta={
                    "login_attempt_time": timezone.now(),
                    "ip_address": request.META.get('REMOTE_ADDR'),
                    "user_agent": request.META.get('HTTP_USER_AGENT', '')[:100]
                },
                status_code=response.status_code
            )

        raw_data = response.data

        # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–æ–∫–µ–Ω–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        tokens = {
            "access": raw_data.get("access"),
            "refresh": raw_data.get("refresh"),
        }

        user_info = {
            k: v for k, v in raw_data.items()
            if k not in ["access", "refresh"]
        }

        # üöÄ –°–¢–ê–ù–î–ê–†–¢–ò–ó–û–í–ê–ù–ò–ô –§–û–†–ú–ê–¢
        response.data = api_response(
            data={
                "tokens": tokens,
                "user": user_info
            },
            meta={
                "login_time": timezone.now(),
                "token_type": "JWT",
                "access_token_expires_in": 3600,  # 1 –≥–æ–¥–∏–Ω–∞
                "refresh_token_expires_in": 86400,  # 24 –≥–æ–¥–∏–Ω–∏
                "authentication_method": "jwt_pair",
                "ip_address": request.META.get('REMOTE_ADDR'),
                "session_info": {
                    "session_key": request.session.session_key,
                    "is_new_session": request.session.is_empty()
                }
            },
            message=f"‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_info.get('username')}"
        ).data

        return response

class LoginView(APIView):
    """üîê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é"""

    def post(self, request):
        username = request.data.get("username")
        password = request.data.get("password")

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if not username or not password:
            return api_response(
                errors={
                    "validation_error": "–õ–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ",
                    "missing_fields": {
                        "username": not username,
                        "password": not password
                    }
                },
                meta={
                    "login_attempt_time": timezone.now(),
                    "ip_address": request.META.get('REMOTE_ADDR')
                },
                status_code=400
            )

        # –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        user = authenticate(username=username, password=password)
        if user is None:
            return api_response(
                errors={
                    "authentication_failed": "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å",
                    "attempted_username": username,
                    "security_note": "–°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞"
                },
                meta={
                    "login_attempt_time": timezone.now(),
                    "ip_address": request.META.get('REMOTE_ADDR'),
                    "user_agent": request.META.get('HTTP_USER_AGENT', '')[:100],
                    "failed_login": True
                },
                status_code=401
            )

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω–∏
        refresh = RefreshToken.for_user(user)

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            custom_user = CustomUser.objects.select_related('user').get(user=user)
            interface_type = custom_user.interface_type
            avatar_url = custom_user.avatar.url if custom_user.avatar else None
        except CustomUser.DoesNotExist:
            interface_type = "default"
            avatar_url = None

        # –ì—Ä—É–ø–∏ —Ç–∞ –¥–æ–∑–≤–æ–ª–∏
        groups = list(user.groups.values_list("name", flat=True))
        permissions = list(user.user_permissions.values_list("codename", flat=True))

        # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_data = {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "full_name": f"{user.first_name} {user.last_name}".strip(),
            "interface_type": interface_type,
            "avatar_url": avatar_url,
            "groups": groups,
            "permissions": permissions,
            "is_staff": user.is_staff,
            "is_superuser": user.is_superuser,
            "is_active": user.is_active,
            "last_login": user.last_login,
            "date_joined": user.date_joined,
        }

        # –¢–æ–∫–µ–Ω–∏
        tokens_data = {
            "access": str(refresh.access_token),
            "refresh": str(refresh),
            "token_type": "Bearer"
        }

        return api_response(
            data={
                "tokens": tokens_data,
                "user": user_data
            },
            meta={
                "login_time": timezone.now(),
                "session_expires_in": 86400,  # 24 –≥–æ–¥–∏–Ω–∏
                "authentication_method": "username_password",
                "ip_address": request.META.get('REMOTE_ADDR'),
                "user_agent": request.META.get('HTTP_USER_AGENT', '')[:100],
                "session_info": {
                    "session_key": request.session.session_key,
                    "is_new_session": request.session.is_empty()
                },
                "security_info": {
                    "last_login": user.last_login,
                    "login_count": getattr(user, 'login_count', 0) + 1,
                    "account_status": "active" if user.is_active else "inactive"
                }
            },
            message=f"‚úÖ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.first_name or user.username}!"
        )


class ClientViewSet(viewsets.ModelViewSet):
    queryset = Client.objects.select_related('assigned_to').order_by('-created_at')
    serializer_class = ClientSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        queryset = super().get_queryset()

        # –§—ñ–ª—å—Ç—Ä–∏
        temperature = self.request.query_params.get('temperature')
        akb_segment = self.request.query_params.get('akb_segment')
        assigned_to = self.request.query_params.get('assigned_to')

        if temperature:
            queryset = queryset.filter(temperature=temperature)
        if akb_segment:
            queryset = queryset.filter(akb_segment=akb_segment)
        if assigned_to:
            queryset = queryset.filter(assigned_to=assigned_to)

        return queryset

    def list(self, request, *args, **kwargs):
        """üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
        queryset = self.filter_queryset(self.get_queryset())

        # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            paginated_response = self.get_paginated_response(serializer.data)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å—å–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É (–Ω–µ —Ç—ñ–ª—å–∫–∏ –ø–æ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ)
            full_stats = queryset.aggregate(
                total_clients=Count('id'),
                total_revenue=Sum('total_spent'),
                avg_ltv=Avg('total_spent'),
                total_orders=Sum('total_orders')
            )

            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ñ
            temp_distribution = queryset.values('temperature').annotate(
                count=Count('id')
            ).order_by('-count')

            return api_response(
                data=paginated_response.data['results'],
                meta={
                    "pagination": {
                        "count": paginated_response.data['count'],
                        "next": paginated_response.data['next'],
                        "previous": paginated_response.data['previous']
                    },
                    "filters_applied": {
                        "temperature": request.query_params.get('temperature'),
                        "akb_segment": request.query_params.get('akb_segment'),
                        "assigned_to": request.query_params.get('assigned_to')
                    },
                    "dataset_stats": {
                        "total_clients": full_stats['total_clients'],
                        "total_revenue": float(full_stats['total_revenue'] or 0),
                        "avg_ltv": float(full_stats['avg_ltv'] or 0),
                        "total_orders": full_stats['total_orders'] or 0,
                        "temperature_distribution": {
                            item['temperature']: item['count']
                            for item in temp_distribution
                        }
                    },
                    "generated_at": timezone.now()
                }
            )

        # –ë–µ–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        serializer = self.get_serializer(queryset, many=True)

        full_stats = queryset.aggregate(
            total_clients=Count('id'),
            total_revenue=Sum('total_spent'),
            avg_ltv=Avg('total_spent')
        )

        return api_response(
            data=serializer.data,
            meta={
                "total_clients": len(serializer.data),
                "filters_applied": {
                    "temperature": request.query_params.get('temperature'),
                    "akb_segment": request.query_params.get('akb_segment'),
                    "assigned_to": request.query_params.get('assigned_to')
                },
                "stats": full_stats,
                "generated_at": timezone.now()
            }
        )

    def create(self, request, *args, **kwargs):
        """‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        phone = serializer.validated_data.get('phone')
        if phone:
            normalized_phone = Client.normalize_phone(phone)
            existing_client = Client.objects.filter(phone=normalized_phone).first()

            if existing_client:
                return api_response(
                    errors={
                        "duplicate_phone": "–ö–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–∂–µ —ñ—Å–Ω—É—î",
                        "existing_client": {
                            "id": existing_client.id,
                            "name": existing_client.full_name,
                            "phone": existing_client.phone,
                            "created_at": existing_client.created_at
                        }
                    },
                    meta={
                        "duplicate_check": {
                            "original_phone": phone,
                            "normalized_phone": normalized_phone,
                            "check_time": timezone.now()
                        }
                    },
                    status_code=409
                )

        try:
            instance = serializer.save()
            smart_cache_invalidation()

            return api_response(
                data=serializer.data,
                meta={
                    "created": True,
                    "client_id": instance.id,
                    "creation_time": timezone.now(),
                    "cache_cleared": True,
                    "initial_temperature": getattr(instance, 'temperature', 'cold'),
                    "initial_segment": getattr(instance, 'akb_segment', 'new')
                },
                message=f"‚úÖ –ö–ª—ñ—î–Ω—Ç–∞ {instance.full_name} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                status_code=201
            )
        except Exception as e:
            return api_response(
                errors={
                    "creation_error": f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "attempted_data": request.data
                },
                status_code=500
            )

    def update(self, request, *args, **kwargs):
        """üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
        partial = kwargs.pop('partial', False)
        instance = self.get_object()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        old_data = {
            'temperature': getattr(instance, 'temperature', None),
            'akb_segment': getattr(instance, 'akb_segment', None),
            'assigned_to': instance.assigned_to.username if instance.assigned_to else None
        }

        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)

        try:
            updated_instance = serializer.save()
            smart_cache_invalidation()

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —â–æ –∑–º—ñ–Ω–∏–ª–æ—Å—å
            changes = {}
            if hasattr(updated_instance, 'temperature') and old_data['temperature'] != updated_instance.temperature:
                changes['temperature'] = {
                    'old': old_data['temperature'],
                    'new': updated_instance.temperature
                }

            if hasattr(updated_instance, 'akb_segment') and old_data['akb_segment'] != updated_instance.akb_segment:
                changes['akb_segment'] = {
                    'old': old_data['akb_segment'],
                    'new': updated_instance.akb_segment
                }

            new_assigned = updated_instance.assigned_to.username if updated_instance.assigned_to else None
            if old_data['assigned_to'] != new_assigned:
                changes['assigned_to'] = {
                    'old': old_data['assigned_to'],
                    'new': new_assigned
                }

            return api_response(
                data=serializer.data,
                meta={
                    "updated": True,
                    "client_id": updated_instance.id,
                    "update_time": timezone.now(),
                    "cache_cleared": True,
                    "partial_update": partial,
                    "changes_made": changes,
                    "total_changes": len(changes)
                },
                message=f"‚úÖ –ö–ª—ñ—î–Ω—Ç–∞ {updated_instance.full_name} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ"
            )
        except Exception as e:
            return api_response(
                errors={
                    "update_error": f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "client_id": instance.id
                },
                status_code=500
            )

    def retrieve(self, request, *args, **kwargs):
        """üë§ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        instance = self.get_object()
        serializer = self.get_serializer(instance)

        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        extended_data = serializer.data

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª—ñ–¥–∞—Ö –∫–ª—ñ—î–Ω—Ç–∞
        leads_stats = Lead.objects.filter(phone=instance.phone).aggregate(
            total_leads=Count('id'),
            completed_leads=Count('id', filter=Q(status='completed')),
            in_progress_leads=Count('id', filter=Q(status__in=['queued', 'in_work', 'preparation'])),
            total_lead_value=Sum('price', filter=Q(status='completed'))
        )

        # –û—Å—Ç–∞–Ω–Ω—ñ –≤–∑–∞—î–º–æ–¥—ñ—ó
        try:
            recent_interactions = ClientInteraction.objects.filter(
                client=instance
            ).order_by('-created_at')[:3]
            interactions_data = [
                {
                    'id': i.id,
                    'type': i.interaction_type,
                    'subject': i.subject,
                    'outcome': i.outcome,
                    'created_at': i.created_at
                }
                for i in recent_interactions
            ]
        except:
            interactions_data = []

        # –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ
        try:
            active_tasks = ClientTask.objects.filter(
                client=instance,
                status__in=['pending', 'in_progress']
            ).count()
        except:
            active_tasks = 0

        extended_data['analytics'] = {
            'leads_summary': {
                'total_leads': leads_stats['total_leads'],
                'completed_leads': leads_stats['completed_leads'],
                'in_progress_leads': leads_stats['in_progress_leads'],
                'total_value': float(leads_stats['total_lead_value'] or 0),
                'conversion_rate': round(
                    (leads_stats['completed_leads'] / leads_stats['total_leads'] * 100), 1
                ) if leads_stats['total_leads'] > 0 else 0
            },
            'engagement': {
                'recent_interactions': interactions_data,
                'active_tasks': active_tasks,
                'last_contact': getattr(instance, 'last_contact_date', None)
            },
            'financial': {
                'total_spent': float(getattr(instance, 'total_spent', 0) or 0),
                'total_orders': getattr(instance, 'total_orders', 0) or 0,
                'avg_order_value': float(getattr(instance, 'avg_check', 0) or 0),
                'ltv': float(getattr(instance, 'customer_lifetime_value', 0) or 0)
            }
        }

        return api_response(
            data=extended_data,
            meta={
                "client_id": instance.id,
                "data_includes": ["basic_info", "leads_summary", "engagement", "financial"],
                "analytics_generated_at": timezone.now(),
                "comprehensive_view": True
            }
        )

    def destroy(self, request, *args, **kwargs):
        """üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
        instance = self.get_object()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª—ñ–¥—ñ–≤
        active_leads = Lead.objects.filter(
            phone=instance.phone,
            status__in=['queued', 'in_work', 'preparation', 'on_the_way']
        )

        if active_leads.exists():
            return api_response(
                errors={
                    "deletion_blocked": f"–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ª—ñ–¥–∞–º–∏",
                    "active_leads_count": active_leads.count(),
                    "active_leads": [
                        {
                            "id": lead.id,
                            "status": lead.status,
                            "created_at": lead.created_at
                        }
                        for lead in active_leads[:5]  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                    ],
                    "solution": "–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ –ª—ñ–¥–∏"
                },
                meta={
                    "client_id": instance.id,
                    "client_name": instance.full_name,
                    "check_time": timezone.now()
                },
                status_code=422
            )

        try:
            client_info = {
                "id": instance.id,
                "name": instance.full_name,
                "phone": instance.phone,
                "total_spent": float(getattr(instance, 'total_spent', 0) or 0),
                "total_orders": getattr(instance, 'total_orders', 0) or 0
            }

            # –í–∏–¥–∞–ª—è—î–º–æ
            instance.delete()
            smart_cache_invalidation()

            return api_response(
                data={
                    "deleted_client": client_info
                },
                meta={
                    "deleted": True,
                    "deletion_time": timezone.now(),
                    "cache_cleared": True,
                    "cleanup_performed": True
                },
                message=f"‚úÖ –ö–ª—ñ—î–Ω—Ç–∞ {client_info['name']} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ",
                status_code=200
            )
        except Exception as e:
            return api_response(
                errors={
                    "deletion_error": f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "client_id": instance.id
                },
                status_code=500
            )

    @action(detail=False, methods=['get'], url_path='leads/(?P<client_id>[^/.]+)')
    def leads(self, request, client_id=None):
        """GET /api/clients/leads/{id}/"""
        try:
            client = Client.objects.get(id=client_id)
        except Client.DoesNotExist:
            return api_response(
                errors={'client': '–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        cache_key = f"client_leads_{client.id}"
        cached_result = cache.get(cache_key)

        if cached_result is None:
            leads = Lead.objects.select_related('assigned_to').filter(phone=client.phone)
            cached_result = [
                {
                    "id": lead.id,
                    "full_name": lead.full_name,
                    "status": lead.status,
                    "price": float(lead.price or 0),
                    "created_at": lead.created_at,
                    "assigned_to": lead.assigned_to.username if lead.assigned_to else None
                } for lead in leads
            ]
            cache.set(cache_key, cached_result, 30)

        return api_response(
            data={
                'client': {
                    'id': client.id,
                    'name': client.full_name,
                    'phone': client.phone
                },
                'leads': cached_result
            },
            meta={
                'total_leads': len(cached_result),
                'cache_hit': cached_result == cache.get(cache_key),
                'cache_expires_in': 30,
                'data_includes': ['lead_basic_info', 'status', 'price', 'assignment']
            }
        )

    @action(detail=False, methods=['get'], url_path='payments/(?P<client_id>[^/.]+)')
    def payments(self, request, client_id=None):
        """GET /api/clients/payments/{id}/"""
        try:
            client = Client.objects.get(id=client_id)
        except Client.DoesNotExist:
            return api_response(
                errors={'client': '–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        cache_key = f"client_payments_{client.id}"
        cached_result = cache.get(cache_key)

        if cached_result is None:
            payments = LeadPaymentOperation.objects.select_related('lead').filter(
                lead__phone=client.phone
            ).order_by('-created_at')

            cached_result = [
                {
                    "id": p.id,
                    "lead_id": p.lead_id,
                    "type": p.operation_type,
                    "amount": float(p.amount),
                    "comment": p.comment,
                    "created_at": p.created_at,
                } for p in payments
            ]
            cache.set(cache_key, cached_result, 30)

        total_received = sum(p['amount'] for p in cached_result if p['type'] == 'received')
        total_expected = sum(p['amount'] for p in cached_result if p['type'] == 'expected')

        return api_response(
            data={
                'client': {
                    'id': client.id,
                    'name': client.full_name,
                    'phone': client.phone
                },
                'payments': cached_result
            },
            meta={
                'financial_summary': {
                    'total_payments': len(cached_result),
                    'total_received': total_received,
                    'total_expected': total_expected,
                    'balance': total_received - total_expected,
                    'payment_ratio': round((total_received / total_expected * 100), 1) if total_expected > 0 else 0
                },
                'cache_expires_in': 30,
                'generated_at': timezone.now()
            }
        )

    @action(detail=False, methods=['get'], url_path='temperature-stats')
    def temperature_stats(self, request):
        """GET /api/clients/temperature-stats/"""
        cache_key = "temperature_stats"
        cached_result = cache.get(cache_key)

        if cached_result is None:
            if not hasattr(Client, 'temperature'):
                return api_response(
                    errors={'temperature': '–ü–æ–ª–µ temperature –Ω–µ —ñ—Å–Ω—É—î –≤ –º–æ–¥–µ–ª—ñ Client'},
                    status_code=400
                )

            stats = Client.objects.values('temperature').annotate(
                count=Count('id'),
                total_spent=Sum('total_spent'),
                avg_check=Avg('avg_check')
            ).order_by('temperature')

            result = {}
            for stat in stats:
                temp = stat['temperature']
                result[temp] = {
                    'count': stat['count'],
                    'total_spent': float(stat['total_spent'] or 0),
                    'avg_check': float(stat['avg_check'] or 0),
                    'label': dict(Client.TEMPERATURE_CHOICES).get(temp, temp) if hasattr(Client,
                                                                                         'TEMPERATURE_CHOICES') else temp
                }

            cache.set(cache_key, result, 300)
            cached_result = result

        return api_response(
            data=cached_result,
            meta={
                'analysis_type': 'temperature_segmentation',
                'total_segments': len(cached_result),
                'cache_expires_in': 300,
                'generated_at': timezone.now(),
                'business_insights': {
                    'most_valuable_segment': max(cached_result.items(), key=lambda x: x[1]['total_spent'])[
                        0] if cached_result else None,
                    'largest_segment': max(cached_result.items(), key=lambda x: x[1]['count'])[
                        0] if cached_result else None
                }
            }
        )

    @action(detail=False, methods=['get'], url_path='akb-segments')
    def akb_segments(self, request):
        """GET /api/clients/akb-segments/"""
        cache_key = "akb_segments_stats"
        cached_result = cache.get(cache_key)

        if cached_result is None:
            stats = Client.objects.filter(
                akb_segment__in=['vip', 'premium', 'standard', 'basic']
            ).values('akb_segment').annotate(
                count=Count('id'),
                total_revenue=Sum('total_spent'),
                avg_ltv=Avg('total_spent')
            ).order_by('-total_revenue')

            segments = list(stats)
            cache.set(cache_key, segments, 300)
            cached_result = segments

        total_akb_clients = sum(s['count'] for s in cached_result)
        total_akb_revenue = sum(float(s['total_revenue'] or 0) for s in cached_result)

        return api_response(
            data={
                'segments': [
                    {
                        'segment': s['akb_segment'],
                        'count': s['count'],
                        'total_revenue': float(s['total_revenue'] or 0),
                        'avg_ltv': float(s['avg_ltv'] or 0),
                        'revenue_share': round((float(s['total_revenue'] or 0) / total_akb_revenue * 100),
                                               1) if total_akb_revenue > 0 else 0
                    }
                    for s in cached_result
                ]
            },
            meta={
                'analysis_type': 'akb_segmentation',
                'summary': {
                    'total_akb_clients': total_akb_clients,
                    'total_akb_revenue': total_akb_revenue,
                    'segments_analyzed': len(cached_result)
                },
                'cache_expires_in': 300,
                'analysis_date': timezone.now()
            }
        )

    @action(detail=False, methods=['get'], url_path='rfm-analysis')
    def rfm_analysis(self, request):
        """GET /api/clients/rfm-analysis/"""
        cache_key = "rfm_analysis"
        cached_result = cache.get(cache_key)

        if cached_result is None:
            top_clients = Client.objects.filter(
                total_orders__gt=0
            ).order_by('-total_spent')[:10]

            rfm_distribution = {}
            for client in Client.objects.filter(rfm_score__isnull=False):
                score = client.rfm_score
                if score not in rfm_distribution:
                    rfm_distribution[score] = 0
                rfm_distribution[score] += 1

            result = {
                'top_clients': [
                    {
                        'id': c.id,
                        'name': c.full_name,
                        'phone': c.phone,
                        'total_spent': float(getattr(c, 'total_spent', 0) or 0),
                        'rfm_score': getattr(c, 'rfm_score', ''),
                        'segment': getattr(c, 'akb_segment', ''),
                        'last_purchase': getattr(c, 'last_purchase_date', None)
                    }
                    for c in top_clients
                ],
                'rfm_distribution': rfm_distribution
            }

            cache.set(cache_key, result, 300)
            cached_result = result

        return api_response(
            data=cached_result,
            meta={
                'analysis_type': 'RFM',
                'metrics': {
                    'top_clients_count': len(cached_result['top_clients']),
                    'rfm_scores_analyzed': len(cached_result['rfm_distribution']),
                    'total_value_top_clients': sum(c['total_spent'] for c in cached_result['top_clients'])
                },
                'cache_expires_in': 300,
                'methodology': 'Recency, Frequency, Monetary analysis'
            }
        )

    @action(detail=False, methods=['get'], url_path='churn-risk')
    def churn_risk(self, request):
        """GET /api/clients/churn-risk/"""
        cache_key = "churn_risk_clients"
        cached_result = cache.get(cache_key)

        if cached_result is None:
            filters = Q(total_orders__gt=0)

            if hasattr(Client, 'temperature'):
                filters &= Q(temperature='sleeping')

            if hasattr(Client, 'rfm_recency'):
                filters |= Q(rfm_recency__gt=180)

            risky_clients = Client.objects.filter(filters).order_by('-total_spent')[:20]

            result = {
                'risky_clients': [
                    {
                        'id': c.id,
                        'name': c.full_name,
                        'phone': c.phone,
                        'last_purchase': getattr(c, 'last_purchase_date', None),
                        'days_since_purchase': getattr(c, 'rfm_recency', 0),
                        'total_spent': float(getattr(c, 'total_spent', 0) or 0),
                        'risk_level': getattr(c, 'risk_of_churn', 'unknown'),
                        'recommendation': getattr(c, 'next_contact_recommendation', '–ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º'),
                        'priority_score': self._calculate_churn_priority(c)
                    }
                    for c in risky_clients
                ]
            }

            # –°–æ—Ä—Ç—É—î–º–æ –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
            result['risky_clients'].sort(key=lambda x: x['priority_score'], reverse=True)
            cache.set(cache_key, result, 300)
            cached_result = result

        return api_response(
            data=cached_result,
            meta={
                'analysis_type': 'churn_risk',
                'risk_assessment': {
                    'risky_clients_count': len(cached_result['risky_clients']),
                    'potential_revenue_at_risk': sum(c['total_spent'] for c in cached_result['risky_clients']),
                    'criteria': 'sleeping temperature OR 180+ days inactive',
                    'high_priority_clients': len(
                        [c for c in cached_result['risky_clients'] if c['priority_score'] > 80])
                },
                'cache_expires_in': 300,
                'generated_at': timezone.now()
            }
        )

    def _calculate_churn_priority(self, client):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –¥–ª—è —á—É—Ä–Ω-—Ä–∏–∑–∏–∫—É"""
        score = 0

        # –ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –≤–∏—Ç—Ä–∞—Ç
        total_spent = float(getattr(client, 'total_spent', 0) or 0)
        if total_spent > 10000:
            score += 50
        elif total_spent > 5000:
            score += 30
        elif total_spent > 1000:
            score += 15

        # –†–µ—Ü–µ–Ω—Ç–Ω—ñ—Å—Ç—å
        recency = getattr(client, 'rfm_recency', 0)
        if recency > 365:
            score += 30
        elif recency > 180:
            score += 20
        elif recency > 90:
            score += 10

        # –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
        orders = getattr(client, 'total_orders', 0) or 0
        if orders > 5:
            score += 20
        elif orders > 2:
            score += 10

        return min(score, 100)  # –ú–∞–∫—Å–∏–º—É–º 100

    @action(detail=False, methods=['get'], url_path='hot-leads')
    def hot_leads(self, request):
        """GET /api/clients/hot-leads/"""
        cache_key = "hot_leads_clients"
        cached_result = cache.get(cache_key)

        if cached_result is None:
            if hasattr(Client, 'temperature'):
                hot_clients = Client.objects.filter(
                    temperature='hot'
                ).order_by('-created_at')[:20]
            else:
                hot_clients = Client.objects.order_by('-created_at')[:20]

            result = {
                'hot_leads': [
                    {
                        'id': c.id,
                        'name': c.full_name,
                        'phone': c.phone,
                        'assigned_to': c.assigned_to.username if c.assigned_to else None,
                        'created_at': c.created_at,
                        'leads_count': Lead.objects.filter(phone=c.phone).count(),
                        'recommendation': getattr(c, 'next_contact_recommendation', '–ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º'),
                        'urgency_level': self._calculate_urgency(c)
                    }
                    for c in hot_clients
                ]
            }

            # –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ—Å—Ç—ñ
            result['hot_leads'].sort(key=lambda x: x['urgency_level'], reverse=True)
            cache.set(cache_key, result, 300)
            cached_result = result

        return api_response(
            data=cached_result,
            meta={
                'analysis_type': 'hot_leads',
                'urgency_metrics': {
                    'hot_leads_count': len(cached_result['hot_leads']),
                    'unassigned_count': len([l for l in cached_result['hot_leads'] if not l['assigned_to']]),
                    'critical_urgency': len([l for l in cached_result['hot_leads'] if l['urgency_level'] > 80]),
                    'avg_leads_per_client': sum(l['leads_count'] for l in cached_result['hot_leads']) / len(
                        cached_result['hot_leads']) if cached_result['hot_leads'] else 0
                },
                'temperature_filter': 'hot',
                'cache_expires_in': 300,
                'priority': 'urgent_contact_required',
                'generated_at': timezone.now()
            }
        )

    def _calculate_urgency(self, client):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ—Å—Ç—ñ –¥–ª—è –≥–∞—Ä—è—á–∏—Ö –ª—ñ–¥—ñ–≤"""
        urgency = 50  # –ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å

        # –Ø–∫—â–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        if not client.assigned_to:
            urgency += 30

        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤
        leads_count = Lead.objects.filter(phone=client.phone).count()
        if leads_count > 3:
            urgency += 20
        elif leads_count > 1:
            urgency += 10

        # –ù–µ–¥–∞–≤–Ω—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        hours_since_created = (timezone.now() - client.created_at).total_seconds() / 3600
        if hours_since_created < 24:
            urgency += 20
        elif hours_since_created < 72:
            urgency += 10

        return min(urgency, 100)

    @action(detail=False, methods=['get'], url_path='journey/(?P<client_id>[^/.]+)')
    def client_journey(self, request, client_id=None):
        """GET /api/clients/journey/{id}/"""
        try:
            client = Client.objects.get(id=client_id)
        except Client.DoesNotExist:
            return api_response(
                errors={'client': '–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        # –í—Å—ñ –ª—ñ–¥–∏ –∫–ª—ñ—î–Ω—Ç–∞
        leads = Lead.objects.filter(phone=client.phone).order_by('created_at')

        # –í–∑–∞—î–º–æ–¥—ñ—ó
        try:
            interactions = ClientInteraction.objects.filter(
                client=client
            ).order_by('created_at')
        except:
            interactions = []

        # –ü–ª–∞—Ç–µ–∂—ñ
        payments = LeadPaymentOperation.objects.filter(
            lead__phone=client.phone
        ).order_by('created_at')

        # –•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è
        timeline = []

        for lead in leads:
            timeline.append({
                'type': 'lead',
                'date': lead.created_at,
                'title': f'–°—Ç–≤–æ—Ä–µ–Ω–æ –ª—ñ–¥: {lead.full_name}',
                'details': {
                    'lead_id': lead.id,
                    'status': lead.status,
                    'price': float(lead.price or 0),
                    'source': getattr(lead, 'source', '–ù–µ–≤—ñ–¥–æ–º–æ'),
                    'assigned_to': lead.assigned_to.username if lead.assigned_to else None
                }
            })

        for interaction in interactions:
            timeline.append({
                'type': 'interaction',
                'date': interaction.created_at,
                'title': f'{interaction.get_interaction_type_display()}: {interaction.subject}',
                'details': {
                    'interaction_id': interaction.id,
                    'outcome': getattr(interaction, 'outcome', ''),
                    'description': getattr(interaction, 'description', ''),
                    'created_by': interaction.created_by.username if hasattr(interaction,
                                                                             'created_by') and interaction.created_by else None
                }
            })

        for payment in payments:
            timeline.append({
                'type': 'payment',
                'date': payment.created_at,
                'title': f'–ü–ª–∞—Ç—ñ–∂: {payment.amount} –≥—Ä–Ω',
                'details': {
                    'payment_id': payment.id,
                    'lead_id': payment.lead_id,
                    'type': payment.operation_type,
                    'amount': float(payment.amount),
                    'comment': payment.comment
                }
            })

        timeline.sort(key=lambda x: x['date'])

        # –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ–¥–æ—Ä–æ–∂—ñ
        journey_analytics = {
            'customer_lifecycle': {
                'days_as_customer': (timezone.now() - client.created_at).days,
                'first_interaction': min([item['date'] for item in timeline]) if timeline else None,
                'last_interaction': max([item['date'] for item in timeline]) if timeline else None,
                'engagement_frequency': len(timeline) / max((timezone.now() - client.created_at).days, 1)
            },
            'touchpoints': {
                'total_touchpoints': len(timeline),
                'leads_created': len([t for t in timeline if t['type'] == 'lead']),
                'interactions_count': len([t for t in timeline if t['type'] == 'interaction']),
                'payments_count': len([t for t in timeline if t['type'] == 'payment'])
            },
            'financial_journey': {
                'total_payments': sum([float(t['details']['amount']) for t in timeline if t['type'] == 'payment']),
                'avg_payment': sum([float(t['details']['amount']) for t in timeline if t['type'] == 'payment']) / len(
                    [t for t in timeline if t['type'] == 'payment']) if [t for t in timeline if
                                                                         t['type'] == 'payment'] else 0
            }
        }

        return api_response(
            data={
                'client': {
                    'id': client.id,
                    'name': client.full_name,
                    'phone': client.phone,
                    'temperature': getattr(client, 'temperature', 'cold'),
                    'akb_segment': getattr(client, 'akb_segment', 'new'),
                    'total_spent': float(getattr(client, 'total_spent', 0) or 0),
                    'rfm_score': getattr(client, 'rfm_score', ''),
                    'created_at': client.created_at
                },
                'timeline': timeline,
                'summary': {
                    'total_leads': leads.count(),
                    'total_interactions': len(interactions),
                    'total_payments': payments.count(),
                    'customer_since': getattr(client, 'first_purchase_date', client.created_at),
                    'ltv': float(getattr(client, 'customer_lifetime_value', 0) or 0)
                },
                'analytics': journey_analytics
            },
            meta={
                'journey_events': len(timeline),
                'client_id': client.id,
                'analysis_type': 'customer_journey',
                'data_includes': ['timeline', 'summary', 'lifecycle_analytics'],
                'generated_at': timezone.now(),
                'comprehensive_analysis': True
            }
        )

    @action(detail=False, methods=['post'], url_path='update-temperature/(?P<client_id>[^/.]+)')
    def update_temperature(self, request, client_id=None):
        """POST /api/clients/update-temperature/{id}/"""
        try:
            client = Client.objects.get(id=client_id)
        except Client.DoesNotExist:
            return api_response(
                errors={'client': '–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        new_temperature = request.data.get('temperature')
        update_reason = request.data.get('reason', '–†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')

        if not hasattr(client, 'temperature'):
            return api_response(
                errors={'temperature': '–ü–æ–ª–µ temperature –Ω–µ —ñ—Å–Ω—É—î –≤ –º–æ–¥–µ–ª—ñ Client'},
                status_code=400
            )

        if not hasattr(Client, 'TEMPERATURE_CHOICES'):
            return api_response(
                errors={'choices': 'TEMPERATURE_CHOICES –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ'},
                status_code=400
            )

        if new_temperature not in dict(Client.TEMPERATURE_CHOICES):
            available_options = [
                {'code': code, 'label': label}
                for code, label in Client.TEMPERATURE_CHOICES
            ]
            return api_response(
                errors={
                    'temperature': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    'provided_value': new_temperature,
                    'available_options': available_options
                },
                status_code=400
            )

        old_temperature = client.temperature

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ —Ü–µ —Å–ø—Ä–∞–≤–¥—ñ –∑–º—ñ–Ω–∞
        if old_temperature == new_temperature:
            return api_response(
                data={
                    'client': {
                        'id': client.id,
                        'name': client.full_name,
                        'phone': client.phone,
                        'temperature': client.temperature
                    }
                },
                meta={
                    'no_change': True,
                    'current_temperature': old_temperature,
                    'check_time': timezone.now()
                },
                message=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —è–∫ {old_temperature}'
            )

        try:
            client.temperature = new_temperature
            client.save()

            smart_cache_invalidation()

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            temperature_change_log = {
                'client_id': client.id,
                'old_temperature': old_temperature,
                'new_temperature': new_temperature,
                'changed_by': request.user.username,
                'change_time': timezone.now(),
                'reason': update_reason
            }

            return api_response(
                data={
                    'client': {
                        'id': client.id,
                        'name': client.full_name,
                        'phone': client.phone,
                        'old_temperature': old_temperature,
                        'new_temperature': new_temperature,
                        'temperature_label': dict(Client.TEMPERATURE_CHOICES).get(new_temperature, new_temperature)
                    },
                    'change_log': temperature_change_log
                },
                meta={
                    'updated': True,
                    'update_time': timezone.now(),
                    'cache_cleared': True,
                    'changed_by': request.user.username,
                    'business_impact': self._get_temperature_impact(old_temperature, new_temperature)
                },
                message=f'‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∑–º—ñ–Ω–µ–Ω–æ: {old_temperature} ‚Üí {new_temperature}'
            )
        except Exception as e:
            return api_response(
                errors={
                    'update_error': f'–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏: {str(e)}',
                    'details': str(e)
                },
                meta={
                    'error_time': timezone.now(),
                    'client_id': client.id,
                    'attempted_change': f'{old_temperature} ‚Üí {new_temperature}'
                },
                status_code=500
            )

    def _get_temperature_impact(self, old_temp, new_temp):
        """–ê–Ω–∞–ª—ñ–∑ –±—ñ–∑–Ω–µ—Å-–≤–ø–ª–∏–≤—É –∑–º—ñ–Ω–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏"""
        temp_hierarchy = {'cold': 1, 'warm': 2, 'hot': 3, 'loyal': 4, 'sleeping': 0}

        old_level = temp_hierarchy.get(old_temp, 1)
        new_level = temp_hierarchy.get(new_temp, 1)

        if new_level > old_level:
            return {
                'type': 'positive',
                'description': '–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ - –∫–ª—ñ—î–Ω—Ç —Å—Ç–∞—î –±—ñ–ª—å—à –∞–∫—Ç–∏–≤–Ω–∏–º',
                'recommendation': '–ó–±—ñ–ª—å—à–∏—Ç–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó'
            }
        elif new_level < old_level:
            return {
                'type': 'negative',
                'description': '–ó–Ω–∏–∂–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ - —Ä–∏–∑–∏–∫ –≤—Ç—Ä–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞',
                'recommendation': '–†–æ–∑—Ä–æ–±–∏—Ç–∏ –ø–ª–∞–Ω —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó'
            }
        else:
            return {
                'type': 'neutral',
                'description': '–ó–º—ñ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –≤ –º–µ–∂–∞—Ö –æ–¥–Ω–∞–∫–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
                'recommendation': '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é'
            }

# üöÄ –§–£–ù–ö–¶–Ü–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –î–£–ë–õ–Ü–ö–ê–¢–Ü–í
def check_duplicate_lead(phone, full_name=None, order_number=None, time_window_minutes=30):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ª—ñ–¥ –¥—É–±–ª—ñ–∫–∞—Ç–æ–º –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ X —Ö–≤–∏–ª–∏–Ω
    """
    from django.utils import timezone
    from datetime import timedelta

    if not phone:
        return False, None

    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    normalized_phone = Client.normalize_phone(phone)

    # –ß–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω)
    time_threshold = timezone.now() - timedelta(minutes=time_window_minutes)

    # –ë–∞–∑–æ–≤–∏–π –ø–æ—à—É–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É + —á–∞—Å—É
    recent_leads = Lead.objects.filter(
        phone=normalized_phone,
        created_at__gte=time_threshold
    ).order_by('-created_at')

    if not recent_leads.exists():
        return False, None

    # –Ø–∫—â–æ —î –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - —Å—Ç—Ä–æ–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if order_number:
        exact_match = recent_leads.filter(order_number=order_number).first()
        if exact_match:
            return True, exact_match

    # –Ø–∫—â–æ —î —ñ–º'—è - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–º'—è + —Ç–µ–ª–µ—Ñ–æ–Ω
    if full_name:
        name_match = recent_leads.filter(full_name__iexact=full_name.strip()).first()
        if name_match:
            return True, name_match

    # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω - —Ç–µ–∂ –¥—É–±–ª—ñ–∫–∞—Ç
    very_recent = recent_leads.filter(
        created_at__gte=timezone.now() - timedelta(minutes=5)
    ).first()

    if very_recent:
        return True, very_recent

    return False, None


class ExternalLeadView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        print(f"üì• API: –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–¥–∞: {request.data}")

        serializer = ExternalLeadSerializer(data=request.data)
        if serializer.is_valid():
            phone = serializer.validated_data.get('phone')
            full_name = serializer.validated_data.get('full_name')
            order_number = serializer.validated_data.get('order_number')

            is_duplicate, existing_lead = check_duplicate_lead(
                phone=phone,
                full_name=full_name,
                order_number=order_number,
                time_window_minutes=30
            )

            if is_duplicate:
                print(f"üö´ –î–£–ë–õ–Ü–ö–ê–¢! –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –ª—ñ–¥ #{existing_lead.id}")
                return api_response(
                    errors={
                        "type": "DUPLICATE_LEAD",
                        "message": f"–õ—ñ–¥ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–∂–µ —ñ—Å–Ω—É—î",
                        "existing_lead": {
                            "id": existing_lead.id,
                            "full_name": existing_lead.full_name,
                            "phone": existing_lead.phone,
                            "created_at": existing_lead.created_at,
                            "status": existing_lead.status
                        },
                        "duplicate_check": {
                            "phone": phone,
                            "normalized_phone": Client.normalize_phone(phone) if phone else None,
                            "full_name": full_name,
                            "time_window": "30 minutes"
                        }
                    },
                    status_code=status.HTTP_409_CONFLICT
                )

            print(f"‚úÖ –ù–µ –¥—É–±–ª—ñ–∫–∞—Ç - —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ª—ñ–¥")
            lead, context = create_lead_with_logic(serializer.validated_data)

            smart_cache_invalidation(
                lead_id=lead.id,
                manager_id=lead.assigned_to.id if lead.assigned_to else None
            )

            return api_response(
                data={
                    "lead": {
                        "id": lead.id,
                        "full_name": lead.full_name,
                        "phone": lead.phone,
                        "status": context['final_status'],
                        "assigned_manager": context['assigned_to'],
                        "created_at": lead.created_at,
                    }
                },
                meta={
                    "created": True,
                    "details": context,
                    "processing_time": timezone.now()
                },
                message=f"‚úÖ –õ—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {lead.full_name} ‚Äî —Å—Ç–∞—Ç—É—Å: {context['final_status'].upper()}",
                status_code=status.HTTP_201_CREATED
            )

        return api_response(
            errors={
                "type": "VALIDATION_ERROR",
                "details": serializer.errors
            },
            status_code=status.HTTP_400_BAD_REQUEST
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def leads_report(request):
    """üìä –ë–∞–∑–æ–≤–∏–π –∑–≤—ñ—Ç –ø–æ –ª—ñ–¥–∞—Ö –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""

    # üõ°Ô∏è –ü–ï–†–ï–í–Ü–†–ö–ê –ü–†–ê–í –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê
    if not request.user.is_staff:
        return api_response(
            errors={
                "permission_denied": "–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤",
                "user_info": {
                    "username": request.user.username,
                    "is_staff": request.user.is_staff,
                    "is_authenticated": request.user.is_authenticated
                }
            },
            status_code=403
        )

    date_from = request.GET.get("date_from")
    date_to = request.GET.get("date_to")

    if not date_from or not date_to:
        return api_response(
            errors={"dates": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ?date_from=...&date_to=..."},
            status_code=400
        )

    try:
        start = datetime.strptime(date_from, "%Y-%m-%d")
        end = datetime.strptime(date_to, "%Y-%m-%d") + timedelta(days=1)
    except ValueError:
        return api_response(
            errors={"date_format": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD"},
            status_code=400
        )

    cache_key = f"leads_report_{date_from}_{date_to}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return api_response(
            data=cached_result,
            meta={
                "cache_hit": True,
                "cache_expires_in": 60,
                "generated_at": timezone.now()
            }
        )

    leads = Lead.objects.filter(created_at__range=(start, end))
    status_counts = dict(leads.values('status').annotate(count=Count('id')).values_list('status', 'count'))

    payment_totals = LeadPaymentOperation.objects.filter(
        lead__created_at__range=(start, end)
    ).aggregate(
        expected_sum=Sum('amount', filter=Q(operation_type='expected')),
        received_sum=Sum('amount', filter=Q(operation_type='received'))
    )

    expected_sum = float(payment_totals['expected_sum'] or 0)
    received_sum = float(payment_totals['received_sum'] or 0)
    delta = expected_sum - received_sum

    result = {
        "period": {
            "date_from": date_from,
            "date_to": date_to
        },
        "summary": {
            "total_leads": leads.count(),
            "expected_sum": expected_sum,
            "received_sum": received_sum,
            "delta": delta
        },
        "by_status": status_counts
    }

    cache.set(cache_key, result, 60)

    return api_response(
        data=result,
        meta={
            "cache_hit": False,
            "cache_expires_in": 60,
            "generated_at": timezone.now(),
            "report_type": "leads_summary"
        }
    )


@staff_member_required
def leads_report_page(request):
    """üìä –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–≤—ñ—Ç—ñ–≤ –ø–æ –ª—ñ–¥–∞—Ö –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""

    form = LeadsReportForm(request.GET or None)

    # –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    page_data = {
        "title": "–ó–≤—ñ—Ç–∏ –ø–æ –ª—ñ–¥–∞—Ö",
        "user": {
            "username": request.user.username,
            "is_staff": request.user.is_staff,
            "is_superuser": request.user.is_superuser
        },
        "form_data": {
            "form_valid": form.is_valid() if form.is_bound else None,
            "has_data": bool(request.GET),
            "submitted_params": dict(request.GET) if request.GET else {}
        },
        "quick_stats": {},
        "available_filters": {
            "date_range": True,
            "manager_filter": True,
            "status_filter": True,
            "source_filter": True
        }
    }

    # –Ø–∫—â–æ —Ñ–æ—Ä–º–∞ –≤–∞–ª—ñ–¥–Ω–∞ - –¥–æ–¥–∞—î–º–æ —à–≤–∏–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if form.is_valid():
        try:
            # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            today = timezone.now().date()
            week_ago = today - timedelta(days=7)

            page_data["quick_stats"] = {
                "today_leads": Lead.objects.filter(created_at__date=today).count(),
                "week_leads": Lead.objects.filter(created_at__date__gte=week_ago).count(),
                "total_leads": Lead.objects.count(),
                "completed_today": Lead.objects.filter(
                    status='completed',
                    status_updated_at__date=today
                ).count()
            }

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
            status_stats = Lead.objects.values('status').annotate(
                count=Count('id')
            ).order_by('-count')

            page_data["status_distribution"] = {
                stat['status']: stat['count'] for stat in status_stats
            }

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
            manager_stats = Lead.objects.filter(
                assigned_to__isnull=False
            ).values(
                'assigned_to__username'
            ).annotate(
                total_leads=Count('id'),
                completed=Count('id', filter=Q(status='completed'))
            ).order_by('-total_leads')[:5]

            page_data["top_managers"] = list(manager_stats)

        except Exception as e:
            page_data["stats_error"] = f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    # –ú–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    page_data["meta"] = {
        "page_loaded_at": timezone.now(),
        "form_errors": form.errors if form.errors else {},
        "available_reports": [
            "leads_summary",
            "manager_performance",
            "payment_analysis",
            "funnel_analytics"
        ],
        "export_formats": ["excel", "csv", "pdf"],
        "cache_info": {
            "reports_cached": True,
            "cache_duration": "60 seconds"
        }
    }

    # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —î
    if form.is_valid() and request.GET:
        page_data["success_message"] = "–§—ñ–ª—å—Ç—Ä–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
    elif form.errors:
        page_data["error_message"] = "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"

    context = {
        "form": form,
        "page_data": page_data
    }

    return render(request, "admin/reports/leads_report_form.html", context)


User = get_user_model()


class LeadsReportView(APIView):
    """üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –ª—ñ–¥–∞—Ö –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é"""
    permission_classes = [IsAuthenticated]

    def get(self, request):
        date_from = parse_date(request.GET.get('date_from'))
        date_to = parse_date(request.GET.get('date_to'))
        manager_id = request.GET.get('manager_id')

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if not date_from and not date_to:
            # –Ø–∫—â–æ –¥–∞—Ç–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ - –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
            date_to = timezone.now().date()
            date_from = date_to - timedelta(days=30)

        # üöÄ –°–ö–û–†–û–ß–£–Ñ–ú–û –ö–ï–® –¥–æ 2 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
        cache_key = f"detailed_report_{date_from}_{date_to}_{manager_id}"
        cached_result = cache.get(cache_key)

        if cached_result:
            return api_response(
                data=cached_result,
                meta={
                    "cache_hit": True,
                    "cache_expires_in": 120,
                    "report_generated_at": timezone.now(),
                    "data_source": "cache"
                }
            )

        # –ë–∞–∑–æ–≤–∏–π QuerySet
        leads = Lead.objects.select_related('assigned_to')

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
        filters_applied = {}
        if date_from:
            leads = leads.filter(created_at__date__gte=date_from)
            filters_applied['date_from'] = str(date_from)
        if date_to:
            leads = leads.filter(created_at__date__lte=date_to)
            filters_applied['date_to'] = str(date_to)
        if manager_id:
            leads = leads.filter(assigned_to_id=manager_id)
            filters_applied['manager_id'] = manager_id

        now_date = now()

        # üìà –ó–í–Ü–¢ –ü–û –ú–ï–ù–ï–î–ñ–ï–†–ê–•
        managers_stats = leads.values(
            'assigned_to__id',
            'assigned_to__username'
        ).annotate(
            total_leads=Count('id'),
            completed=Count('id', filter=Q(status='completed')),
            in_work=Count('id', filter=Q(status='in_work')),
            queued=Count('id', filter=Q(status='queued')),
            declined=Count('id', filter=Q(status='declined')),
            total_price=Sum('price', filter=Q(status='completed')),
            avg_check=Avg('price', filter=Q(status='completed'))
        ).filter(assigned_to__isnull=False)

        managers_report = []
        for stat in managers_stats:
            conversion = round((stat['completed'] / stat['total_leads']) * 100, 1) if stat['total_leads'] else 0
            avg_check = round(float(stat['avg_check'] or 0), 2)

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏
            completed_leads = leads.filter(
                assigned_to__id=stat['assigned_to__id'],
                status='completed',
                status_updated_at__isnull=False
            ).annotate(
                duration=ExpressionWrapper(
                    F("status_updated_at") - F("created_at"),
                    output_field=DurationField()
                )
            ).values_list('duration', flat=True)

            durations = [d.total_seconds() for d in completed_leads if d]
            avg_minutes = int(sum(durations) / len(durations) / 60) if durations else None

            managers_report.append({
                "manager_id": stat['assigned_to__id'],
                "manager": stat['assigned_to__username'],
                "performance": {
                    "total_leads": stat['total_leads'],
                    "completed": stat['completed'],
                    "in_work": stat['in_work'],
                    "queued": stat['queued'],
                    "declined": stat['declined']
                },
                "financial": {
                    "total_revenue": float(stat['total_price'] or 0),
                    "avg_check": avg_check,
                    "conversion_rate": f"{conversion}%"
                },
                "efficiency": {
                    "avg_processing_time_minutes": avg_minutes,
                    "productivity_score": round(conversion * (avg_check / 1000), 1) if avg_check else 0
                }
            })

        # üí∞ –ê–ù–ê–õ–Ü–ó –ë–û–†–ì–Ü–í –ü–û –ö–õ–Ü–Ñ–ù–¢–ê–•
        client_debts = Client.objects.annotate(
            total_price=Sum(
                'phone__price',
                filter=Q(phone__status='completed') & Q(phone__in=leads)
            ),
            total_received=Sum(
                'phone__payment_operations__amount',
                filter=Q(
                    phone__payment_operations__operation_type='received'
                ) & Q(phone__in=leads)
            )
        ).annotate(
            debt=F('total_price') - F('total_received')
        ).filter(debt__gt=0).values(
            'full_name', 'phone', 'debt', 'total_received', 'total_price'
        )

        clients_debt_report = [
            {
                "client_name": debt['full_name'],
                "phone": debt['phone'],
                "financial": {
                    "total_debt": float(debt['debt'] or 0),
                    "total_received": float(debt['total_received'] or 0),
                    "total_expected": float(debt['total_price'] or 0),
                    "payment_ratio": round(
                        (float(debt['total_received'] or 0) / float(debt['total_price'] or 1)) * 100, 1
                    )
                }
            }
            for debt in client_debts
        ]

        # –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Ä–æ–∑–º—ñ—Ä—É –±–æ—Ä–≥—É
        clients_debt_report.sort(key=lambda x: x['financial']['total_debt'], reverse=True)
        top_debtors = clients_debt_report[:10]

        # üìà –í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ–Ü–í
        funnel_data = leads.aggregate(
            queued=Count('id', filter=Q(status='queued')),
            in_work=Count('id', filter=Q(status='in_work')),
            awaiting_prepayment=Count('id', filter=Q(status='awaiting_prepayment')),
            preparation=Count('id', filter=Q(status='preparation')),
            warehouse_processing=Count('id', filter=Q(status='warehouse_processing')),
            warehouse_ready=Count('id', filter=Q(status='warehouse_ready')),
            on_the_way=Count('id', filter=Q(status='on_the_way')),
            completed=Count('id', filter=Q(status='completed')),
            declined=Count('id', filter=Q(status='declined'))
        )

        # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–ï–†–Ü–û–î
        period_stats = {
            "total_leads": leads.count(),
            "new_today": Lead.objects.filter(created_at__date=now_date.date()).count(),
            "completed_today": Lead.objects.filter(
                status='completed',
                status_updated_at__date=now_date.date()
            ).count(),
            "last_7_days": Lead.objects.filter(
                created_at__gte=now_date - timedelta(days=7)
            ).count(),
            "conversion_rate": round(
                (funnel_data['completed'] / leads.count() * 100), 1
            ) if leads.count() > 0 else 0
        }

        # üö® –ü–†–û–ë–õ–ï–ú–ù–Ü –õ–Ü–î–ò
        long_in_work_leads = Lead.objects.filter(
            status="in_work",
            created_at__lte=now_date - timedelta(days=1)
        ).values('id', 'full_name', 'created_at', 'assigned_to__username')

        paid_lead_ids = set(LeadPaymentOperation.objects.filter(
            operation_type='received'
        ).values_list('lead_id', flat=True))

        completed_without_payment = Lead.objects.filter(
            status="completed"
        ).exclude(id__in=paid_lead_ids).values('id', 'full_name', 'price', 'assigned_to__username')

        # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "report_summary": {
                "period": filters_applied,
                "total_managers": len(managers_report),
                "total_debtors": len(clients_debt_report),
                "total_debt_amount": sum(d['financial']['total_debt'] for d in clients_debt_report)
            },
            "managers_performance": managers_report,
            "debt_analysis": {
                "all_debtors": clients_debt_report,
                "top_debtors": top_debtors,
                "debt_statistics": {
                    "total_debtors": len(clients_debt_report),
                    "largest_debt": max([d['financial']['total_debt'] for d in clients_debt_report], default=0),
                    "average_debt": round(
                        sum(d['financial']['total_debt'] for d in clients_debt_report) / len(clients_debt_report), 2
                    ) if clients_debt_report else 0
                }
            },
            "sales_funnel": funnel_data,
            "period_statistics": period_stats,
            "problem_leads": {
                "long_in_work": list(long_in_work_leads),
                "completed_without_payment": list(completed_without_payment),
                "delayed_count": len(long_in_work_leads),
                "unpaid_completed_count": len(completed_without_payment)
            }
        }

        # –ö–µ—à—É—î–º–æ –Ω–∞ 2 —Ö–≤–∏–ª–∏–Ω–∏
        cache.set(cache_key, result, 120)

        return api_response(
            data=result,
            meta={
                "report_type": "detailed_leads_analysis",
                "filters_applied": filters_applied,
                "data_source": "database",
                "cache_expires_in": 120,
                "generated_at": timezone.now(),
                "processing_time": "real_time",
                "report_scope": {
                    "total_leads_analyzed": leads.count(),
                    "managers_included": len(managers_report),
                    "period_days": (date_to - date_from).days if date_from and date_to else None
                }
            }
        )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def geocode_address(request):
    """üó∫Ô∏è –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ Google Maps API"""
    address = request.query_params.get("address")
    if not address:
        return api_response(
            errors={"address": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä ?address="},
            status_code=400
        )

    # –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –∫–µ—à—É–≤–∞—Ç–∏ –¥–æ–≤–≥–æ
    cache_key = f"geocode_{hash(address)}"
    cached_result = cache.get(cache_key)

    if cached_result:
        return api_response(
            data=cached_result,
            meta={
                "cache_hit": True,
                "cache_expires_in": 86400,
                "geocoding_service": "Google Maps API"
            }
        )

    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        "address": address,
        "key": settings.GOOGLE_MAPS_API_KEY
    }

    try:
        response = requests.get(url, params=params, timeout=10)
        response_data = response.json()
    except requests.RequestException as e:
        return api_response(
            errors={"api_error": f"–ü–æ–º–∏–ª–∫–∞ –∑–≤'—è–∑–∫—É –∑ Google Maps API: {str(e)}"},
            status_code=500
        )

    if response_data.get("status") != "OK":
        return api_response(
            errors={
                "geocoding_error": "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ Google Maps",
                "google_status": response_data.get("status"),
                "google_error": response_data.get("error_message", "")
            },
            status_code=400
        )

    result_data = response_data["results"][0]
    location = result_data["geometry"]["location"]
    components = {c['types'][0]: c['long_name'] for c in result_data['address_components']}

    geocoding_result = {
        "original_query": address,
        "formatted_address": result_data["formatted_address"],
        "coordinates": {
            "lat": location["lat"],
            "lng": location["lng"]
        },
        "address_components": {
            "country": components.get("country"),
            "city": components.get("locality") or components.get("administrative_area_level_1"),
            "postal_code": components.get("postal_code"),
            "street": components.get("route"),
            "street_number": components.get("street_number")
        },
        "place_id": result_data.get("place_id"),
        "geometry_type": result_data["geometry"]["location_type"]
    }

    cache.set(cache_key, geocoding_result, 86400)  # –ö–µ—à—É—î–º–æ –Ω–∞ –¥–µ–Ω—å

    return api_response(
        data=geocoding_result,
        meta={
            "cache_hit": False,
            "cache_expires_in": 86400,
            "geocoding_service": "Google Maps API",
            "response_time": timezone.now(),
            "accuracy": result_data["geometry"]["location_type"]
        },
        message=f"–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è: {result_data['formatted_address']}"
    )


@staff_member_required
def map_search_view(request):
    """üó∫Ô∏è –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ—à—É–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î API –∫–ª—é—á
    if not hasattr(settings, 'GOOGLE_MAPS_API_KEY') or not settings.GOOGLE_MAPS_API_KEY:
        context = {
            "error": "Google Maps API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π",
            "GOOGLE_MAPS_API_KEY": None,
            "page_data": {
                "title": "–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó",
                "error_type": "MISSING_API_KEY"
            }
        }
        return render(request, "admin/map_search_error.html", context)

    # –ë–∞–∑–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–∏
    context = {
        "GOOGLE_MAPS_API_KEY": settings.GOOGLE_MAPS_API_KEY,
        "page_data": {
            "title": "–ü–æ—à—É–∫ –Ω–∞ –∫–∞—Ä—Ç—ñ",
            "user": {
                "username": request.user.username,
                "is_staff": request.user.is_staff,
                "is_superuser": request.user.is_superuser
            },
            "map_config": {
                "default_zoom": 10,
                "default_center": {
                    "lat": 49.8397,  # –õ—å–≤—ñ–≤
                    "lng": 24.0297
                },
                "search_enabled": True,
                "geocoding_enabled": True
            },
            "features": {
                "address_search": True,
                "coordinate_display": True,
                "place_details": True,
                "export_coordinates": True
            }
        },
        "meta": {
            "page_loaded_at": timezone.now(),
            "api_version": "v3",
            "language": "uk",
            "region": "UA"
        }
    }

    # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if request.GET.get('with_stats'):
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—é (—è–∫—â–æ —î –∫–µ—à)
            geocoding_stats = {
                "total_requests": cache.get("geocoding_requests_count", 0),
                "cache_hits": cache.get("geocoding_cache_hits", 0),
                "last_request": cache.get("geocoding_last_request")
            }
            context["page_data"]["statistics"] = geocoding_stats
        except:
            pass

    return render(request, "admin/map_search.html", context)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def map_config_api(request):
    """üó∫Ô∏è API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–∞—Ä—Ç–∏"""

    if not request.user.is_staff:
        return api_response(
            errors={"permission": "–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"},
            status_code=403
        )

    if not hasattr(settings, 'GOOGLE_MAPS_API_KEY') or not settings.GOOGLE_MAPS_API_KEY:
        return api_response(
            errors={
                "configuration": "Google Maps API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π",
                "solution": "–î–æ–¥–∞–π—Ç–µ GOOGLE_MAPS_API_KEY –≤ settings.py"
            },
            status_code=500
        )

    config_data = {
        "api_key": settings.GOOGLE_MAPS_API_KEY,
        "map_settings": {
            "default_zoom": 10,
            "default_center": {
                "lat": 49.8397,  # –õ—å–≤—ñ–≤
                "lng": 24.0297
            },
            "language": "uk",
            "region": "UA"
        },
        "features": {
            "geocoding": True,
            "places": True,
            "streetview": True,
            "traffic": True
        },
        "limits": {
            "requests_per_day": 25000,
            "requests_per_minute": 300
        }
    }

    return api_response(
        data=config_data,
        meta={
            "config_loaded_at": timezone.now(),
            "user": request.user.username,
            "api_version": "v3"
        }
    )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def funnel_data(request):
    date_from_raw = request.GET.get("from")
    date_to_raw = request.GET.get("to")
    manager_id = request.GET.get("manager_id")

    cache_key = f"funnel_{date_from_raw}_{date_to_raw}_{manager_id}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return api_response(
            data=cached_result,
            meta={
                "cache_hit": True,
                "cache_expires_in": 30
            }
        )

    date_from = parse_date(date_from_raw) if date_from_raw else None
    date_to = parse_date(date_to_raw) if date_to_raw else None

    leads = Lead.objects.all()

    if date_from:
        leads = leads.filter(created_at__date__gte=date_from)
    if date_to:
        leads = leads.filter(created_at__date__lte=date_to)
    if manager_id:
        leads = leads.filter(assigned_to_id=manager_id)

    # üÜï –û–ù–û–í–õ–ï–ù–ê –í–û–†–û–ù–ö–ê –ó –ù–û–í–ò–ú –°–¢–ê–¢–£–°–û–ú
    funnel = leads.aggregate(
        queued=Count('id', filter=Q(status='queued')),
        in_work=Count('id', filter=Q(status='in_work')),
        awaiting_prepayment=Count('id', filter=Q(status='awaiting_prepayment')),
        preparation=Count('id', filter=Q(status='preparation')),
        warehouse_processing=Count('id', filter=Q(status='warehouse_processing')),
        warehouse_ready=Count('id', filter=Q(status='warehouse_ready')),  # üÜï –ù–û–í–ò–ô –°–¢–ê–¢–£–°
        on_the_way=Count('id', filter=Q(status='on_the_way')),
        completed=Count('id', filter=Q(status='completed')),
        declined=Count('id', filter=Q(status='declined'))
    )

    total_attempted = sum(funnel.values())
    conversion = round((funnel["completed"] / total_attempted) * 100, 1) if total_attempted > 0 else 0.0

    result = {
        "funnel": funnel,
        "warehouse_analytics": {
            "processing": funnel["warehouse_processing"],
            "ready": funnel["warehouse_ready"],
            "total_at_warehouse": funnel["warehouse_processing"] + funnel["warehouse_ready"],
            "warehouse_efficiency": round(
                (funnel["warehouse_ready"] / (funnel["warehouse_processing"] + funnel["warehouse_ready"]) * 100), 1
            ) if (funnel["warehouse_processing"] + funnel["warehouse_ready"]) > 0 else 0
        },
        "conversion_rate": f"{conversion}%"
    }

    cache.set(cache_key, result, 30)

    return api_response(
        data=result,
        meta={
            "filters": {
                "date_from": date_from_raw,
                "date_to": date_to_raw,
                "manager_id": manager_id
            },
            "total_leads": total_attempted,
            "cache_expires_in": 30,
            "generated_at": timezone.now(),
            "report_type": "funnel_analytics"
        }
    )


class LeadViewSet(viewsets.ModelViewSet):
    queryset = Lead.objects.select_related('assigned_to').prefetch_related(
        Prefetch('payment_operations', queryset=LeadPaymentOperation.objects.order_by('-created_at'))
    ).order_by('-created_at')
    serializer_class = LeadSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        """–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ª—ñ–¥—ñ–≤"""
        queryset = super().get_queryset()

        # –§—ñ–ª—å—Ç—Ä–∏
        status = self.request.query_params.get('status')
        assigned_to = self.request.query_params.get('assigned_to')
        date_from = self.request.query_params.get('date_from')
        date_to = self.request.query_params.get('date_to')
        phone = self.request.query_params.get('phone')

        if status:
            queryset = queryset.filter(status=status)
        if assigned_to:
            queryset = queryset.filter(assigned_to_id=assigned_to)
        if date_from:
            try:
                date_from_parsed = parse_date(date_from)
                if date_from_parsed:
                    queryset = queryset.filter(created_at__date__gte=date_from_parsed)
            except:
                pass
        if date_to:
            try:
                date_to_parsed = parse_date(date_to)
                if date_to_parsed:
                    queryset = queryset.filter(created_at__date__lte=date_to_parsed)
            except:
                pass
        if phone:
            normalized_phone = Client.normalize_phone(phone)
            queryset = queryset.filter(phone=normalized_phone)

        return queryset

    def list(self, request, *args, **kwargs):
        """üìã –°–ø–∏—Å–æ–∫ –ª—ñ–¥—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
        queryset = self.filter_queryset(self.get_queryset())

        # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            paginated_response = self.get_paginated_response(serializer.data)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å—ñ—Ö –ª—ñ–¥–∞—Ö (–Ω–µ —Ç—ñ–ª—å–∫–∏ –ø–æ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ)
            full_stats = queryset.aggregate(
                total_leads=Count('id'),
                completed_leads=Count('id', filter=Q(status='completed')),
                in_work_leads=Count('id', filter=Q(status='in_work')),
                total_revenue=Sum('price', filter=Q(status='completed')),
                avg_check=Avg('price', filter=Q(status='completed'))
            )

            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
            status_distribution = queryset.values('status').annotate(
                count=Count('id')
            ).order_by('-count')

            return api_response(
                data=paginated_response.data['results'],
                meta={
                    "pagination": {
                        "count": paginated_response.data['count'],
                        "next": paginated_response.data['next'],
                        "previous": paginated_response.data['previous']
                    },
                    "filters_applied": {
                        "status": request.query_params.get('status'),
                        "assigned_to": request.query_params.get('assigned_to'),
                        "date_from": request.query_params.get('date_from'),
                        "date_to": request.query_params.get('date_to'),
                        "phone": request.query_params.get('phone')
                    },
                    "dataset_stats": {
                        "total_leads": full_stats['total_leads'],
                        "completed_leads": full_stats['completed_leads'],
                        "in_work_leads": full_stats['in_work_leads'],
                        "total_revenue": float(full_stats['total_revenue'] or 0),
                        "avg_check": float(full_stats['avg_check'] or 0),
                        "conversion_rate": round(
                            (full_stats['completed_leads'] / full_stats['total_leads'] * 100), 1
                        ) if full_stats['total_leads'] > 0 else 0,
                        "status_distribution": {
                            item['status']: item['count']
                            for item in status_distribution
                        }
                    },
                    "generated_at": timezone.now()
                }
            )

        # –ë–µ–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        serializer = self.get_serializer(queryset, many=True)

        full_stats = queryset.aggregate(
            total_leads=Count('id'),
            total_revenue=Sum('price', filter=Q(status='completed'))
        )

        return api_response(
            data=serializer.data,
            meta={
                "total_leads": len(serializer.data),
                "filters_applied": {
                    "status": request.query_params.get('status'),
                    "assigned_to": request.query_params.get('assigned_to'),
                    "date_from": request.query_params.get('date_from'),
                    "date_to": request.query_params.get('date_to')
                },
                "stats": full_stats,
                "generated_at": timezone.now()
            }
        )

    def create(self, request, *args, **kwargs):
        """‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ª—ñ–¥–∞"""
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        phone = serializer.validated_data.get('phone')
        full_name = serializer.validated_data.get('full_name')
        order_number = serializer.validated_data.get('order_number')

        if phone:
            is_duplicate, existing_lead = check_duplicate_lead(
                phone=phone,
                full_name=full_name,
                order_number=order_number
            )

            if is_duplicate:
                return api_response(
                    errors={
                        "duplicate_lead": "–ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç –ª—ñ–¥–∞",
                        "existing_lead": {
                            "id": existing_lead.id,
                            "full_name": existing_lead.full_name,
                            "phone": existing_lead.phone,
                            "created_at": existing_lead.created_at,
                            "status": existing_lead.status
                        }
                    },
                    meta={
                        "duplicate_check": {
                            "phone": phone,
                            "normalized_phone": Client.normalize_phone(phone),
                            "check_time": timezone.now()
                        }
                    },
                    status_code=409
                )

        try:
            instance = serializer.save()
            smart_cache_invalidation(
                lead_id=instance.id,
                manager_id=instance.assigned_to.id if instance.assigned_to else None
            )

            return api_response(
                data=serializer.data,
                meta={
                    "created": True,
                    "lead_id": instance.id,
                    "creation_time": timezone.now(),
                    "cache_cleared": True,
                    "initial_status": instance.status,
                    "assigned_to": instance.assigned_to.username if instance.assigned_to else None
                },
                message=f"‚úÖ –õ—ñ–¥ #{instance.id} –¥–ª—è {instance.full_name} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                status_code=201
            )
        except Exception as e:
            return api_response(
                errors={
                    "creation_error": f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–¥–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "attempted_data": request.data
                },
                status_code=500
            )

    @action(detail=False, methods=['post'], url_path='upload-file/(?P<lead_id>[^/.]+)')
    def upload_file(self, request, lead_id=None):
        """üìé –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–æ –ª—ñ–¥–∞"""
        try:
            lead = Lead.objects.get(id=lead_id)
        except Lead.DoesNotExist:
            return api_response(
                errors={'lead': '–õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        files = request.FILES.getlist('file')
        if not files:
            return api_response(
                errors={'files': '–§–∞–π–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ'},
                status_code=400
            )

        uploaded_files = []
        for f in files:
            obj = LeadFile.objects.create(lead=lead, file=f)
            uploaded_files.append({
                "file_id": obj.id,
                "file_name": obj.file.name,
                "file_url": request.build_absolute_uri(obj.file.url),
                "uploaded_at": obj.uploaded_at
            })

        return api_response(
            data={
                'lead': {
                    'id': lead.id,
                    'full_name': lead.full_name
                },
                'uploaded_files': uploaded_files
            },
            meta={
                'files_count': len(uploaded_files),
                'upload_timestamp': timezone.now()
            },
            message=f'‚úÖ –î–æ–¥–∞–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª(—ñ–≤)'
        )

    @action(detail=False, methods=['get'], url_path='files/(?P<lead_id>[^/.]+)')
    def files(self, request, lead_id=None):
        """üìÅ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ª—ñ–¥–∞"""
        try:
            lead = Lead.objects.get(id=lead_id)
        except Lead.DoesNotExist:
            return api_response(
                errors={'lead': '–õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        files = lead.uploaded_files.all()
        files_list = [{
            "id": f.id,
            "name": f.file.name,
            "url": request.build_absolute_uri(f.file.url),
            "uploaded_at": f.uploaded_at,
        } for f in files]

        return api_response(
            data={
                'lead': {
                    'id': lead.id,
                    'full_name': lead.full_name
                },
                'files': files_list
            },
            meta={
                'total_files': len(files_list),
                'total_size_bytes': sum(f.file.size for f in files if f.file)
            }
        )

    @action(detail=False, methods=['get'], url_path='payments/(?P<lead_id>[^/.]+)')
    def payments(self, request, lead_id=None):
        """üí∞ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤ –ø–æ –ª—ñ–¥—É"""
        try:
            lead = Lead.objects.get(id=lead_id)
        except Lead.DoesNotExist:
            return api_response(
                errors={'lead': '–õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        cache_key = f"lead_payments_{lead.id}"
        cached_payments = cache.get(cache_key)

        if cached_payments is None:
            payments = lead.payment_operations.all()
            cached_payments = [
                {
                    "id": p.id,
                    "type": p.operation_type,
                    "amount": float(p.amount),
                    "comment": p.comment,
                    "created_at": p.created_at,
                } for p in payments
            ]
            cache.set(cache_key, cached_payments, 30)

        total_expected = sum(p['amount'] for p in cached_payments if p['type'] == 'expected')
        total_received = sum(p['amount'] for p in cached_payments if p['type'] == 'received')

        return api_response(
            data={
                'lead': {
                    'id': lead.id,
                    'full_name': lead.full_name,
                    'price': float(lead.price or 0)
                },
                'payments': cached_payments
            },
            meta={
                'summary': {
                    'total_payments': len(cached_payments),
                    'total_expected': total_expected,
                    'total_received': total_received,
                    'balance': total_received - total_expected
                },
                'cache_hit': cached_payments == cache.get(cache_key),
                'cache_expires_in': 30
            }
        )

    @action(detail=False, methods=['post'], url_path='add-payment/(?P<lead_id>[^/.]+)')
    def add_payment(self, request, lead_id=None):
        """üí∞ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –¥–æ –ª—ñ–¥–∞"""
        try:
            lead = Lead.objects.get(id=lead_id)
        except Lead.DoesNotExist:
            return api_response(
                errors={'lead': '–õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        operation_type = request.data.get('operation_type')
        amount = request.data.get('amount')
        comment = request.data.get('comment', '')

        if not operation_type or not amount:
            return api_response(
                errors={
                    'required_fields': 'operation_type —ñ amount –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ',
                    'example': {
                        'operation_type': 'received',
                        'amount': 1500,
                        'comment': '–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞'
                    }
                },
                status_code=400
            )

        payment = LeadPaymentOperation.objects.create(
            lead=lead,
            operation_type=operation_type,
            amount=amount,
            comment=comment
        )

        smart_cache_invalidation(lead_id=lead.id)

        return api_response(
            data={
                'payment': {
                    'id': payment.id,
                    'type': payment.operation_type,
                    'amount': float(payment.amount),
                    'comment': payment.comment,
                    'created_at': payment.created_at,
                },
                'lead_payment_info': LeadStatusValidator.get_payment_info(lead)
            },
            meta={
                "payment_added": True,
                "lead_id": lead.id
            },
            message='‚úÖ –ü–ª–∞—Ç—ñ–∂ –¥–æ–¥–∞–Ω–æ',
            status_code=201
        )

    def _get_last_activity_date(self, instance, payments):
        """–ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        dates = [instance.created_at]

        # –î–æ–¥–∞—î–º–æ –¥–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —è–∫—â–æ —î
        status_updated_at = getattr(instance, 'status_updated_at', None)
        if status_updated_at:
            dates.append(status_updated_at)

        # –î–æ–¥–∞—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É —è–∫—â–æ —î
        if payments:
            dates.append(payments[0].created_at)

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ None –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–∞—Ç—É
        valid_dates = [d for d in dates if d is not None]
        return max(valid_dates) if valid_dates else instance.created_at

    @action(detail=False, methods=['put', 'patch'], url_path='update-status/(?P<lead_id>[^/.]+)')
    def update_status(self, request, lead_id=None):
        """üîÑ –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –ª—ñ–¥–∞ –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"""
        try:
            lead = Lead.objects.get(id=lead_id)
        except Lead.DoesNotExist:
            return api_response(
                errors={'lead': '–õ—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'},
                status_code=404
            )

        new_status = request.data.get('status')
        if not new_status:
            return api_response(
                errors={
                    'status': '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å',
                    'available_statuses': LeadStatusValidator.get_allowed_transitions(lead.status, lead)
                },
                status_code=400
            )

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä
        validation = validate_lead_status_change(lead.id, new_status, request.user)

        if not validation['allowed']:
            return api_response(
                errors={
                    'status_change': validation['reason'],
                    'current_status': validation.get('current_status'),
                    'available_transitions': validation.get('available_transitions'),
                    'payment_info': validation.get('payment_info'),
                    'next_action': validation.get('next_action')
                },
                status_code=422
            )

        old_status = lead.status

        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤
            if new_status == "on_the_way" and old_status != "on_the_way":
                LeadPaymentOperation.objects.get_or_create(
                    lead=lead,
                    operation_type='expected',
                    defaults={
                        "amount": lead.price or 0,
                        "comment": f"–û—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –ª—ñ–¥ #{lead.id}"
                    }
                )

            elif new_status == "completed":
                payment_info = LeadStatusValidator.get_payment_info(lead)
                if payment_info['shortage'] > 0:
                    return api_response(
                        errors={
                            'payment': f"–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ - –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î {payment_info['shortage']} –≥—Ä–Ω",
                            'payment_info': payment_info
                        },
                        status_code=422
                    )

            # –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É
            lead.status = new_status
            lead.status_updated_at = timezone.now()
            lead.save()

            smart_cache_invalidation(
                lead_id=lead.id,
                manager_id=lead.assigned_to.id if lead.assigned_to else None
            )

            return api_response(
                data={
                    'lead': {
                        'id': lead.id,
                        'full_name': lead.full_name,
                        'old_status': old_status,
                        'new_status': new_status,
                        'status_updated_at': lead.status_updated_at
                    },
                    'payment_info': LeadStatusValidator.get_payment_info(lead),
                    'next_action': LeadStatusValidator.get_next_required_action(lead)
                },
                meta={
                    "status_changed": True,
                    "change_timestamp": timezone.now()
                },
                message=f'‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ: {LeadStatusValidator.STATUS_NAMES.get(old_status)} ‚Üí {LeadStatusValidator.STATUS_NAMES.get(new_status)}'
            )

        except Exception as e:
            return api_response(
                errors={
                    'exception': f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: {str(e)}',
                    'details': str(e)
                },
                status_code=500
            )

    def update(self, request, *args, **kwargs):
        """üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–¥–∞"""
        partial = kwargs.pop('partial', False)
        instance = self.get_object()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        old_data = {
            'status': instance.status,
            'price': float(instance.price or 0),
            'assigned_to': instance.assigned_to.username if instance.assigned_to else None,
            'full_name': instance.full_name,
            'phone': instance.phone
        }

        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)

        try:
            updated_instance = serializer.save()
            smart_cache_invalidation(
                lead_id=updated_instance.id,
                manager_id=updated_instance.assigned_to.id if updated_instance.assigned_to else None
            )

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —â–æ –∑–º—ñ–Ω–∏–ª–æ—Å—å
            changes = {}
            if old_data['status'] != updated_instance.status:
                changes['status'] = {
                    'old': old_data['status'],
                    'new': updated_instance.status
                }

            if old_data['price'] != float(updated_instance.price or 0):
                changes['price'] = {
                    'old': old_data['price'],
                    'new': float(updated_instance.price or 0)
                }

            new_assigned = updated_instance.assigned_to.username if updated_instance.assigned_to else None
            if old_data['assigned_to'] != new_assigned:
                changes['assigned_to'] = {
                    'old': old_data['assigned_to'],
                    'new': new_assigned
                }

            if old_data['full_name'] != updated_instance.full_name:
                changes['full_name'] = {
                    'old': old_data['full_name'],
                    'new': updated_instance.full_name
                }

            if old_data['phone'] != updated_instance.phone:
                changes['phone'] = {
                    'old': old_data['phone'],
                    'new': updated_instance.phone
                }

            return api_response(
                data=serializer.data,
                meta={
                    "updated": True,
                    "lead_id": updated_instance.id,
                    "update_time": timezone.now(),
                    "cache_cleared": True,
                    "partial_update": partial,
                    "changes_made": changes,
                    "total_changes": len(changes),
                    "payment_info": LeadStatusValidator.get_payment_info(updated_instance)
                },
                message=f"‚úÖ –õ—ñ–¥ #{updated_instance.id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ"
            )
        except Exception as e:
            return api_response(
                errors={
                    "update_error": f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–¥–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "lead_id": instance.id
                },
                status_code=500
            )

    def retrieve(self, request, *args, **kwargs):
        """üë§ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª—ñ–¥"""
        instance = self.get_object()
        serializer = self.get_serializer(instance)

        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        extended_data = serializer.data

        # –ü–ª–∞—Ç—ñ–∂–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        payment_info = LeadStatusValidator.get_payment_info(instance)

        # –§–∞–π–ª–∏
        try:
            files = instance.uploaded_files.all()
            files_data = [
                {
                    'id': f.id,
                    'name': f.file.name,
                    'url': request.build_absolute_uri(f.file.url),
                    'uploaded_at': f.uploaded_at,
                    'size': f.file.size if f.file else 0
                }
                for f in files
            ]
        except:
            files_data = []

        # –Ü—Å—Ç–æ—Ä—ñ—è –ø–ª–∞—Ç–µ–∂—ñ–≤
        payments = instance.payment_operations.all()
        payments_data = [
            {
                'id': p.id,
                'type': p.operation_type,
                'amount': float(p.amount),
                'comment': p.comment,
                'created_at': p.created_at
            }
            for p in payments
        ]

        # –ö–ª—ñ—î–Ω—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        try:
            client = Client.objects.filter(phone=instance.phone).first()
            client_info = {
                'id': client.id,
                'full_name': client.full_name,
                'temperature': getattr(client, 'temperature', 'cold'),
                'akb_segment': getattr(client, 'akb_segment', 'new'),
                'total_spent': float(getattr(client, 'total_spent', 0) or 0),
                'total_orders': getattr(client, 'total_orders', 0) or 0
            } if client else None
        except:
            client_info = None

        # –î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏
        available_statuses = LeadStatusValidator.get_allowed_transitions(instance.status, instance)

        extended_data['analytics'] = {
            'payment_info': {
                'price': float(payment_info['price']),
                'received': float(payment_info['received']),
                'shortage': float(payment_info['shortage']),
                'payment_percentage': payment_info['payment_percentage'],
                'is_fully_paid': LeadStatusValidator.is_fully_paid(instance),
                'payments_history': payments_data
            },
            'client_info': client_info,
            'files_info': {
                'total_files': len(files_data),
                'total_size_bytes': sum(f['size'] for f in files_data),
                'files': files_data
            },
            'status_info': {
                'current_status': instance.status,
                'status_name': LeadStatusValidator.STATUS_NAMES.get(instance.status),
                'available_transitions': available_statuses,
                'next_action': LeadStatusValidator.get_next_required_action(instance),
                'status_updated_at': getattr(instance, 'status_updated_at', None)
            },
            'timeline': {
                'created_at': instance.created_at,
                'days_since_creation': (timezone.now() - instance.created_at).days,
                'last_activity': self._get_last_activity_date(instance, payments)
            }
        }

        return api_response(
            data=extended_data,
            meta={
                "lead_id": instance.id,
                "data_includes": [
                    "basic_info", "payment_info", "client_info",
                    "files_info", "status_info", "timeline"
                ],
                "analytics_generated_at": timezone.now(),
                "comprehensive_view": True
            }
        )

    def destroy(self, request, *args, **kwargs):
        """üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ª—ñ–¥–∞"""
        instance = self.get_object()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏
        if instance.status in ['completed', 'on_the_way']:
            return api_response(
                errors={
                    "deletion_blocked": f"–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ–¥ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '{instance.status}'",
                    "current_status": instance.status,
                    "reason": "–õ—ñ–¥–∏ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏",
                    "solution": "–ó–º—ñ–Ω—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –ª—ñ–¥–∞ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                },
                meta={
                    "lead_id": instance.id,
                    "lead_name": instance.full_name,
                    "check_time": timezone.now()
                },
                status_code=422
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ
        payments = instance.payment_operations.filter(operation_type='received')
        if payments.exists():
            total_received = sum(float(p.amount) for p in payments)
            return api_response(
                errors={
                    "deletion_blocked": f"–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ–¥ –∑ –ø–ª–∞—Ç–µ–∂–∞–º–∏",
                    "total_received": total_received,
                    "payments_count": payments.count(),
                    "reason": "–õ—ñ–¥ –º–∞—î –ø–ª–∞—Ç–µ–∂—ñ, —â–æ –Ω–∞–¥—ñ–π—à–ª–∏",
                    "solution": "–°–ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±'—ñ—Ç—å –≤—Å—ñ –ø–ª–∞—Ç–µ–∂—ñ"
                },
                meta={
                    "lead_id": instance.id,
                    "check_time": timezone.now()
                },
                status_code=422
            )

        try:
            lead_info = {
                "id": instance.id,
                "full_name": instance.full_name,
                "phone": instance.phone,
                "status": instance.status,
                "price": float(instance.price or 0),
                "created_at": instance.created_at,
                "assigned_to": instance.assigned_to.username if instance.assigned_to else None
            }

            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏
            files_deleted = 0
            try:
                for file_obj in instance.uploaded_files.all():
                    file_obj.file.delete()
                    file_obj.delete()
                    files_deleted += 1
            except:
                pass

            # –í–∏–¥–∞–ª—è—î–º–æ –ª—ñ–¥
            instance.delete()
            smart_cache_invalidation()

            return api_response(
                data={
                    "deleted_lead": lead_info
                },
                meta={
                    "deleted": True,
                    "deletion_time": timezone.now(),
                    "cache_cleared": True,
                    "files_deleted": files_deleted,
                    "cleanup_performed": True
                },
                message=f"‚úÖ –õ—ñ–¥ #{lead_info['id']} –¥–ª—è {lead_info['full_name']} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ",
                status_code=200
            )
        except Exception as e:
            return api_response(
                errors={
                    "deletion_error": f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª—ñ–¥–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "lead_id": instance.id
                },
                status_code=500
            )

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def all_payments(request):
    lead_id = request.GET.get("lead_id")
    client_id = request.GET.get("client_id")
    op_type = request.GET.get("type")

    cache_key = f"payments_{lead_id}_{client_id}_{op_type}"
    cached_result = cache.get(cache_key)
    if cached_result:
        return api_response(
            data=cached_result,
            meta={
                "cache_hit": True,
                "cache_expires_in": 60
            }
        )

    payments = LeadPaymentOperation.objects.select_related('lead')

    if lead_id:
        payments = payments.filter(lead_id=lead_id)
    if client_id:
        payments = payments.filter(lead__phone__in=
                                   Client.objects.filter(id=client_id).values_list("phone", flat=True)
                                   )
    if op_type:
        payments = payments.filter(operation_type=op_type)

    payments_list = [
        {
            "id": p.id,
            "lead_id": p.lead_id,
            "type": p.operation_type,
            "amount": float(p.amount),
            "comment": p.comment,
            "created_at": p.created_at,
        } for p in payments.order_by("-created_at")
    ]

    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–∫–∏
    total_expected = sum(p['amount'] for p in payments_list if p['type'] == 'expected')
    total_received = sum(p['amount'] for p in payments_list if p['type'] == 'received')

    result = {
        "payments": payments_list
    }

    cache.set(cache_key, result, 60)

    return api_response(
        data=result,
        meta={
            "filters": {
                "lead_id": lead_id,
                "client_id": client_id,
                "operation_type": op_type
            },
            "summary": {
                "total_payments": len(payments_list),
                "total_expected": total_expected,
                "total_received": total_received,
                "balance": total_received - total_expected
            },
            "cache_expires_in": 60,
            "generated_at": timezone.now()
        }
    )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def list_managers(request):
    cache_key = "managers_list"
    cached_result = cache.get(cache_key)

    if cached_result:
        return api_response(
            data=cached_result,
            meta={
                "cache_hit": True,
                "cache_expires_in": 120
            }
        )

    managers = CustomUser.objects.select_related('user').filter(interface_type='accountant')
    serializer = ManagerSerializer(managers, many=True, context={'request': request})

    cache.set(cache_key, serializer.data, 120)

    return api_response(
        data=serializer.data,
        meta={
            "total_managers": len(serializer.data),
            "cache_expires_in": 120,
            "generated_at": timezone.now()
        }
    )


class ManagerViewSet(viewsets.ModelViewSet):
    queryset = CustomUser.objects.select_related('user').filter(interface_type='accountant')
    serializer_class = ManagerSerializer
    permission_classes = [IsAuthenticated]

    # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É JSON + multipart
    parser_classes = [MultiPartParser, FormParser, JSONParser]  # ‚Üê –î–æ–¥–∞–≤ JSONParser

    # –ê–±–æ —â–µ –∫—Ä–∞—â–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–∞—Ä—Å–µ—Ä–∏:
    # parser_classes = [JSONParser, MultiPartParser, FormParser]

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context.update({"request": self.request})
        return context

    def list(self, request, *args, **kwargs):
        """üìã –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
        queryset = self.filter_queryset(self.get_queryset())

        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–∂–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
        managers_with_stats = []
        for manager in queryset:
            serializer_data = ManagerSerializer(manager, context={'request': request}).data

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª—ñ–¥–∞—Ö
            leads_stats = Lead.objects.filter(assigned_to=manager.user).aggregate(
                total_leads=Count('id'),
                completed_leads=Count('id', filter=Q(status='completed')),
                in_work_leads=Count('id', filter=Q(status='in_work')),
                total_revenue=Sum('price', filter=Q(status='completed'))
            )

            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –¥–∞–Ω–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            serializer_data['performance'] = {
                'total_leads': leads_stats['total_leads'],
                'completed_leads': leads_stats['completed_leads'],
                'in_work_leads': leads_stats['in_work_leads'],
                'total_revenue': float(leads_stats['total_revenue'] or 0),
                'conversion_rate': round(
                    (leads_stats['completed_leads'] / leads_stats['total_leads'] * 100), 1
                ) if leads_stats['total_leads'] > 0 else 0
            }

            managers_with_stats.append(serializer_data)

        return api_response(
            data=managers_with_stats,
            meta={
                "total_managers": len(managers_with_stats),
                "active_managers": len([m for m in managers_with_stats if m['performance']['total_leads'] > 0]),
                "total_leads_managed": sum(m['performance']['total_leads'] for m in managers_with_stats),
                "generated_at": timezone.now(),
                "include_performance": True
            }
        )

    def create(self, request, *args, **kwargs):
        """‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        # üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥—É—î–º–æ —â–æ –ø—Ä–∏–π—à–ª–æ
        print(f"üì• ManagerViewSet.create: {request.content_type}")
        print(f"üìä Data: {request.data}")
        print(f"üéØ Parser: {type(request._request._stream)}")

        serializer = self.get_serializer(data=request.data)

        if not serializer.is_valid():
            print(f"‚ùå Validation errors: {serializer.errors}")
            return api_response(
                errors={
                    "validation_errors": serializer.errors,
                    "received_data": dict(request.data),
                    "content_type": request.content_type
                },
                meta={
                    "error_type": "VALIDATION_ERROR",
                    "debug_info": {
                        "parser_classes": [p.__name__ for p in self.parser_classes],
                        "content_type": request.content_type,
                        "data_keys": list(request.data.keys()) if hasattr(request.data, 'keys') else 'no_keys'
                    }
                },
                status_code=400
            )

        try:
            instance = serializer.save()
            smart_cache_invalidation()

            return api_response(
                data=serializer.data,
                meta={
                    "created": True,
                    "manager_id": instance.id,
                    "creation_time": timezone.now(),
                    "cache_cleared": True,
                    "content_type_used": request.content_type
                },
                message=f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ {instance.user.username} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                status_code=201
            )
        except Exception as e:
            print(f"‚ùå Creation error: {str(e)}")
            return api_response(
                errors={
                    "creation_error": f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "attempted_data": dict(request.data) if hasattr(request.data, 'items') else str(request.data)
                },
                status_code=500
            )

    def update(self, request, *args, **kwargs):
        """üìù –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        partial = kwargs.pop('partial', False)
        instance = self.get_object()

        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)

        try:
            old_data = {
                'username': instance.user.username,
                'interface_type': instance.interface_type
            }

            updated_instance = serializer.save()
            smart_cache_invalidation()

            return api_response(
                data=serializer.data,
                meta={
                    "updated": True,
                    "manager_id": updated_instance.id,
                    "update_time": timezone.now(),
                    "cache_cleared": True,
                    "partial_update": partial,
                    "old_data": old_data
                },
                message=f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ {updated_instance.user.username} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ"
            )
        except Exception as e:
            return api_response(
                errors={
                    "update_error": f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "manager_id": instance.id
                },
                status_code=500
            )

    def destroy(self, request, *args, **kwargs):
        """üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        instance = self.get_object()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª—ñ–¥—ñ–≤
        active_leads_count = Lead.objects.filter(
            assigned_to=instance.user,
            status__in=['queued', 'in_work', 'preparation']
        ).count()

        if active_leads_count > 0:
            return api_response(
                errors={
                    "deletion_blocked": f"–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑ {active_leads_count} –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ª—ñ–¥–∞–º–∏",
                    "active_leads": active_leads_count,
                    "solution": "–°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á—Ç–µ –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ –ª—ñ–¥–∏"
                },
                meta={
                    "manager_id": instance.id,
                    "manager_username": instance.user.username,
                    "check_time": timezone.now()
                },
                status_code=422
            )

        try:
            manager_info = {
                "id": instance.id,
                "username": instance.user.username,
                "email": instance.user.email,
                "interface_type": instance.interface_type
            }

            # –í–∏–¥–∞–ª—è—î–º–æ
            instance.delete()
            smart_cache_invalidation()

            return api_response(
                data={
                    "deleted_manager": manager_info
                },
                meta={
                    "deleted": True,
                    "deletion_time": timezone.now(),
                    "cache_cleared": True
                },
                message=f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_info['username']} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ",
                status_code=200
            )
        except Exception as e:
            return api_response(
                errors={
                    "deletion_error": f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {str(e)}",
                    "details": str(e)
                },
                meta={
                    "error_time": timezone.now(),
                    "manager_id": instance.id
                },
                status_code=500
            )

    def retrieve(self, request, *args, **kwargs):
        """üë§ –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        instance = self.get_object()
        serializer = self.get_serializer(instance)

        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        leads_stats = Lead.objects.filter(assigned_to=instance.user).aggregate(
            total_leads=Count('id'),
            completed_leads=Count('id', filter=Q(status='completed')),
            in_work_leads=Count('id', filter=Q(status='in_work')),
            queued_leads=Count('id', filter=Q(status='queued')),
            declined_leads=Count('id', filter=Q(status='declined')),
            total_revenue=Sum('price', filter=Q(status='completed')),
            avg_check=Avg('price', filter=Q(status='completed'))
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—è—Ü—è—Ö (–æ—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤)
        monthly_stats = []
        for i in range(6):
            month_start = timezone.now().replace(day=1) - timedelta(days=30 * i)
            month_end = (month_start + timedelta(days=32)).replace(day=1) - timedelta(days=1)

            month_data = Lead.objects.filter(
                assigned_to=instance.user,
                created_at__date__range=[month_start.date(), month_end.date()]
            ).aggregate(
                leads=Count('id'),
                completed=Count('id', filter=Q(status='completed')),
                revenue=Sum('price', filter=Q(status='completed'))
            )

            monthly_stats.append({
                'month': month_start.strftime('%Y-%m'),
                'leads': month_data['leads'],
                'completed': month_data['completed'],
                'revenue': float(month_data['revenue'] or 0)
            })

        # –û–±'—î–¥–Ω—É—î–º–æ –¥–∞–Ω—ñ
        response_data = serializer.data
        response_data['detailed_stats'] = {
            'overall': {
                'total_leads': leads_stats['total_leads'],
                'completed_leads': leads_stats['completed_leads'],
                'in_work_leads': leads_stats['in_work_leads'],
                'queued_leads': leads_stats['queued_leads'],
                'declined_leads': leads_stats['declined_leads'],
                'total_revenue': float(leads_stats['total_revenue'] or 0),
                'avg_check': float(leads_stats['avg_check'] or 0),
                'conversion_rate': round(
                    (leads_stats['completed_leads'] / leads_stats['total_leads'] * 100), 1
                ) if leads_stats['total_leads'] > 0 else 0
            },
            'monthly_performance': monthly_stats
        }

        return api_response(
            data=response_data,
            meta={
                "manager_id": instance.id,
                "data_includes": ["basic_info", "detailed_stats", "monthly_performance"],
                "stats_period": "6 months",
                "generated_at": timezone.now()
            }
        )


class CreateLeadView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        """üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ª—ñ–¥–∞ —á–µ—Ä–µ–∑ API"""
        print(f"üì• CREATE API: –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {request.data}")

        serializer = LeadSerializer(data=request.data)
        if not serializer.is_valid():
            return api_response(
                errors={
                    "validation_errors": serializer.errors,
                    "error_type": "SERIALIZER_VALIDATION"
                },
                status_code=400
            )

        order_number = serializer.validated_data.get('order_number')

        # üõ°Ô∏è –ü–ï–†–ï–í–Ü–†–ö–ê –ü–û –ù–û–ú–ï–†–£ –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
        if order_number:
            existing = Lead.objects.filter(order_number=order_number).first()
            if existing:
                print(f"üö´ –î–£–ë–õ–Ü–ö–ê–¢! –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_number} –≤–∂–µ —î –≤ –ª—ñ–¥—ñ #{existing.id}")
                return api_response(
                    errors={
                        "duplicate_error": {
                            "type": "ORDER_NUMBER_EXISTS",
                            "message": f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_number} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è",
                            "existing_lead": {
                                "id": existing.id,
                                "full_name": existing.full_name,
                                "phone": existing.phone,
                                "created_at": existing.created_at,
                                "status": existing.status,
                                "assigned_to": existing.assigned_to.username if existing.assigned_to else None
                            }
                        }
                    },
                    meta={
                        "duplicate_check": {
                            "order_number": order_number,
                            "check_time": timezone.now(),
                            "existing_lead_id": existing.id
                        }
                    },
                    status_code=409
                )

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–¥
        try:
            lead = serializer.save()
            print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ª—ñ–¥ #{lead.id} –∑ –Ω–æ–º–µ—Ä–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_number}")

            # –û—á–∏—â—É—î–º–æ –∫–µ—à
            smart_cache_invalidation(
                lead_id=lead.id,
                manager_id=lead.assigned_to.id if lead.assigned_to else None
            )

            lead_data = {
                "id": lead.id,
                "full_name": lead.full_name,
                "phone": lead.phone,
                "order_number": order_number,
                "status": lead.status,
                "price": float(lead.price or 0),
                "assigned_to": lead.assigned_to.username if lead.assigned_to else None,
                "created_at": lead.created_at,
                "source": getattr(lead, 'source', 'manual_creation')
            }

            return api_response(
                data={
                    "lead": lead_data
                },
                meta={
                    "created": True,
                    "creation_method": "manual_api",
                    "processing_time": timezone.now(),
                    "cache_cleared": True,
                    "lead_id": lead.id
                },
                message=f"‚úÖ –õ—ñ–¥ #{lead.id} —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è {lead.full_name}",
                status_code=201
            )

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–¥–∞: {str(e)}")
            return api_response(
                errors={
                    "creation_error": {
                        "type": "DATABASE_ERROR",
                        "message": f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª—ñ–¥: {str(e)}",
                        "details": str(e)
                    }
                },
                meta={
                    "error_time": timezone.now(),
                    "attempted_data": serializer.validated_data
                },
                status_code=500
            )


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def check_lead_duplicate(request):
    """
    üîç Endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —î –ª—ñ–¥ –¥—É–±–ª—ñ–∫–∞—Ç–æ–º –ë–ï–ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    """
    phone = request.data.get('phone')
    full_name = request.data.get('full_name')
    order_number = request.data.get('order_number')

    if not phone:
        return api_response(
            errors={"phone": "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤"},
            status_code=400
        )

    is_duplicate, existing_lead = check_duplicate_lead(
        phone=phone,
        full_name=full_name,
        order_number=order_number
    )

    normalized_phone = Client.normalize_phone(phone) if phone else None

    duplicate_check_data = {
        "is_duplicate": is_duplicate,
        "search_criteria": {
            "phone": phone,
            "normalized_phone": normalized_phone,
            "full_name": full_name,
            "order_number": order_number
        },
        "existing_lead": None
    }

    if existing_lead:
        duplicate_check_data["existing_lead"] = {
            "id": existing_lead.id,
            "full_name": existing_lead.full_name,
            "phone": existing_lead.phone,
            "order_number": getattr(existing_lead, 'order_number', None),
            "status": existing_lead.status,
            "created_at": existing_lead.created_at,
            "assigned_to": existing_lead.assigned_to.username if existing_lead.assigned_to else None,
            "price": float(existing_lead.price or 0)
        }

    meta_info = {
        "check_performed_at": timezone.now(),
        "check_method": "phone_name_order_combination",
        "time_window_checked": "30 minutes",
        "duplicate_found": is_duplicate
    }

    if is_duplicate:
        meta_info["duplicate_reason"] = "–ó–Ω–∞–π–¥–µ–Ω–æ –ª—ñ–¥ –∑ —Ç–∞–∫–∏–º –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —Ç–∞/–∞–±–æ –Ω–æ–º–µ—Ä–æ–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        meta_info["recommendation"] = "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ—Å–Ω—É—é—á–∏–π –ª—ñ–¥ –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å –¥–∞–Ω—ñ"
        message = f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç! –õ—ñ–¥ #{existing_lead.id} –≤–∂–µ —ñ—Å–Ω—É—î"
    else:
        meta_info["recommendation"] = "–ú–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –ª—ñ–¥"
        message = "‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ª—ñ–¥ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏"

    return api_response(
        data=duplicate_check_data,
        meta=meta_info,
        message=message
    )


class ClientInteractionViewSet(viewsets.ModelViewSet):
    serializer_class = ClientInteractionSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        queryset = ClientInteraction.objects.select_related(
            'client', 'created_by'
        ).order_by('-created_at')

        client_id = self.request.query_params.get('client_id')
        if client_id:
            queryset = queryset.filter(client_id=client_id)

        return queryset

    def list(self, request, *args, **kwargs):
        """–°–ø–∏—Å–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ–π"""
        queryset = self.filter_queryset(self.get_queryset())

        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            paginated_response = self.get_paginated_response(serializer.data)

            return api_response(
                data=paginated_response.data['results'],
                meta={
                    "pagination": {
                        "count": paginated_response.data['count'],
                        "next": paginated_response.data['next'],
                        "previous": paginated_response.data['previous']
                    },
                    "total_interactions": queryset.count()
                }
            )

        serializer = self.get_serializer(queryset, many=True)
        return api_response(
            data=serializer.data,
            meta={
                "total_interactions": queryset.count(),
                "filtered_count": len(serializer.data)
            }
        )

    def create(self, request, *args, **kwargs):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó"""
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        instance = serializer.save(created_by=request.user)

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
        client = instance.client
        client.last_contact_date = timezone.now()
        client.save()

        return api_response(
            data=serializer.data,
            meta={
                "created": True,
                "interaction_id": instance.id,
                "client_updated": True
            },
            message="–í–∑–∞—î–º–æ–¥—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
            status_code=status.HTTP_201_CREATED
        )


class ClientTaskViewSet(viewsets.ModelViewSet):
    serializer_class = ClientTaskSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        queryset = ClientTask.objects.select_related(
            'client', 'assigned_to'
        ).order_by('due_date')

        client_id = self.request.query_params.get('client_id')
        task_status = self.request.query_params.get('status')
        assigned_to_me = self.request.query_params.get('assigned_to_me')

        if client_id:
            queryset = queryset.filter(client_id=client_id)
        if task_status:
            queryset = queryset.filter(status=task_status)
        if assigned_to_me == 'true':
            queryset = queryset.filter(assigned_to=self.request.user)

        return queryset

    def list(self, request, *args, **kwargs):
        """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        queryset = self.filter_queryset(self.get_queryset())

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞—Ö
        overdue_count = queryset.filter(
            due_date__lt=timezone.now(),
            status__in=['pending', 'in_progress']
        ).count()

        urgent_count = queryset.filter(
            priority='urgent',
            status__in=['pending', 'in_progress']
        ).count()

        serializer = self.get_serializer(queryset, many=True)

        return api_response(
            data=serializer.data,
            meta={
                "total_tasks": queryset.count(),
                "overdue_tasks": overdue_count,
                "urgent_tasks": urgent_count,
                "filters_applied": {
                    "client_id": request.query_params.get('client_id'),
                    "status": request.query_params.get('status'),
                    "assigned_to_me": request.query_params.get('assigned_to_me')
                }
            }
        )

    def create(self, request, *args, **kwargs):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ"""
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        instance = serializer.save()

        return api_response(
            data=serializer.data,
            meta={
                "created": True,
                "task_id": instance.id,
                "due_in_hours": (instance.due_date - timezone.now()).total_seconds() / 3600
            },
            message="–ó–∞–¥–∞—á—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
            status_code=status.HTTP_201_CREATED
        )

    @action(detail=False, methods=['get'], url_path='my-tasks')
    def my_tasks(self, request):
        """GET /api/tasks/my-tasks/"""
        tasks = ClientTask.objects.filter(
            assigned_to=request.user,
            status__in=['pending', 'in_progress']
        ).order_by('due_date')[:10]

        tasks_data = [
            {
                'id': task.id,
                'title': task.title,
                'client_name': task.client.full_name,
                'client_phone': task.client.phone,
                'priority': task.priority,
                'due_date': task.due_date,
                'is_overdue': task.due_date < timezone.now()
            }
            for task in tasks
        ]

        return api_response(
            data={
                "tasks": tasks_data
            },
            meta={
                "user": request.user.username,
                "total_my_tasks": len(tasks_data),
                "overdue_count": sum(1 for task in tasks_data if task['is_overdue'])
            }
        )

    @action(detail=False, methods=['get'], url_path='overdue-tasks')
    def overdue_tasks(self, request):
        """GET /api/tasks/overdue-tasks/"""
        overdue = ClientTask.objects.filter(
            due_date__lt=timezone.now(),
            status__in=['pending', 'in_progress']
        ).order_by('due_date')

        overdue_data = [
            {
                'id': task.id,
                'title': task.title,
                'client_name': task.client.full_name,
                'assigned_to': task.assigned_to.username,
                'due_date': task.due_date,
                'days_overdue': (timezone.now() - task.due_date).days
            }
            for task in overdue
        ]

        return api_response(
            data={
                "overdue_tasks": overdue_data
            },
            meta={
                "total_overdue": len(overdue_data),
                "most_overdue_days": max((task['days_overdue'] for task in overdue_data), default=0)
            }
        )


# üî• –ù–û–í–ò–ô API –î–õ–Ø CRM –î–ê–®–ë–û–†–î–£
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def crm_dashboard(request):
    """üéØ –ì–æ–ª–æ–≤–Ω–∏–π CRM –¥–∞—à–±–æ—Ä–¥"""
    cache_key = f"crm_dashboard_{request.user.id}"
    cached_result = cache.get(cache_key)

    if cached_result:
        return api_response(
            data=cached_result,
            meta={
                "cache_hit": True,
                "cache_expires_in": 300,
                "user_id": request.user.id
            }
        )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
    clients_stats = Client.objects.aggregate(
        total_clients=Count('id'),
        akb_clients=Count('id', filter=Q(total_orders__gt=0)),
        cold_leads=Count('id', filter=Q(temperature='cold')),
        warm_leads=Count('id', filter=Q(temperature='warm')),
        hot_leads=Count('id', filter=Q(temperature='hot')),
        sleeping_clients=Count('id', filter=Q(temperature='sleeping')),
        total_revenue=Sum('total_spent'),
        avg_ltv=Avg('total_spent', filter=Q(total_orders__gt=0))
    )

    # –¢–û–ü –∫–ª—ñ—î–Ω—Ç–∏
    top_clients = Client.objects.filter(
        total_orders__gt=0
    ).order_by('-total_spent')[:5]

    # –†–∏–∑–∏–∫–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏
    churn_risk_clients = Client.objects.filter(
        Q(temperature='sleeping') | Q(rfm_recency__gt=180),
        total_orders__gt=0
    ).count()

    # –ó–∞–¥–∞—á—ñ —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏
    my_urgent_tasks = ClientTask.objects.filter(
        assigned_to=request.user,
        status__in=['pending', 'in_progress'],
        due_date__lte=timezone.now() + timedelta(days=1)
    ).count()

    # –ö–æ–Ω–≤–µ—Ä—Å—ñ—è –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ñ
    temperature_conversion = {}
    for temp_code, temp_name in Client.TEMPERATURE_CHOICES:
        clients_count = Client.objects.filter(temperature=temp_code).count()
        if clients_count > 0:
            converted = Client.objects.filter(
                temperature=temp_code,
                total_orders__gt=0
            ).count()
            temperature_conversion[temp_code] = {
                'name': temp_name,
                'total': clients_count,
                'converted': converted,
                'conversion_rate': round((converted / clients_count) * 100, 1)
            }

    # –ù–µ–¥–∞–≤–Ω—ñ –≤–∑–∞—î–º–æ–¥—ñ—ó
    recent_interactions = ClientInteraction.objects.select_related(
        'client', 'created_by'
    ).order_by('-created_at')[:5]

    result = {
        'summary': {
            'total_clients': clients_stats['total_clients'],
            'akb_clients': clients_stats['akb_clients'],
            'hot_leads': clients_stats['hot_leads'],
            'churn_risk': churn_risk_clients,
            'total_revenue': float(clients_stats['total_revenue'] or 0),
            'avg_ltv': float(clients_stats['avg_ltv'] or 0),
            'urgent_tasks': my_urgent_tasks
        },
        'temperature_breakdown': {
            'cold': clients_stats['cold_leads'],
            'warm': clients_stats['warm_leads'],
            'hot': clients_stats['hot_leads'],
            'sleeping': clients_stats['sleeping_clients']
        },
        'temperature_conversion': temperature_conversion,
        'top_clients': [
            {
                'id': c.id,
                'name': c.full_name,
                'total_spent': float(c.total_spent),
                'segment': c.akb_segment,
                'rfm_score': c.rfm_score
            }
            for c in top_clients
        ],
        'recent_interactions': [
            {
                'id': i.id,
                'client_name': i.client.full_name,
                'type': i.interaction_type,
                'subject': i.subject,
                'outcome': i.outcome,
                'created_at': i.created_at,
                'created_by': i.created_by.username
            }
            for i in recent_interactions
        ]
    }

    cache.set(cache_key, result, 300)

    return api_response(
        data=result,
        meta={
            "dashboard_for": request.user.username,
            "cache_expires_in": 300,
            "generated_at": timezone.now(),
            "data_freshness": "5 minutes"
        }
    )


# üî• –ú–ê–°–û–í–ï –û–ù–û–í–õ–ï–ù–ù–Ø –ú–ï–¢–†–ò–ö –ö–õ–Ü–Ñ–ù–¢–Ü–í
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def update_all_client_metrics(request):
    """üîÑ –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    if not request.user.is_staff:
        return api_response(
            errors={'permission': '–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –∑–∞–ø—É—Å–∫–∞—Ç–∏ –º–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è'},
            status_code=403
        )

    updated_count = 0
    errors = []

    for client in Client.objects.all():
        try:
            client.update_client_metrics()
            updated_count += 1
        except Exception as e:
            errors.append(f"–ö–ª—ñ—î–Ω—Ç {client.id}: {str(e)}")

    return api_response(
        data={
            "updated_count": updated_count,
            "errors": errors[:10]  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10 –ø–æ–º–∏–ª–æ–∫
        },
        meta={
            "total_clients": Client.objects.count(),
            "success_rate": round((updated_count / Client.objects.count() * 100), 2),
            "update_timestamp": timezone.now()
        },
        message=f'–û–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {updated_count} –∫–ª—ñ—î–Ω—Ç—ñ–≤'
    )


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–î–ê–ß –ü–û –ö–õ–Ü–Ñ–ù–¢–ê–•
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_follow_up_tasks(request):
    """üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á –¥–ª—è follow-up"""

    # –ö–ª—ñ—î–Ω—Ç–∏ —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    sleeping_clients = Client.objects.filter(
        temperature='sleeping',
        total_orders__gt=0
    ).exclude(
        tasks__status__in=['pending', 'in_progress'],
        tasks__title__icontains='—Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è'
    )

    # –ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏ —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏
    hot_leads = Client.objects.filter(
        temperature='hot'
    ).exclude(
        tasks__status__in=['pending', 'in_progress'],
        tasks__title__icontains='–∫–æ–Ω—Ç–∞–∫—Ç'
    )

    created_tasks = []

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—ñ –¥–ª—è —Å–ø–ª—è—á–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    for client in sleeping_clients:
        task = ClientTask.objects.create(
            client=client,
            title=f'–†–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name}',
            description=f'–ö–ª—ñ—î–Ω—Ç –Ω–µ –∫—É–ø—É–≤–∞–≤ {client.rfm_recency} –¥–Ω—ñ–≤. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {client.total_spent} –≥—Ä–Ω.',
            assigned_to=client.assigned_to or request.user,
            priority='medium',
            due_date=timezone.now() + timedelta(days=3)
        )
        created_tasks.append({
            'id': task.id,
            'type': 'reactivation',
            'title': task.title,
            'client': task.client.full_name,
            'priority': task.priority,
            'due_date': task.due_date
        })

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—ñ –¥–ª—è –≥–∞—Ä—è—á–∏—Ö –ª—ñ–¥—ñ–≤
    for client in hot_leads:
        task = ClientTask.objects.create(
            client=client,
            title=f'–¢–ï–†–ú–Ü–ù–û–í–ò–ô –∫–æ–Ω—Ç–∞–∫—Ç: {client.full_name}',
            description=f'–ì–∞—Ä—è—á–∏–π –ª—ñ–¥! {client.next_contact_recommendation}',
            assigned_to=client.assigned_to or request.user,
            priority='urgent',
            due_date=timezone.now() + timedelta(hours=24)
        )
        created_tasks.append({
            'id': task.id,
            'type': 'hot_lead',
            'title': task.title,
            'client': task.client.full_name,
            'priority': task.priority,
            'due_date': task.due_date
        })

    return api_response(
        data={
            "created_tasks": created_tasks
        },
        meta={
            "total_created": len(created_tasks),
            "sleeping_clients_tasks": len(sleeping_clients),
            "hot_leads_tasks": len(hot_leads),
            "creation_timestamp": timezone.now()
        },
        message=f'–°—Ç–≤–æ—Ä–µ–Ω–æ {len(created_tasks)} –Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á'
    )


# üî• –°–ï–ì–ú–ï–ù–¢–ê–¶–Ü–Ø –ö–õ–Ü–Ñ–ù–¢–Ü–í –î–õ–Ø –ú–ê–†–ö–ï–¢–ò–ù–ì–£
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def client_segments_for_marketing(request):
    """üéØ –°–µ–≥–º–µ–Ω—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π"""

    # VIP –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π
    vip_clients = Client.objects.filter(akb_segment='vip')

    # –ö–ª—ñ—î–Ω—Ç–∏ –∑ —Ä–∏–∑–∏–∫–æ–º –≤—ñ–¥—Ç–æ–∫—É –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    churn_risk = Client.objects.filter(
        temperature='sleeping',
        total_spent__gte=5000
    )

    # –õ–æ—è–ª—å–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ
    loyal_clients = Client.objects.filter(
        temperature='loyal',
        total_orders__gte=3
    )

    # –ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É
    new_customers = Client.objects.filter(
        total_orders=1,
        first_purchase_date__gte=timezone.now() - timedelta(days=30)
    )

    segments_data = {
        'vip_clients': {
            'count': vip_clients.count(),
            'description': 'VIP –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π',
            'avg_spent': float(vip_clients.aggregate(avg=Avg('total_spent'))['avg'] or 0),
            'clients': [
                {'id': c.id, 'name': c.full_name, 'phone': c.phone, 'total_spent': float(c.total_spent)}
                for c in vip_clients[:5]
            ]
        },
        'churn_risk': {
            'count': churn_risk.count(),
            'description': '–¶—ñ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ –∑ —Ä–∏–∑–∏–∫–æ–º –≤—ñ–¥—Ç–æ–∫—É',
            'potential_loss': float(churn_risk.aggregate(total=Sum('total_spent'))['total'] or 0),
            'clients': [
                {
                    'id': c.id,
                    'name': c.full_name,
                    'phone': c.phone,
                    'days_inactive': c.rfm_recency,
                    'total_spent': float(c.total_spent)
                }
                for c in churn_risk[:5]
            ]
        },
        'loyal_clients': {
            'count': loyal_clients.count(),
            'description': '–õ–æ—è–ª—å–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ',
            'avg_orders': float(loyal_clients.aggregate(avg=Avg('total_orders'))['avg'] or 0),
            'clients': [
                {
                    'id': c.id,
                    'name': c.full_name,
                    'phone': c.phone,
                    'total_orders': c.total_orders
                }
                for c in loyal_clients[:5]
            ]
        },
        'new_customers': {
            'count': new_customers.count(),
            'description': '–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É',
            'total_revenue': float(new_customers.aggregate(total=Sum('total_spent'))['total'] or 0),
            'clients': [
                {
                    'id': c.id,
                    'name': c.full_name,
                    'phone': c.phone,
                    'first_purchase': c.first_purchase_date
                }
                for c in new_customers[:5]
            ]
        }
    }

    return api_response(
        data={
            "segments": segments_data
        },
        meta={
            "total_segments": len(segments_data),
            "analysis_date": timezone.now(),
            "segments_summary": {
                segment: data['count']
                for segment, data in segments_data.items()
            }
        }
    )


def get_viewset_method(viewset_class, method_name):
    """
    üîß –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ViewSet –º–µ—Ç–æ–¥—ñ–≤ —è–∫ –æ–∫—Ä–µ–º–∏—Ö view
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –º–µ—Ç–æ–¥ ViewSet –≤ –∑–≤–∏—á–∞–π–Ω—É Django view —Ñ—É–Ω–∫—Ü—ñ—é
    """

    def view_func(request, **kwargs):
        try:
            viewset = viewset_class()
            viewset.request = request
            viewset.format_kwarg = None

            # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–ª–∏–∫
            result = getattr(viewset, method_name)(request, **kwargs)

            # –Ø–∫—â–æ —Ü–µ Response –æ–±'—î–∫—Ç - –¥–æ–¥–∞—î–º–æ –º–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            if hasattr(result, 'data') and isinstance(result.data, dict):
                if 'meta' not in result.data:
                    result.data['meta'] = {}

                result.data['meta'].update({
                    "viewset_method": f"{viewset_class.__name__}.{method_name}",
                    "called_at": timezone.now(),
                    "request_method": request.method
                })

            return result

        except Exception as e:
            return api_response(
                errors={
                    "viewset_error": f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—É {method_name}",
                    "details": str(e),
                    "viewset_class": viewset_class.__name__
                },
                meta={
                    "error_time": timezone.now(),
                    "attempted_method": method_name
                },
                status_code=500
            )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ—Ç–∞—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    view_func.__name__ = f"{viewset_class.__name__}_{method_name}_view"
    view_func.__doc__ = f"Wrapped ViewSet method: {viewset_class.__name__}.{method_name}"

    return view_func


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def lead_statuses(request):
    """üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤ –ª—ñ–¥—ñ–≤"""

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ç—É—Å–∏ –∑ –º–æ–¥–µ–ª—ñ Lead
    status_choices = Lead.STATUS_CHOICES

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å—ñ–≤
    statuses_data = [
        {
            "code": status_code,
            "name": status_name
        }
        for status_code, status_name in status_choices
    ]

    return api_response(
        data={
            "statuses": statuses_data
        },
        meta={
            "total_statuses": len(status_choices),
            "generated_at": timezone.now()
        }
    )
