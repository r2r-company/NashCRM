# backend/serializers.py - –û–ù–û–í–õ–ï–ù–ò–ô LeadSerializer

from django.contrib.auth import get_user_model
from django.contrib.auth.models import User
from rest_framework import serializers
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer

from .models import Lead, Client, CustomUser, LeadFile, ClientInteraction, ClientTask
from .validators.lead_status_validator import LeadStatusValidator, validate_lead_status_change


class LeadFileSerializer(serializers.ModelSerializer):
    class Meta:
        model = LeadFile
        fields = ['id', 'file', 'uploaded_at']


class LeadSerializer(serializers.ModelSerializer):
    assigned_to_username = serializers.CharField(source='assigned_to.username', read_only=True)
    files = LeadFileSerializer(many=True, read_only=True)

    # üöÄ –î–û–î–ê–Ñ–ú–û –ü–û–õ–Ø –î–õ–Ø –í–ê–õ–Ü–î–ê–¶–Ü–á –°–¢–ê–¢–£–°–Ü–í
    available_statuses = serializers.SerializerMethodField(read_only=True)
    payment_info = serializers.SerializerMethodField(read_only=True)
    next_action = serializers.SerializerMethodField(read_only=True)

    class Meta:
        model = Lead
        fields = '__all__'

    def get_available_statuses(self, obj):
        """–î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É"""
        if obj and obj.status:
            allowed = LeadStatusValidator.get_allowed_transitions(obj.status, obj)
            return [
                {
                    'code': status,
                    'name': LeadStatusValidator.STATUS_NAMES.get(status, status)
                }
                for status in allowed
            ]
        return []

    def get_payment_info(self, obj):
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç–µ–∂—ñ"""
        if obj:
            return LeadStatusValidator.get_payment_info(obj)
        return {}

    def get_next_action(self, obj):
        """–ù–∞—Å—Ç—É–ø–Ω–∞ –¥—ñ—è –¥–ª—è –ª—ñ–¥–∞"""
        if obj:
            return LeadStatusValidator.get_next_required_action(obj)
        return ""

    def validate_status(self, value):
        """üî• –í–ê–õ–Ü–î–ê–¶–Ü–Ø –°–¢–ê–¢–£–°–£ –ü–†–ò –û–ù–û–í–õ–ï–ù–ù–Ü"""
        # –¢—ñ–ª—å–∫–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ª—ñ–¥—ñ–≤ (update)
        if self.instance:
            current_status = self.instance.status

            # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è - –≤—Å–µ –æ–∫
            if current_status == value:
                return value

            print(f"üîç –í–ê–õ–Ü–î–ê–¶–Ü–Ø: {current_status} ‚Üí {value}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–ª–∏–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥
            can_transition, reason = LeadStatusValidator.can_transition(
                current_status, value, self.instance
            )

            if not can_transition:
                print(f"‚ùå –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ù–ï –ü–†–û–ô–®–õ–ê: {reason}")

                # üî• –î–ï–¢–ê–õ–¨–ù–ï –ü–û–Ø–°–ù–ï–ù–ù–Ø –î–õ–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê
                available_transitions = LeadStatusValidator.get_allowed_transitions(current_status, self.instance)

                # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
                detailed_explanation = self._get_detailed_status_explanation(current_status, value, self.instance)

                raise serializers.ValidationError({
                    'status': {
                        'error_type': 'STATUS_TRANSITION_BLOCKED',
                        'message': reason,
                        'detailed_explanation': detailed_explanation,
                        'current_status': {
                            'code': current_status,
                            'name': LeadStatusValidator.STATUS_NAMES.get(current_status)
                        },
                        'attempted_status': {
                            'code': value,
                            'name': LeadStatusValidator.STATUS_NAMES.get(value)
                        },
                        'available_statuses': [
                            {
                                'code': status,
                                'name': LeadStatusValidator.STATUS_NAMES.get(status),
                                'description': LeadStatusValidator._get_transition_description(current_status, status)
                            }
                            for status in available_transitions
                        ],
                        'required_action': LeadStatusValidator.get_next_required_action(self.instance),
                        'business_rules': self._get_business_rules_explanation(current_status, value)
                    }
                })

            print(f"‚úÖ –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ü–†–û–ô–®–õ–ê: {reason}")

        return value

    def validate(self, attrs):
        """–î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞"""
        # –Ø–∫—â–æ —Ü–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ –∑–º—ñ–Ω—é—î—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å
        if self.instance and 'status' in attrs:
            new_status = attrs['status']

            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è completed
            if new_status == 'completed':
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ü—ñ–Ω–∞
                price = attrs.get('price', self.instance.price)
                if not price or price <= 0:
                    raise serializers.ValidationError({
                        'status': '–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ª—ñ–¥ –±–µ–∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–Ω–∏'
                    })

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞
                if not LeadStatusValidator.is_fully_paid(self.instance):
                    payment_info = LeadStatusValidator.get_payment_info(self.instance)
                    raise serializers.ValidationError({
                        'status': f'–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ - –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î {payment_info["shortage"]} –≥—Ä–Ω',
                        'payment_details': payment_info
                    })

        return attrs

    def update(self, instance, validated_data):
        """üî• –ü–ï–†–ï–ü–ò–°–£–Ñ–ú–û –ú–ï–¢–û–î UPDATE –î–õ–Ø –õ–û–ì–£–í–ê–ù–ù–Ø"""
        old_status = instance.status
        new_status = validated_data.get('status', old_status)

        print(f"üìù –°–ï–†–Ü–ê–õ–Ü–ó–ê–¢–û–† UPDATE: –õ—ñ–¥ #{instance.pk}")
        print(f"   –°—Ç–∞—Ç—É—Å: {old_status} ‚Üí {new_status}")

        # –í–∏–∫–æ–Ω—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        updated_instance = super().update(instance, validated_data)

        # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è - –ª–æ–≥—É—î–º–æ
        if old_status != new_status:
            print(f"‚úÖ –°–¢–ê–¢–£–° –ó–ú–Ü–ù–ï–ù–û: #{updated_instance.pk} - {old_status} ‚Üí {new_status}")
            print(f"   Django signals —Å–ø—Ä–∞—Ü—é—é—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!")

        return updated_instance

    def _get_detailed_status_explanation(self, current_status: str, attempted_status: str, lead) -> str:
        """
        üî• –î–ï–¢–ê–õ–¨–ù–ï –ü–û–Ø–°–ù–ï–ù–ù–Ø –ß–û–ú–£ –ü–ï–†–ï–•–Ü–î –ù–ï–ú–û–ñ–õ–ò–í–ò–ô
        """
        if current_status == 'preparation' and attempted_status == 'warehouse_processing':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–ª–∞—Ç—ñ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏
            from backend.models import LeadPaymentOperation
            has_payments = LeadPaymentOperation.objects.filter(lead=lead).exists()

            if not has_payments:
                return (
                    "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥ –±–µ–∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤!\n\n"
                    "üìã –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:\n"
                    "1. –î–æ–¥–∞–π—Ç–µ –∑–∞–ø–∏—Å –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –æ–ø–ª–∞—Ç—É:\n"
                    f"   POST /api/leads/{lead.id}/add-payment/\n"
                    "   {\n"
                    "     \"operation_type\": \"expected\",\n"
                    f"     \"amount\": {lead.price or '–¶–Ü–ù–ê_–õ–Ü–î–ê'},\n"
                    "     \"comment\": \"–û—á—ñ–∫—É—î—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞\"\n"
                    "   }\n\n"
                    "2. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –º–æ–∂–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥\n\n"
                    "üí° –¶–µ –∑–∞—Ö–∏—â–∞—î –≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É –±–µ–∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é"
                )

        elif attempted_status == 'completed':
            payment_info = LeadStatusValidator.get_payment_info(lead)
            if payment_info['shortage'] > 0:
                return (
                    f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ - –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î {payment_info['shortage']} –≥—Ä–Ω!\n\n"
                    "üìã –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:\n"
                    "1. –î–æ–¥–∞–π—Ç–µ –ø–ª–∞—Ç—ñ–∂ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
                    f"   POST /api/leads/{lead.id}/add-payment/\n"
                    "   {\n"
                    "     \"operation_type\": \"received\",\n"
                    f"     \"amount\": {payment_info['shortage']},\n"
                    "     \"comment\": \"–î–æ–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞\"\n"
                    "   }\n\n"
                    f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –æ–ø–ª–∞—Ç:\n"
                    f"   –¶—ñ–Ω–∞ –ª—ñ–¥–∞: {payment_info['price']} –≥—Ä–Ω\n"
                    f"   –û—Ç—Ä–∏–º–∞–Ω–æ: {payment_info['received']} –≥—Ä–Ω\n"
                    f"   –ù–µ –≤–∏—Å—Ç–∞—á–∞—î: {payment_info['shortage']} –≥—Ä–Ω"
                )

        elif current_status == 'queued' and attempted_status not in ['in_work', 'declined']:
            return (
                "‚ùå –ó —á–µ—Ä–≥–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ —Ä–æ–±–æ—Ç—É –∞–±–æ –≤—ñ–¥–º–æ–≤–∏—Ç–∏!\n\n"
                "üìã –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å:\n"
                "1. queued ‚Üí in_work (–º–µ–Ω–µ–¥–∂–µ—Ä –±–µ—Ä–µ –≤ —Ä–æ–±–æ—Ç—É)\n"
                "2. in_work ‚Üí awaiting_prepayment (–ø–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É)\n"
                "3. awaiting_prepayment ‚Üí preparation (–ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤–∞–Ω—Å—É)\n\n"
                "üí° –ù–µ –º–æ–∂–Ω–∞ '–ø–µ—Ä–µ—Å—Ç—Ä–∏–±—É–≤–∞—Ç–∏' —á–µ—Ä–µ–∑ –µ—Ç–∞–ø–∏!"
            )

        return f"–ü–µ—Ä–µ—Ö—ñ–¥ –∑ '{LeadStatusValidator.STATUS_NAMES.get(current_status)}' –≤ '{LeadStatusValidator.STATUS_NAMES.get(attempted_status)}' –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º–∏"

    def _get_business_rules_explanation(self, current_status: str, attempted_status: str) -> dict:
        """
        üî• –ü–û–Ø–°–ù–ï–ù–ù–Ø –ë–Ü–ó–ù–ï–°-–ü–†–ê–í–ò–õ
        """
        rules = {
            'preparation_to_warehouse': {
                'rule': '–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é –Ω–∞ —Å–∫–ª–∞–¥ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–∞–ø–∏—Å–∏',
                'reason': '–ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—é –æ–ø–ª–∞—Ç',
                'required': '–ú—ñ–Ω—ñ–º—É–º –æ–¥–∏–Ω –∑–∞–ø–∏—Å —É LeadPaymentOperation'
            },
            'any_to_completed': {
                'rule': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ–≤–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ',
                'reason': '–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å - –Ω–µ –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ –±–æ—Ä–≥–∏',
                'required': '–°—É–º–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ >= —Ü—ñ–Ω–∞ –ª—ñ–¥–∞'
            },
            'sequential_flow': {
                'rule': '–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –ø–æ –µ—Ç–∞–ø–∞—Ö',
                'reason': '–ö–æ–∂–µ–Ω –µ—Ç–∞–ø –º–∞—î —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏—Ö',
                'required': '–ù–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—Ç—Ä–∏–±—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –µ—Ç–∞–ø–∏'
            }
        }

        if current_status == 'preparation' and attempted_status == 'warehouse_processing':
            return rules['preparation_to_warehouse']
        elif attempted_status == 'completed':
            return rules['any_to_completed']
        else:
            return rules['sequential_flow']


# –í—Å—ñ —ñ–Ω—à—ñ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
class ClientSerializer(serializers.ModelSerializer):
    assigned_to_name = serializers.CharField(source='assigned_to.username', read_only=True)
    temperature_display = serializers.CharField(source='get_temperature_display', read_only=True)
    akb_segment_display = serializers.CharField(source='get_akb_segment_display', read_only=True)

    # –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –ø–æ–ª—è
    is_akb = serializers.ReadOnlyField()
    customer_lifetime_value = serializers.ReadOnlyField()
    risk_of_churn = serializers.ReadOnlyField()
    next_contact_recommendation = serializers.ReadOnlyField()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    recent_interactions_count = serializers.SerializerMethodField()
    pending_tasks_count = serializers.SerializerMethodField()
    days_since_last_contact = serializers.SerializerMethodField()

    class Meta:
        model = Client
        fields = [
            # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
            'id', 'full_name', 'phone', 'email', 'company_name',
            'type', 'status', 'assigned_to', 'assigned_to_name',

            # CRM –ø–æ–ª—è
            'temperature', 'temperature_display', 'akb_segment', 'akb_segment_display',
            'total_spent', 'avg_check', 'total_orders',
            'first_purchase_date', 'last_purchase_date', 'last_contact_date',

            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
            'lead_source', 'preferred_contact_method', 'country', 'city',
            'difficulty_rating', 'notes',

            # RFM
            'rfm_recency', 'rfm_frequency', 'rfm_monetary', 'rfm_score',

            # –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –ø–æ–ª—è
            'is_akb', 'customer_lifetime_value', 'risk_of_churn',
            'next_contact_recommendation',

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            'recent_interactions_count', 'pending_tasks_count',
            'days_since_last_contact',

            # –î–∞—Ç–∏
            'created_at', 'updated_at'
        ]

    def get_recent_interactions_count(self, obj):
        from django.utils import timezone
        from datetime import timedelta

        return obj.interactions.filter(
            created_at__gte=timezone.now() - timedelta(days=30)
        ).count()

    def get_pending_tasks_count(self, obj):
        return obj.tasks.filter(
            status__in=['pending', 'in_progress']
        ).count()

    def get_days_since_last_contact(self, obj):
        from django.utils import timezone

        if obj.last_contact_date:
            return (timezone.now() - obj.last_contact_date).days
        return None


class ExternalLeadSerializer(serializers.ModelSerializer):
    assigned_to = serializers.PrimaryKeyRelatedField(queryset=User.objects.all(), required=False)

    class Meta:
        model = Lead
        fields = [
            'full_name',
            'phone',
            'email',
            'source',
            'description',
            'price',
            'assigned_to',
        ]


class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    def validate(self, attrs):
        data = super().validate(attrs)
        user = self.user

        try:
            custom_user = CustomUser.objects.get(user=user)
            interface_type = custom_user.interface_type
            interface_label = custom_user.get_interface_type_display()
        except CustomUser.DoesNotExist:
            interface_type = None
            interface_label = None

        data.update({
            "username": user.username,
            "full_name": f"{user.first_name} {user.last_name}".strip(),
            "interface_type": interface_type,
            "interface_label": interface_label,
            "groups": list(user.groups.values_list("name", flat=True)),
        })
        return data


User = get_user_model()


class ManagerSerializer(serializers.ModelSerializer):
    username = serializers.CharField(source='user.username')
    first_name = serializers.CharField(source='user.first_name')
    last_name = serializers.CharField(source='user.last_name', allow_blank=True)
    email = serializers.EmailField(source='user.email')
    is_active = serializers.BooleanField(source='user.is_active')
    password = serializers.CharField(source='user.password', write_only=True, required=False)

    avatar = serializers.ImageField(required=False, allow_null=True)
    avatar_url = serializers.SerializerMethodField()

    class Meta:
        model = CustomUser
        fields = [
            'id', 'username', 'first_name', 'last_name', 'email', 'is_active',
            'interface_type', 'avatar', 'avatar_url', 'password'
        ]

    def get_avatar_url(self, obj):
        request = self.context.get('request')
        if obj.avatar and hasattr(obj.avatar, 'url'):
            return request.build_absolute_uri(obj.avatar.url)
        return None

    def create(self, validated_data):
        user_data = validated_data.pop('user')
        password = user_data.pop('password', None)
        user = User.objects.create(**user_data)
        if password:
            user.set_password(password)
            user.save()
        return CustomUser.objects.create(user=user, **validated_data)

    def update(self, instance, validated_data):
        user_data = validated_data.pop('user', {})
        user = instance.user
        for attr, value in user_data.items():
            if attr == 'password':
                user.set_password(value)
            else:
                setattr(user, attr, value)
        user.save()

        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance


class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ['id', 'user', 'interface_type', 'avatar']


class ClientInteractionSerializer(serializers.ModelSerializer):
    created_by_name = serializers.CharField(source='created_by.username', read_only=True)
    client_name = serializers.CharField(source='client.full_name', read_only=True)
    client_phone = serializers.CharField(source='client.phone', read_only=True)

    class Meta:
        model = ClientInteraction
        fields = [
            'id', 'client', 'client_name', 'client_phone',
            'interaction_type', 'direction', 'subject', 'description',
            'outcome', 'created_by', 'created_by_name', 'created_at',
            'follow_up_date'
        ]
        read_only_fields = ['created_by', 'created_at']


class ClientTaskSerializer(serializers.ModelSerializer):
    assigned_to_name = serializers.CharField(source='assigned_to.username', read_only=True)
    client_name = serializers.CharField(source='client.full_name', read_only=True)
    client_phone = serializers.CharField(source='client.phone', read_only=True)
    is_overdue = serializers.SerializerMethodField()

    class Meta:
        model = ClientTask
        fields = [
            'id', 'client', 'client_name', 'client_phone',
            'title', 'description', 'assigned_to', 'assigned_to_name',
            'priority', 'status', 'due_date', 'created_at',
            'completed_at', 'is_overdue'
        ]

    def get_is_overdue(self, obj):
        from django.utils import timezone
        return obj.due_date < timezone.now() and obj.status not in ['completed', 'cancelled']


# üî• –ö–û–ú–ü–ê–ö–¢–ù–ò–ô –°–ï–†–Ü–ê–õ–Ü–ó–ê–¢–û–† –î–õ–Ø –°–ü–ò–°–ö–Ü–í
class ClientCompactSerializer(serializers.ModelSerializer):
    temperature_display = serializers.CharField(source='get_temperature_display', read_only=True)
    akb_segment_display = serializers.CharField(source='get_akb_segment_display', read_only=True)

    class Meta:
        model = Client
        fields = [
            'id', 'full_name', 'phone', 'temperature', 'temperature_display',
            'akb_segment', 'akb_segment_display', 'total_spent', 'total_orders',
            'last_purchase_date', 'rfm_score'
        ]


# üî• –°–ï–†–Ü–ê–õ–Ü–ó–ê–¢–û–† –î–õ–Ø –®–í–ò–î–ö–û–ì–û –°–¢–í–û–†–ï–ù–ù–Ø –í–ó–ê–Ñ–ú–û–î–Ü–á
class QuickInteractionSerializer(serializers.ModelSerializer):
    class Meta:
        model = ClientInteraction
        fields = [
            'client', 'interaction_type', 'direction',
            'subject', 'description', 'outcome', 'follow_up_date'
        ]

    def create(self, validated_data):
        validated_data['created_by'] = self.context['request'].user
        return super().create(validated_data)


# üî• –°–ï–†–Ü–ê–õ–Ü–ó–ê–¢–û–† –î–õ–Ø –ï–ö–°–ü–û–†–¢–£ –ö–õ–Ü–Ñ–ù–¢–Ü–í
class ClientExportSerializer(serializers.ModelSerializer):
    assigned_to_name = serializers.CharField(source='assigned_to.username', read_only=True)
    temperature_display = serializers.CharField(source='get_temperature_display', read_only=True)
    akb_segment_display = serializers.CharField(source='get_akb_segment_display', read_only=True)

    class Meta:
        model = Client
        fields = [
            'id', 'full_name', 'phone', 'email', 'company_name',
            'temperature_display', 'akb_segment_display',
            'total_spent', 'avg_check', 'total_orders',
            'first_purchase_date', 'last_purchase_date',
            'rfm_score', 'assigned_to_name', 'created_at'
        ]