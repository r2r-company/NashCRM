# backend/serializers.py - –û–ù–û–í–õ–ï–ù–ò–ô LeadSerializer

from django.contrib.auth import get_user_model
from django.contrib.auth.models import User
from rest_framework import serializers
from rest_framework.exceptions import ValidationError
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer

from .models import Lead, Client, CustomUser, LeadFile, ClientInteraction, ClientTask
from .validators.lead_status_validator import LeadStatusValidator, validate_lead_status_change


class LeadFileSerializer(serializers.ModelSerializer):
    class Meta:
        model = LeadFile
        fields = ['id', 'file', 'uploaded_at']


class LeadSerializer(serializers.ModelSerializer):
    assigned_to_username = serializers.CharField(source='assigned_to.username', read_only=True)
    files = LeadFileSerializer(many=True, read_only=True)

    # üöÄ –î–û–î–ê–Ñ–ú–û –ü–û–õ–Ø –î–õ–Ø –í–ê–õ–Ü–î–ê–¶–Ü–á –°–¢–ê–¢–£–°–Ü–í
    available_statuses = serializers.SerializerMethodField(read_only=True)
    payment_info = serializers.SerializerMethodField(read_only=True)
    next_action = serializers.SerializerMethodField(read_only=True)

    class Meta:
        model = Lead
        fields = '__all__'

    def __init__(self, *args, **kwargs):
        """üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –†–û–ë–ò–ú–û –í–°–Ü –ü–û–õ–Ø –ù–ï–û–ë–û–í'–Ø–ó–ö–û–í–ò–ú–ò –ü–†–ò UPDATE"""
        super().__init__(*args, **kwargs)

        # –Ø–∫—â–æ —Ü–µ update (instance —ñ—Å–Ω—É—î), —Ä–æ–±–∏–º–æ –≤—Å—ñ –ø–æ–ª—è –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏
        if self.instance:
            for field_name, field in self.fields.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ read-only –ø–æ–ª—è
                if not field.read_only:
                    field.required = False
                    # –î–æ–∑–≤–æ–ª—è—î–º–æ null/blank –¥–ª—è –±—ñ–ª—å—à–æ—Å—Ç—ñ –ø–æ–ª—ñ–≤
                    if hasattr(field, 'allow_null') and field_name not in ['id', 'created_at']:
                        field.allow_null = True
                    if hasattr(field, 'allow_blank') and field_name not in ['id']:
                        field.allow_blank = True

    def get_available_statuses(self, obj):
        """–î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É"""
        if obj and obj.status:
            allowed = LeadStatusValidator.get_allowed_transitions(obj.status, obj)
            return [
                {
                    'code': status,
                    'name': LeadStatusValidator.STATUS_NAMES.get(status, status)
                }
                for status in allowed
            ]
        return []

    def get_payment_info(self, obj):
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç–µ–∂—ñ"""
        if obj:
            return LeadStatusValidator.get_payment_info(obj)
        return {}

    def get_next_action(self, obj):
        """–ù–∞—Å—Ç—É–ø–Ω–∞ –¥—ñ—è –¥–ª—è –ª—ñ–¥–∞"""
        if obj:
            return LeadStatusValidator.get_next_required_action(obj)
        return ""

    def validate_status(self, value):
        """üî• –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø –°–¢–ê–¢–£–°–£ - –ø–æ–º—ñ—á–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è view"""
        # –¢—ñ–ª—å–∫–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ª—ñ–¥—ñ–≤ (update)
        if self.instance:
            current_status = self.instance.status

            # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è - –≤—Å–µ –æ–∫
            if current_status == value:
                return value

            print(f"üîç –í–ê–õ–Ü–î–ê–¶–Ü–Ø –°–¢–ê–¢–£–°–£: {current_status} ‚Üí {value}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–ª–∏–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥
            can_transition, reason = LeadStatusValidator.can_transition(
                current_status, value, self.instance
            )

            if not can_transition:
                print(f"‚ùå –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ù–ï –ü–†–û–ô–®–õ–ê: {reason}")

                # üî• –°–ü–ï–¶–Ü–ê–õ–¨–ù–ò–ô –ú–ê–†–ö–ï–† –¥–ª—è view —â–æ–± –≤—ñ–Ω –∑—Ä–æ–∑—É–º—ñ–≤ —â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É —Å—Ç–∞—Ç—É—Å—É
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞
                self._status_transition_error = {
                    'current_status': current_status,
                    'attempted_status': value,
                    'reason': reason,
                    'instance': self.instance
                }

                # üî• –ö–ò–î–ê–Ñ–ú–û –ü–†–û–°–¢–£ –¢–ï–ö–°–¢–û–í–£ –ü–û–ú–ò–õ–ö–£ - view —Å–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å
                raise serializers.ValidationError("STATUS_TRANSITION_ERROR")

            print(f"‚úÖ –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ü–†–û–ô–®–õ–ê: {reason}")

        return value

    def validate_phone(self, value):
        """üî• –í–ê–õ–Ü–î–ê–¶–Ü–Ø –¢–ï–õ–ï–§–û–ù–£ - —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ–ª–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è"""
        if value:
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
            normalized_phone = Client.normalize_phone(value)

            # –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤–∏–∫–ª—é—á–∞—é—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ª—ñ–¥
            if self.instance:
                existing = Lead.objects.filter(
                    phone=normalized_phone
                ).exclude(id=self.instance.id).first()

                if existing:
                    raise serializers.ValidationError(
                        f'–õ—ñ–¥ –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î (ID: {existing.id})'
                    )
            else:
                # –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏
                if Lead.objects.filter(phone=normalized_phone).exists():
                    raise serializers.ValidationError(
                        '–õ—ñ–¥ –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î'
                    )

            return normalized_phone

        return value

    def validate_order_number(self, value):
        """üî• –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ù–û–ú–ï–†–ê –ó–ê–ú–û–í–õ–ï–ù–ù–Ø - —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ–ª–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è"""
        if value:
            # –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è - –≤–∏–∫–ª—é—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ª—ñ–¥
            if self.instance:
                existing = Lead.objects.filter(
                    order_number=value
                ).exclude(id=self.instance.id).first()

                if existing:
                    raise serializers.ValidationError(
                        f'–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –ª—ñ–¥—ñ #{existing.id}'
                    )
            else:
                # –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                if Lead.objects.filter(order_number=value).exists():
                    raise serializers.ValidationError(
                        '–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è'
                    )

        return value

    def validate(self, attrs):
        """üî• –ó–ê–ì–ê–õ–¨–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤"""

        # –Ø–∫—â–æ —Ü–µ —á–∞—Å—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if self.instance and self.partial:
            print(f"üìù –ß–ê–°–¢–ö–û–í–ï –û–ù–û–í–õ–ï–ù–ù–Ø –ª—ñ–¥–∞ #{self.instance.id}")
            print(f"   –ü–æ–ª—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {list(attrs.keys())}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ –ø–æ–ª—è
            if 'status' in attrs:
                new_status = attrs['status']

                # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è completed
                if new_status == 'completed':
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ü—ñ–Ω—É (–±–µ—Ä–µ–º–æ –∑ attrs –∞–±–æ –∑ —ñ—Å–Ω—É—é—á–æ–≥–æ –æ–±'—î–∫—Ç–∞)
                    price = attrs.get('price', self.instance.price)
                    if not price or price <= 0:
                        raise serializers.ValidationError({
                            'status': '–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ª—ñ–¥ –±–µ–∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó —Ü—ñ–Ω–∏',
                            'current_price': float(self.instance.price or 0),
                            'solution': '–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ü—ñ–Ω—É –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º –ª—ñ–¥–∞'
                        })

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–≤–Ω—É –æ–ø–ª–∞—Ç—É
                    if not LeadStatusValidator.is_fully_paid(self.instance):
                        payment_info = LeadStatusValidator.get_payment_info(self.instance)
                        raise serializers.ValidationError({
                            'status': f'–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ - –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î {payment_info["shortage"]} –≥—Ä–Ω',
                            'payment_details': payment_info,
                            'solution': '–î–æ–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—á—ñ –ø–ª–∞—Ç–µ–∂—ñ'
                        })

            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ü—ñ–Ω–∏ —è–∫—â–æ –≤–æ–Ω–∞ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
            if 'price' in attrs:
                new_price = attrs['price']
                if new_price is not None and new_price < 0:
                    raise serializers.ValidationError({
                        'price': '–¶—ñ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥\'—î–º–Ω–æ—é'
                    })

        return super().validate(attrs)

    def update(self, instance, validated_data):
        """üî• –ü–ï–†–ï–ü–ò–°–£–Ñ–ú–û –ú–ï–¢–û–î UPDATE –î–õ–Ø –õ–û–ì–£–í–ê–ù–ù–Ø"""
        old_status = instance.status
        old_price = float(instance.price or 0)
        old_assigned = instance.assigned_to.username if instance.assigned_to else None

        new_status = validated_data.get('status', old_status)
        new_price = validated_data.get('price', old_price)

        print(f"üìù –°–ï–†–Ü–ê–õ–Ü–ó–ê–¢–û–† UPDATE: –õ—ñ–¥ #{instance.pk}")
        print(f"   –°—Ç–∞—Ç—É—Å: {old_status} ‚Üí {new_status}")
        print(f"   –¶—ñ–Ω–∞: {old_price} ‚Üí {new_price}")
        print(f"   –û–Ω–æ–≤–ª—é–≤–∞–Ω—ñ –ø–æ–ª—è: {list(validated_data.keys())}")

        # –í–∏–∫–æ–Ω—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        updated_instance = super().update(instance, validated_data)

        # –õ–æ–≥—É—î–º–æ –∑–º—ñ–Ω–∏
        changes = []
        if old_status != new_status:
            changes.append(f"—Å—Ç–∞—Ç—É—Å: {old_status} ‚Üí {new_status}")
        if old_price != new_price:
            changes.append(f"—Ü—ñ–Ω–∞: {old_price} ‚Üí {new_price}")

        new_assigned = updated_instance.assigned_to.username if updated_instance.assigned_to else None
        if old_assigned != new_assigned:
            changes.append(f"–º–µ–Ω–µ–¥–∂–µ—Ä: {old_assigned} ‚Üí {new_assigned}")

        if changes:
            print(f"‚úÖ –ó–ú–Ü–ù–ò –í –õ–Ü–î–Ü #{updated_instance.pk}: {', '.join(changes)}")
        else:
            print(f"‚ÑπÔ∏è  –õ—ñ–¥ #{updated_instance.pk} –æ–Ω–æ–≤–ª–µ–Ω–æ –±–µ–∑ –∫–ª—é—á–æ–≤–∏—Ö –∑–º—ñ–Ω")

        return updated_instance

    def _get_detailed_status_explanation(self, current_status: str, attempted_status: str, lead) -> str:
        """üî• –î–ï–¢–ê–õ–¨–ù–ï –ü–û–Ø–°–ù–ï–ù–ù–Ø –ß–û–ú–£ –ü–ï–†–ï–•–Ü–î –ù–ï–ú–û–ñ–õ–ò–í–ò–ô"""

        if current_status == 'preparation' and attempted_status == 'warehouse_processing':
            from backend.models import LeadPaymentOperation
            has_payments = LeadPaymentOperation.objects.filter(lead=lead).exists()

            if not has_payments:
                return (
                    "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥ –±–µ–∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤!\n\n"
                    "üìã –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:\n"
                    "1. –î–æ–¥–∞–π—Ç–µ –∑–∞–ø–∏—Å –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –æ–ø–ª–∞—Ç—É:\n"
                    f"   POST /api/leads/{lead.id}/add-payment/\n"
                    "   {\n"
                    "     \"operation_type\": \"expected\",\n"
                    f"     \"amount\": {lead.price or '–¶–Ü–ù–ê_–õ–Ü–î–ê'},\n"
                    "     \"comment\": \"–û—á—ñ–∫—É—î—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞\"\n"
                    "   }\n\n"
                    "2. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –º–æ–∂–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥\n\n"
                    "üí° –¶–µ –∑–∞—Ö–∏—â–∞—î –≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É –±–µ–∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é"
                )

        elif attempted_status == 'completed':
            payment_info = LeadStatusValidator.get_payment_info(lead)
            if payment_info['shortage'] > 0:
                return (
                    f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ - –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î {payment_info['shortage']} –≥—Ä–Ω!\n\n"
                    "üìã –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:\n"
                    "1. –î–æ–¥–∞–π—Ç–µ –ø–ª–∞—Ç—ñ–∂ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
                    f"   PATCH /api/leads/{lead.id}/add-payment/\n"
                    "   {\n"
                    "     \"operation_type\": \"received\",\n"
                    f"     \"amount\": {payment_info['shortage']},\n"
                    "     \"comment\": \"–î–æ–ø–ª–∞—Ç–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞\"\n"
                    "   }\n\n"
                    f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –æ–ø–ª–∞—Ç:\n"
                    f"   –¶—ñ–Ω–∞ –ª—ñ–¥–∞: {payment_info['price']} –≥—Ä–Ω\n"
                    f"   –û—Ç—Ä–∏–º–∞–Ω–æ: {payment_info['received']} –≥—Ä–Ω\n"
                    f"   –ù–µ –≤–∏—Å—Ç–∞—á–∞—î: {payment_info['shortage']} –≥—Ä–Ω"
                )

        elif current_status == 'queued' and attempted_status not in ['in_work', 'declined']:
            return (
                "‚ùå –ó —á–µ—Ä–≥–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ —Ä–æ–±–æ—Ç—É –∞–±–æ –≤—ñ–¥–º–æ–≤–∏—Ç–∏!\n\n"
                "üìã –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å:\n"
                "1. queued ‚Üí in_work (–º–µ–Ω–µ–¥–∂–µ—Ä –±–µ—Ä–µ –≤ —Ä–æ–±–æ—Ç—É)\n"
                "2. in_work ‚Üí awaiting_prepayment (–ø–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É)\n"
                "3. awaiting_prepayment ‚Üí preparation (–ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤–∞–Ω—Å—É)\n\n"
                "üí° –ù–µ –º–æ–∂–Ω–∞ '–ø–µ—Ä–µ—Å—Ç—Ä–∏–±—É–≤–∞—Ç–∏' —á–µ—Ä–µ–∑ –µ—Ç–∞–ø–∏!"
            )

        return f"–ü–µ—Ä–µ—Ö—ñ–¥ –∑ '{LeadStatusValidator.STATUS_NAMES.get(current_status)}' –≤ '{LeadStatusValidator.STATUS_NAMES.get(attempted_status)}' –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º–∏"

    def _get_business_rules_explanation(self, current_status: str, attempted_status: str) -> dict:
        """üî• –ü–û–Ø–°–ù–ï–ù–ù–Ø –ë–Ü–ó–ù–ï–°-–ü–†–ê–í–ò–õ"""

        rules = {
            'preparation_to_warehouse': {
                'rule': '–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é –Ω–∞ —Å–∫–ª–∞–¥ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–∞–ø–∏—Å–∏',
                'reason': '–ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—é –æ–ø–ª–∞—Ç',
                'required': '–ú—ñ–Ω—ñ–º—É–º –æ–¥–∏–Ω –∑–∞–ø–∏—Å —É LeadPaymentOperation'
            },
            'any_to_completed': {
                'rule': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ–≤–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ',
                'reason': '–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å - –Ω–µ –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ –±–æ—Ä–≥–∏',
                'required': '–°—É–º–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ >= —Ü—ñ–Ω–∞ –ª—ñ–¥–∞'
            },
            'sequential_flow': {
                'rule': '–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –ø–æ –µ—Ç–∞–ø–∞—Ö',
                'reason': '–ö–æ–∂–µ–Ω –µ—Ç–∞–ø –º–∞—î —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏—Ö',
                'required': '–ù–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—Ç—Ä–∏–±—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –µ—Ç–∞–ø–∏'
            }
        }

        if current_status == 'preparation' and attempted_status == 'warehouse_processing':
            return rules['preparation_to_warehouse']
        elif attempted_status == 'completed':
            return rules['any_to_completed']
        else:
            return rules['sequential_flow']

    def to_representation(self, instance):
        """üî• –î–û–î–ê–Ñ–ú–û –ö–û–†–ò–°–ù–£ –Ü–ù–§–û–†–ú–ê–¶–Ü–Æ –£ –í–Ü–î–ü–û–í–Ü–î–¨"""
        data = super().to_representation(instance)

        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —á–∏ —Ü–µ —á–∞—Å—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if hasattr(self, '_is_partial_update'):
            data['_meta'] = {
                'partial_update': True,
                'updated_fields': getattr(self, '_updated_fields', [])
            }

        return data

# –í—Å—ñ —ñ–Ω—à—ñ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
class ClientSerializer(serializers.ModelSerializer):
    assigned_to_name = serializers.CharField(source='assigned_to.username', read_only=True)
    temperature_display = serializers.CharField(source='get_temperature_display', read_only=True)
    akb_segment_display = serializers.CharField(source='get_akb_segment_display', read_only=True)

    # –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –ø–æ–ª—è
    is_akb = serializers.ReadOnlyField()
    customer_lifetime_value = serializers.ReadOnlyField()
    risk_of_churn = serializers.ReadOnlyField()
    next_contact_recommendation = serializers.ReadOnlyField()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    recent_interactions_count = serializers.SerializerMethodField()
    pending_tasks_count = serializers.SerializerMethodField()
    days_since_last_contact = serializers.SerializerMethodField()

    class Meta:
        model = Client
        fields = [
            # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
            'id', 'full_name', 'phone', 'email', 'company_name',
            'type', 'status', 'assigned_to', 'assigned_to_name',

            # CRM –ø–æ–ª—è
            'temperature', 'temperature_display', 'akb_segment', 'akb_segment_display',
            'total_spent', 'avg_check', 'total_orders',
            'first_purchase_date', 'last_purchase_date', 'last_contact_date',

            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
            'lead_source', 'preferred_contact_method', 'country', 'city',
            'difficulty_rating', 'notes',

            # RFM
            'rfm_recency', 'rfm_frequency', 'rfm_monetary', 'rfm_score',

            # –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –ø–æ–ª—è
            'is_akb', 'customer_lifetime_value', 'risk_of_churn',
            'next_contact_recommendation',

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            'recent_interactions_count', 'pending_tasks_count',
            'days_since_last_contact',

            # –î–∞—Ç–∏
            'created_at', 'updated_at'
        ]

    def get_recent_interactions_count(self, obj):
        from django.utils import timezone
        from datetime import timedelta

        return obj.interactions.filter(
            created_at__gte=timezone.now() - timedelta(days=30)
        ).count()

    def get_pending_tasks_count(self, obj):
        return obj.tasks.filter(
            status__in=['pending', 'in_progress']
        ).count()

    def get_days_since_last_contact(self, obj):
        from django.utils import timezone

        if obj.last_contact_date:
            return (timezone.now() - obj.last_contact_date).days
        return None


class ExternalLeadSerializer(serializers.ModelSerializer):
    assigned_to = serializers.PrimaryKeyRelatedField(queryset=User.objects.all(), required=False)

    class Meta:
        model = Lead
        fields = [
            'full_name',
            'phone',
            'email',
            'source',
            'description',
            'price',
            'assigned_to',
        ]


# backend/serializers.py - –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è MyTokenObtainPairSerializer

class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    def validate(self, attrs):
        from django.utils import timezone
        from django.contrib.auth.models import Permission
        from backend.validators.lead_status_validator import LeadStatusValidator

        data = super().validate(attrs)
        user = self.user

        # üî• –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê
        try:
            custom_user = CustomUser.objects.get(user=user)
            interface_type = custom_user.interface_type
            interface_label = custom_user.get_interface_type_display()
            avatar_url = custom_user.avatar.url if custom_user.avatar else None
        except CustomUser.DoesNotExist:
            interface_type = None
            interface_label = None
            avatar_url = None

        # üî• –î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –†–û–õ–Ü –¢–ê –î–û–ó–í–û–õ–ò
        user_groups = list(user.groups.values_list("name", flat=True))
        user_permissions = list(user.user_permissions.values_list("codename", flat=True))

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ–∑–≤–æ–ª–∏ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–∏
        group_permissions = Permission.objects.filter(
            group__user=user
        ).values_list("codename", flat=True)
        all_permissions = list(set(user_permissions + list(group_permissions)))

        # üî• –í–ò–ó–ù–ê–ß–ê–Ñ–ú–û –†–û–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê
        user_role = self._determine_user_role(user, user_groups, interface_type)

        # üî• –î–û–ó–í–û–õ–ò –î–õ–Ø –§–†–û–ù–¢–ï–ù–î–£
        frontend_permissions = self._get_frontend_permissions(user, user_role, all_permissions)

        # üî• –ù–û–í–ò–ô –ë–õ–û–ö: –î–û–ó–í–û–õ–ò –ü–û –°–¢–ê–¢–£–°–ê–• –õ–Ü–î–Ü–í
        status_permissions = self._get_status_permissions(user, user_role)

        # üî• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–†–ò–°–¢–£–í–ê–ß–ê (—è–∫—â–æ –º–µ–Ω–µ–¥–∂–µ—Ä)
        user_stats = self._get_user_stats(user, user_role)

        # üî• –û–ù–û–í–õ–Æ–Ñ–ú–û –í–Ü–î–ü–û–í–Ü–î–¨
        data.update({
            # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "full_name": f"{user.first_name} {user.last_name}".strip() or user.username,

            # –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            "is_staff": user.is_staff,
            "is_superuser": user.is_superuser,
            "is_active": user.is_active,
            "date_joined": user.date_joined,
            "last_login": user.last_login,

            # –ö–∞—Å—Ç–æ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            "interface_type": interface_type,
            "interface_label": interface_label,
            "avatar_url": avatar_url,

            # –†–æ–ª—ñ —Ç–∞ –¥–æ–∑–≤–æ–ª–∏
            "groups": user_groups,
            "permissions": all_permissions[:20],  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            "role": user_role,

            # –î–æ–∑–≤–æ–ª–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
            "frontend_permissions": frontend_permissions,

            # üî• –ù–û–í–ò–ô –ë–õ–û–ö: –î–û–ó–í–û–õ–ò –ü–û –°–¢–ê–¢–£–°–ê–•
            "status_permissions": status_permissions,

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            "stats": user_stats,

            # –ú–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            "_meta": {
                "login_time": timezone.now(),
                "permissions_count": len(all_permissions),
                "groups_count": len(user_groups),
                "role_level": user_role["level"],
                "interface_configured": interface_type is not None,
                "status_permissions_included": True
            }
        })

        return data

    def _get_status_permissions(self, user, user_role):
        """üî• –ù–û–í–ò–ô –ú–ï–¢–û–î: –î–æ–∑–≤–æ–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö –ª—ñ–¥—ñ–≤"""

        role_code = user_role["code"]

        # –í—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ç–∞—Ç—É—Å–∏ –∑ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∞
        all_statuses = LeadStatusValidator.STATUS_FLOW

        # –ë–∞–∑–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∑–≤–æ–ª—ñ–≤
        status_permissions = {
            "can_change_status": False,
            "allowed_transitions": {},
            "restricted_statuses": [],
            "role_limitations": {},
            "status_info": {}
        }

        # üî• –î–û–ó–í–û–õ–ò –ó–ê –†–û–õ–Ø–ú–ò
        if role_code == "superadmin":
            # –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω - –º–æ–∂–µ –≤—Å–µ
            status_permissions["can_change_status"] = True
            for status in all_statuses:
                status_permissions["allowed_transitions"][status] = LeadStatusValidator.STATUS_FLOW.copy()

        elif role_code == "admin":
            # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä - –º–æ–∂–µ –º–∞–π–∂–µ –≤—Å–µ, –∫—Ä—ñ–º —Å–∫–ª–∞–¥—Å—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            status_permissions["can_change_status"] = True
            for status in all_statuses:
                allowed = LeadStatusValidator.STATUS_FLOW.copy()
                # –ê–¥–º—ñ–Ω –Ω–µ –º–æ–∂–µ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥—Å—å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
                if status == "warehouse_processing":
                    allowed = ["warehouse_ready", "preparation"]  # –¢—ñ–ª—å–∫–∏ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
                status_permissions["allowed_transitions"][status] = allowed

        elif role_code == "accountant":
            # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä - –º–æ–∂–µ –º—ñ–Ω—è—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏
            status_permissions["can_change_status"] = True

            accountant_transitions = {
                "queued": ["in_work", "declined"],
                "in_work": ["awaiting_prepayment", "queued", "declined"],
                "awaiting_prepayment": ["preparation", "in_work", "declined"],
                "preparation": ["warehouse_processing", "awaiting_prepayment", "declined"],
                "warehouse_processing": [],  # –ù–µ –º–æ–∂–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–æ–º
                "warehouse_ready": ["on_the_way"],  # –ú–æ–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏
                "on_the_way": ["completed", "warehouse_ready", "declined"],  # –ú–æ–∂–µ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏
                "completed": [],  # –ù–µ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ
                "declined": []  # –ù–µ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –≤—ñ–¥–º–æ–≤–ª–µ–Ω—ñ
            }

            status_permissions["allowed_transitions"] = accountant_transitions
            status_permissions["restricted_statuses"] = ["warehouse_processing"]
            status_permissions["role_limitations"] = {
                "warehouse_operations": False,
                "can_complete": True,
                "can_decline": True,
                "financial_control": True
            }

        elif role_code == "manager":
            # –ú–µ–Ω–µ–¥–∂–µ—Ä - —Ç—ñ–ª—å–∫–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –µ—Ç–∞–ø–∏
            status_permissions["can_change_status"] = True

            manager_transitions = {
                "queued": ["in_work", "declined"],
                "in_work": ["awaiting_prepayment", "queued", "declined"],
                "awaiting_prepayment": ["in_work", "declined"],
                "preparation": [],  # –ù–µ –º–æ–∂–µ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∞–¥–º—ñ–Ω—É
                "warehouse_processing": [],
                "warehouse_ready": [],
                "on_the_way": [],
                "completed": [],
                "declined": []
            }

            status_permissions["allowed_transitions"] = manager_transitions
            status_permissions["restricted_statuses"] = [
                "preparation", "warehouse_processing", "warehouse_ready", "on_the_way", "completed"
            ]
            status_permissions["role_limitations"] = {
                "warehouse_operations": False,
                "can_complete": False,
                "can_decline": True,
                "max_status": "awaiting_prepayment",
                "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –µ—Ç–∞–ø–∞–º–∏"
            }

        elif role_code == "warehouse":
            # –°–∫–ª–∞–¥—Å—å–∫–∏–π - —Ç—ñ–ª—å–∫–∏ —Å–∫–ª–∞–¥—Å—å–∫—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
            status_permissions["can_change_status"] = True

            warehouse_transitions = {
                "queued": [],
                "in_work": [],
                "awaiting_prepayment": [],
                "preparation": [],
                "warehouse_processing": ["warehouse_ready", "preparation"],  # –ú–æ–∂–µ –≥–æ—Ç—É–≤–∞—Ç–∏ –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏
                "warehouse_ready": ["on_the_way", "warehouse_processing"],  # –ú–æ–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏
                "on_the_way": [],
                "completed": [],
                "declined": []
            }

            status_permissions["allowed_transitions"] = warehouse_transitions
            status_permissions["restricted_statuses"] = [
                "queued", "in_work", "awaiting_prepayment", "preparation", "on_the_way", "completed", "declined"
            ]
            status_permissions["role_limitations"] = {
                "warehouse_operations": True,
                "can_complete": False,
                "can_decline": False,
                "allowed_statuses": ["warehouse_processing", "warehouse_ready"],
                "description": "–°–∫–ª–∞–¥—Å—å–∫–∏–π –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –∑—ñ —Å–∫–ª–∞–¥—Å—å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏"
            }

        else:
            # –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –Ω—ñ—á–æ–≥–æ –Ω–µ –º–æ–∂–µ
            status_permissions["can_change_status"] = False
            status_permissions["role_limitations"] = {
                "description": "–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—ñ–≤ –Ω–∞ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—ñ–≤"
            }

        # üî• –î–û–î–ê–Ñ–ú–û –Ü–ù–§–û–†–ú–ê–¶–Ü–Æ –ü–†–û –°–¢–ê–¢–£–°–ò
        for status_code in all_statuses:
            status_permissions["status_info"][status_code] = {
                "code": status_code,
                "name": LeadStatusValidator.STATUS_NAMES.get(status_code, status_code),
                "can_set": status_code in status_permissions.get("allowed_transitions", {}).get("queued", []),
                "is_restricted": status_code in status_permissions.get("restricted_statuses", [])
            }

        # üî• –î–û–î–ê–Ñ–ú–û –ë–Ü–ó–ù–ï–°-–ü–†–ê–í–ò–õ–ê
        status_permissions["business_rules"] = {
            "requires_payment_for_completion": True,
            "requires_price_for_warehouse": True,
            "sequential_flow_required": True,
            "warehouse_financial_control": True,
            "description": "–°—Ç–∞—Ç—É—Å–∏ –∑–º—ñ–Ω—é—é—Ç—å—Å—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"
        }

        return status_permissions

    def _determine_user_role(self, user, groups, interface_type):
        """üî• –í–ò–ó–ù–ê–ß–ê–Ñ–ú–û –†–û–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê"""

        # –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω
        if user.is_superuser:
            return {
                "code": "superadmin",
                "name": "–°—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                "level": 100,
                "description": "–ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π —Å–∏—Å—Ç–µ–º–∏",
                "color": "#e74c3c"
            }

        # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        if user.is_staff:
            return {
                "code": "admin",
                "name": "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                "level": 90,
                "description": "–î–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω–∫–∏ —Ç–∞ –∑–≤—ñ—Ç—ñ–≤",
                "color": "#9b59b6"
            }

        # –ó–∞ interface_type
        if interface_type == "accountant":
            return {
                "code": "accountant",
                "name": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä",
                "level": 80,
                "description": "–†–æ–±–æ—Ç–∞ –∑ –ª—ñ–¥–∞–º–∏ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏",
                "color": "#3498db"
            }
        elif interface_type == "manager":
            return {
                "code": "manager",
                "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                "level": 70,
                "description": "–†–æ–±–æ—Ç–∞ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ —Ç–∞ –ª—ñ–¥–∞–º–∏",
                "color": "#2ecc71"
            }
        elif interface_type == "warehouse":
            return {
                "code": "warehouse",
                "name": "–°–∫–ª–∞–¥—Å—å–∫–∏–π",
                "level": 60,
                "description": "–†–æ–±–æ—Ç–∞ –∑—ñ —Å–∫–ª–∞–¥—Å—å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏",
                "color": "#f39c12"
            }

        # –ó–∞ –≥—Ä—É–ø–∞–º–∏
        if "Managers" in groups or "managers" in groups:
            return {
                "code": "manager",
                "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                "level": 70,
                "description": "–†–æ–±–æ—Ç–∞ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ —Ç–∞ –ª—ñ–¥–∞–º–∏",
                "color": "#2ecc71"
            }
        elif "Accountants" in groups or "accountants" in groups:
            return {
                "code": "accountant",
                "name": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä",
                "level": 80,
                "description": "–†–æ–±–æ—Ç–∞ –∑ –ª—ñ–¥–∞–º–∏ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏",
                "color": "#3498db"
            }

        # –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        return {
            "code": "user",
            "name": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
            "level": 10,
            "description": "–ë–∞–∑–æ–≤–∏–π –¥–æ—Å—Ç—É–ø",
            "color": "#95a5a6"
        }

    def _get_frontend_permissions(self, user, user_role, all_permissions):
        """üî• –î–û–ó–í–û–õ–ò –î–õ–Ø –§–†–û–ù–¢–ï–ù–î–£ (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)"""

        permissions = {
            # –õ—ñ–¥–∏
            "leads": {
                "view": False,
                "create": False,
                "edit": False,
                "delete": False,
                "change_status": False,
                "assign_manager": False,
                "view_payments": False
            },

            # –ö–ª—ñ—î–Ω—Ç–∏
            "clients": {
                "view": False,
                "create": False,
                "edit": False,
                "delete": False,
                "view_analytics": False,
                "export": False
            },

            # –ü–ª–∞—Ç–µ–∂—ñ
            "payments": {
                "view": False,
                "add": False,
                "edit": False,
                "delete": False
            },

            # –ó–≤—ñ—Ç–∏
            "reports": {
                "view": False,
                "export": False,
                "detailed": False,
                "financial": False
            },

            # –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó
            "admin": {
                "user_management": False,
                "system_settings": False,
                "database_access": False,
                "logs": False
            },

            # –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
            "management": {
                "assign_leads": False,
                "bulk_operations": False,
                "team_stats": False,
                "dashboard": False
            },

            # –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            "ui": {
                "admin_panel": False,
                "advanced_filters": False,
                "bulk_edit": False,
                "export_data": False
            }
        }

        role_code = user_role["code"]

        # üî• –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –î–û–ó–í–û–õ–Ü–í –ó–ê –†–û–õ–Ø–ú–ò
        if role_code == "superadmin":
            # –°—É–ø–µ—Ä–∞–¥–º—ñ–Ω - –≤—Å–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ
            for category in permissions.values():
                for action in category:
                    category[action] = True

        elif role_code == "admin":
            # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
            permissions["leads"] = {
                "view": True, "create": True, "edit": True, "delete": True,
                "change_status": True, "assign_manager": True, "view_payments": True
            }
            permissions["clients"] = {
                "view": True, "create": True, "edit": True, "delete": True,
                "view_analytics": True, "export": True
            }
            permissions["payments"] = {
                "view": True, "add": True, "edit": True, "delete": False
            }
            permissions["reports"] = {
                "view": True, "export": True, "detailed": True, "financial": True
            }
            permissions["admin"]["user_management"] = True
            permissions["admin"]["logs"] = True
            permissions["management"] = {
                "assign_leads": True, "bulk_operations": True,
                "team_stats": True, "dashboard": True
            }
            permissions["ui"] = {
                "admin_panel": True, "advanced_filters": True,
                "bulk_edit": True, "export_data": True
            }

        elif role_code == "accountant":
            # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä
            permissions["leads"] = {
                "view": True, "create": True, "edit": True, "delete": False,
                "change_status": True, "assign_manager": False, "view_payments": True
            }
            permissions["clients"] = {
                "view": True, "create": True, "edit": True, "delete": False,
                "view_analytics": True, "export": True
            }
            permissions["payments"] = {
                "view": True, "add": True, "edit": True, "delete": False
            }
            permissions["reports"] = {
                "view": True, "export": True, "detailed": False, "financial": True
            }
            permissions["management"]["dashboard"] = True
            permissions["ui"] = {
                "admin_panel": False, "advanced_filters": True,
                "bulk_edit": False, "export_data": True
            }

        elif role_code == "manager":
            # –ú–µ–Ω–µ–¥–∂–µ—Ä
            permissions["leads"] = {
                "view": True, "create": True, "edit": True, "delete": False,
                "change_status": True, "assign_manager": False, "view_payments": False
            }
            permissions["clients"] = {
                "view": True, "create": True, "edit": True, "delete": False,
                "view_analytics": False, "export": False
            }
            permissions["payments"] = {
                "view": True, "add": False, "edit": False, "delete": False
            }
            permissions["reports"] = {
                "view": False, "export": False, "detailed": False, "financial": False
            }
            permissions["management"]["dashboard"] = True
            permissions["ui"] = {
                "admin_panel": False, "advanced_filters": False,
                "bulk_edit": False, "export_data": False
            }

        elif role_code == "warehouse":
            # –°–∫–ª–∞–¥—Å—å–∫–∏–π
            permissions["leads"] = {
                "view": True, "create": False, "edit": False, "delete": False,
                "change_status": True, "assign_manager": False, "view_payments": False
            }
            permissions["ui"]["advanced_filters"] = False

        # üî• –î–û–î–ê–¢–ö–û–í–û –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ö–û–ù–ö–†–ï–¢–ù–Ü –î–û–ó–í–û–õ–ò Django
        if "change_lead" in all_permissions:
            permissions["leads"]["edit"] = True
        if "delete_lead" in all_permissions:
            permissions["leads"]["delete"] = True
        if "view_client" in all_permissions:
            permissions["clients"]["view"] = True
        if "add_leadpaymentoperation" in all_permissions:
            permissions["payments"]["add"] = True

        return permissions

    def _get_user_stats(self, user, user_role):
        """üî• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–†–ò–°–¢–£–í–ê–ß–ê (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)"""

        role_code = user_role["code"]
        stats = {
            "leads_assigned": 0,
            "leads_completed_today": 0,
            "leads_in_work": 0,
            "pending_tasks": 0,
            "performance_score": 0,
            "weekly_performance": []
        }

        # –¢—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ —Ç–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ–≤
        if role_code in ["manager", "accountant", "admin", "superadmin"]:
            try:
                from django.utils import timezone
                from datetime import timedelta

                today = timezone.now().date()

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª—ñ–¥–∞—Ö
                user_leads = Lead.objects.filter(assigned_to=user)
                stats["leads_assigned"] = user_leads.count()
                stats["leads_completed_today"] = user_leads.filter(
                    status="completed",
                    status_updated_at__date=today
                ).count()
                stats["leads_in_work"] = user_leads.filter(
                    status__in=["in_work", "preparation", "awaiting_prepayment"]
                ).count()

                # –ó–∞–¥–∞—á—ñ (—è–∫—â–æ —î –º–æ–¥–µ–ª—å ClientTask)
                try:
                    stats["pending_tasks"] = ClientTask.objects.filter(
                        assigned_to=user,
                        status__in=["pending", "in_progress"]
                    ).count()
                except:
                    pass

                # –¢–∏–∂–Ω–µ–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
                weekly_stats = []
                for i in range(7):
                    day = today - timedelta(days=i)
                    completed = user_leads.filter(
                        status="completed",
                        status_updated_at__date=day
                    ).count()
                    weekly_stats.append({
                        "date": day.strftime("%Y-%m-%d"),
                        "completed": completed
                    })

                stats["weekly_performance"] = list(reversed(weekly_stats))

                # –ü—Ä–æ—Å—Ç–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)
                weekly_total = sum(day["completed"] for day in weekly_stats)
                stats["performance_score"] = min(weekly_total * 5, 100)  # –ú–∞–∫—Å–∏–º—É–º 100

            except Exception as e:
                # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user.username}: {e}")

        return stats


User = get_user_model()


class ManagerSerializer(serializers.ModelSerializer):
    username = serializers.CharField(source='user.username')
    first_name = serializers.CharField(source='user.first_name')
    last_name = serializers.CharField(source='user.last_name', allow_blank=True)
    email = serializers.EmailField(source='user.email')
    is_active = serializers.BooleanField(source='user.is_active')
    password = serializers.CharField(source='user.password', write_only=True, required=False)

    avatar = serializers.ImageField(required=False, allow_null=True)
    avatar_url = serializers.SerializerMethodField()

    class Meta:
        model = CustomUser
        fields = [
            'id', 'username', 'first_name', 'last_name', 'email', 'is_active',
            'interface_type', 'avatar', 'avatar_url', 'password'
        ]

    def get_avatar_url(self, obj):
        request = self.context.get('request')
        if obj.avatar and hasattr(obj.avatar, 'url'):
            return request.build_absolute_uri(obj.avatar.url)
        return None

    def create(self, validated_data):
        user_data = validated_data.pop('user')
        password = user_data.pop('password', None)
        user = User.objects.create(**user_data)
        if password:
            user.set_password(password)
            user.save()
        return CustomUser.objects.create(user=user, **validated_data)

    def update(self, instance, validated_data):
        user_data = validated_data.pop('user', {})
        user = instance.user
        for attr, value in user_data.items():
            if attr == 'password':
                user.set_password(value)
            else:
                setattr(user, attr, value)
        user.save()

        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance


class CustomUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ['id', 'user', 'interface_type', 'avatar']


class ClientInteractionSerializer(serializers.ModelSerializer):
    created_by_name = serializers.CharField(source='created_by.username', read_only=True)
    client_name = serializers.CharField(source='client.full_name', read_only=True)
    client_phone = serializers.CharField(source='client.phone', read_only=True)

    class Meta:
        model = ClientInteraction
        fields = [
            'id', 'client', 'client_name', 'client_phone',
            'interaction_type', 'direction', 'subject', 'description',
            'outcome', 'created_by', 'created_by_name', 'created_at',
            'follow_up_date'
        ]
        read_only_fields = ['created_by', 'created_at']


class ClientTaskSerializer(serializers.ModelSerializer):
    assigned_to_name = serializers.CharField(source='assigned_to.username', read_only=True)
    client_name = serializers.CharField(source='client.full_name', read_only=True)
    client_phone = serializers.CharField(source='client.phone', read_only=True)
    is_overdue = serializers.SerializerMethodField()

    class Meta:
        model = ClientTask
        fields = [
            'id', 'client', 'client_name', 'client_phone',
            'title', 'description', 'assigned_to', 'assigned_to_name',
            'priority', 'status', 'due_date', 'created_at',
            'completed_at', 'is_overdue'
        ]

    def get_is_overdue(self, obj):
        from django.utils import timezone
        return obj.due_date < timezone.now() and obj.status not in ['completed', 'cancelled']


# üî• –ö–û–ú–ü–ê–ö–¢–ù–ò–ô –°–ï–†–Ü–ê–õ–Ü–ó–ê–¢–û–† –î–õ–Ø –°–ü–ò–°–ö–Ü–í
class ClientCompactSerializer(serializers.ModelSerializer):
    temperature_display = serializers.CharField(source='get_temperature_display', read_only=True)
    akb_segment_display = serializers.CharField(source='get_akb_segment_display', read_only=True)

    class Meta:
        model = Client
        fields = [
            'id', 'full_name', 'phone', 'temperature', 'temperature_display',
            'akb_segment', 'akb_segment_display', 'total_spent', 'total_orders',
            'last_purchase_date', 'rfm_score'
        ]


# üî• –°–ï–†–Ü–ê–õ–Ü–ó–ê–¢–û–† –î–õ–Ø –®–í–ò–î–ö–û–ì–û –°–¢–í–û–†–ï–ù–ù–Ø –í–ó–ê–Ñ–ú–û–î–Ü–á
class QuickInteractionSerializer(serializers.ModelSerializer):
    class Meta:
        model = ClientInteraction
        fields = [
            'client', 'interaction_type', 'direction',
            'subject', 'description', 'outcome', 'follow_up_date'
        ]

    def create(self, validated_data):
        validated_data['created_by'] = self.context['request'].user
        return super().create(validated_data)


# üî• –°–ï–†–Ü–ê–õ–Ü–ó–ê–¢–û–† –î–õ–Ø –ï–ö–°–ü–û–†–¢–£ –ö–õ–Ü–Ñ–ù–¢–Ü–í
class ClientExportSerializer(serializers.ModelSerializer):
    assigned_to_name = serializers.CharField(source='assigned_to.username', read_only=True)
    temperature_display = serializers.CharField(source='get_temperature_display', read_only=True)
    akb_segment_display = serializers.CharField(source='get_akb_segment_display', read_only=True)

    class Meta:
        model = Client
        fields = [
            'id', 'full_name', 'phone', 'email', 'company_name',
            'temperature_display', 'akb_segment_display',
            'total_spent', 'avg_check', 'total_orders',
            'first_purchase_date', 'last_purchase_date',
            'rfm_score', 'assigned_to_name', 'created_at'
        ]