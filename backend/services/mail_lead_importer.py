import imaplib
import email
from email.header import decode_header
import re
from datetime import datetime
from email.utils import parseaddr

from backend.models import Client, Lead, EmailIntegrationSettings
from backend.services.lead_creation_service import create_lead_with_logic
from backend.ws_notify import notify_lead_created


def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É"""
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone)

    # –Ø–∫—â–æ –Ω–æ–º–µ—Ä –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0 (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
    if digits.startswith("0"):
        digits = "38" + digits
    # –Ø–∫—â–æ –Ω–æ–º–µ—Ä 10 —Ü–∏—Ñ—Ä –±–µ–∑ –∫–æ–¥—É –∫—Ä–∞—ó–Ω–∏
    elif not digits.startswith("38") and len(digits) == 10:
        digits = "38" + digits

    return digits


def parse_email_body(msg) -> str:
    """–í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    for part in msg.walk():
        if part.get_content_type() == "text/plain":
            return part.get_payload(decode=True).decode(part.get_content_charset() or 'utf-8')
    return ""


def extract_lead_data(text: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑ email –ª–∏—Å—Ç–∞. –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ñ–æ—Ä–º–∞—Ç–∏:
    - **form_id:** value (–ø–æ–¥–≤—ñ–π–Ω—ñ –∑—ñ—Ä–æ—á–∫–∏)
    - *form_id:* value (–æ–¥–∏–Ω–∞—Ä–Ω—ñ –∑—ñ—Ä–æ—á–∫–∏)
    - form_id: value (–±–µ–∑ –∑—ñ—Ä–æ—á–æ–∫)
    """

    def extract_field(label: str, text: str) -> str:
        """–í–∏—Ç—è–≥—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—è –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é"""
        # –§–æ—Ä–º–∞—Ç –∑ –ø–æ–¥–≤—ñ–π–Ω–∏–º–∏ –∑—ñ—Ä–æ—á–∫–∞–º–∏: **label:** value
        pattern = rf'\*\*{re.escape(label)}:\*\*\s*([^*]+?)(?=\*\*|$)'
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip()

        # –§–æ—Ä–º–∞—Ç –∑ –æ–¥–∏–Ω–∞—Ä–Ω–∏–º–∏ –∑—ñ—Ä–æ—á–∫–∞–º–∏: *label:* value
        pattern = rf'\*{re.escape(label)}:\*\s*([^*\n]+?)(?=\*|$|\n)'
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip()

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∑—ñ—Ä–æ—á–æ–∫
        pattern = rf'{re.escape(label)}:\s*([^*\n]+?)(?=\n|\*\*|\*|$)'
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip()

        return ""

    # –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ª—ñ–¥–∞
    required_fields = ["form_id", "Lead Id", "Name", "Phone Number"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    missing_fields = []
    for field in required_fields:
        if not extract_field(field, text):
            missing_fields.append(field)

    if missing_fields:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: {', '.join(missing_fields)}")
        print(f"üìÑ –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:\n{text[:500]}...")  # –í–∏–≤–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        return None

    # –í–∏—Ç—è–≥—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
    lead_id = extract_field("Lead Id", text)
    form_id = extract_field("form_id", text) or extract_field("Form ID", text)
    name = extract_field("Name", text)
    phone_raw = extract_field("Phone Number", text)

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
    create_time = extract_field("Create Time", text)
    ad_id = extract_field("Ad Id", text)
    ad_name = extract_field("Ad Name", text)
    adgroup_id = extract_field("Adgroup Id", text)
    adgroup_name = extract_field("Adgroup Name", text)
    campaign_id = extract_field("Campaign Id", text)
    campaign_name = extract_field("Campaign Name", text)
    form_name = extract_field("Form Name", text)

    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    phone = normalize_phone(phone_raw) if phone_raw else ""
    if not phone:
        print(f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_raw}")
        return None

    # –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å –∑ —É—Å—ñ—Ö –¥–∞–Ω–∏—Ö
    description_parts = [
        f"Lead ID: {lead_id}",
        f"Form ID: {form_id}",
        f"Create Time: {create_time}",
        f"Form Name: {form_name}",
        f"Campaign: {campaign_name} (ID: {campaign_id})",
        f"Ad Group: {adgroup_name} (ID: {adgroup_id})",
        f"Ad: {ad_name} (ID: {ad_id})",
        f"Original Phone: {phone_raw}",
        "--- –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ª–∏—Å—Ç–∞ ---",
        text
    ]

    return {
        "full_name": name,
        "phone": phone,
        "email": "",  # –í –¥–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ email –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è
        "description": "\n".join(filter(None, description_parts)),
        "source": "email",
        "price": 0,
        "delivery_number": lead_id,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Lead Id —è–∫ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
    }


def fetch_emails_and_create_leads(start_date: datetime = None, settings_obj=None):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î email –ª–∏—Å—Ç–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –ª—ñ–¥–∏"""
    if not settings_obj:
        print("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ settings_obj")
        return

    EMAIL_USER = settings_obj.email
    EMAIL_PASS = settings_obj.app_password
    IMAP_HOST = settings_obj.imap_host
    FOLDER = settings_obj.folder
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ - –æ–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –ª–∏—Å—Ç–∏
    # KEYWORDS = [k.strip().lower() for k in settings_obj.allowed_subject_keyword.split(",") if k.strip()]
    KEYWORDS = []  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ - –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞

    print(f"üìß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   - Email: {EMAIL_USER}")
    print(f"   - IMAP: {IMAP_HOST}")
    print(f"   - –ü–∞–ø–∫–∞: {FOLDER}")
    print(f"   - –ü—Ä–∏–π–º–∞—î–º–æ –ª–∏—Å—Ç–∏ –≤—ñ–¥: –í–°–Ü–• –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫—ñ–≤")
    print(f"   - –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ —Ç–µ–º—ñ: {KEYWORDS if KEYWORDS else '–ù–ï –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û'}")

    try:
        mail = imaplib.IMAP4_SSL(IMAP_HOST)
        mail.login(EMAIL_USER, EMAIL_PASS)
        mail.select(FOLDER)

        if start_date is None:
            start_date = datetime.now()

        start_date_str = start_date.strftime("%d-%b-%Y")
        search_criteria = f'(SINCE "{start_date_str}")'
        status, messages = mail.search(None, search_criteria)

        if not messages[0]:
            print("üìß –ù–æ–≤–∏—Ö –ª–∏—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        email_ids = messages[0].split()
        print(f"üì¨ –ó–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç—ñ–≤: {len(email_ids)}")

        processed_count = 0
        created_count = 0
        skipped_count = 0

        for num in email_ids:
            try:
                _, msg_data = mail.fetch(num, '(RFC822)')
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)

                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
                from_raw = msg.get("From", "")
                from_email = parseaddr(from_raw)[1]

                # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–º—É –ª–∏—Å—Ç–∞
                subject_raw, encoding = decode_header(msg["Subject"])[0]
                subject = subject_raw.decode(encoding or 'utf-8') if isinstance(subject_raw, bytes) else subject_raw

                print(f"\nüì® –û–±—Ä–æ–±–ª—è—î–º–æ –ª–∏—Å—Ç –≤—ñ–¥: {from_email}")
                print(f"   –¢–µ–º–∞: {subject}")

                # –ù–ï –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞, –Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
                # –ü—Ä–∏–π–º–∞—î–º–æ –í–°–Ü –ª–∏—Å—Ç–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
                print(f"‚úÖ –ü—Ä–∏–π–º–∞—î–º–æ –ª–∏—Å—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏")

                # –ü–∞—Ä—Å–∏–º–æ —Ç—ñ–ª–æ –ª–∏—Å—Ç–∞
                body = parse_email_body(msg)
                print(f"üìÑ –¢—ñ–ª–æ –ª–∏—Å—Ç–∞ (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): {body[:200]}...")

                data = extract_lead_data(body)

                if not data:
                    print(f"‚ö†Ô∏è –õ–∏—Å—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –ª—ñ–¥–∞")
                    skipped_count += 1
                    continue

                processed_count += 1

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø–æ Lead ID
                if data.get("delivery_number"):
                    if Lead.objects.filter(delivery_number=data['delivery_number']).exists():
                        print(f"‚ö†Ô∏è Lead ID –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî {data['delivery_number']} ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                        skipped_count += 1
                        continue

                # –õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
                phone = data['phone']
                name = data['full_name']

                try:
                    # –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
                    client = Client.objects.get(phone=phone)
                    print(f"üìû –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name} ({phone})")

                    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ –∞–±–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è
                    if not client.full_name or client.full_name != name:
                        old_name = client.full_name
                        client.full_name = name
                        client.save()
                        print(f"üë§ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞: '{old_name}' ‚Üí '{name}'")

                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª—ñ—î–Ω—Ç–∞
                    data['assigned_to'] = client.assigned_to

                except Client.DoesNotExist:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
                    client = Client.objects.create(
                        phone=phone,
                        full_name=name,
                        email=data.get('email', ''),
                        type='individual',
                        status='active'
                    )
                    print(f"üë§ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {name} ({phone})")
                    data['assigned_to'] = None

                # –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–¥
                lead, context = create_lead_with_logic(data)
                notify_lead_created(lead)
                created_count += 1

                print(f"‚úÖ –õ—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {lead.full_name} ‚Äî {lead.phone} ‚Äî Lead ID: {lead.delivery_number}")
                print(f"   –°—Ç–∞—Ç—É—Å: {context['final_status']}, –ú–µ–Ω–µ–¥–∂–µ—Ä: {context['assigned_to']}")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–∏—Å—Ç–∞: {e}")
                import traceback
                traceback.print_exc()
                continue

        mail.logout()
        print(f"\nüìä –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   - –í—Å—å–æ–≥–æ –ª–∏—Å—Ç—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(email_ids)}")
        print(f"   - –õ–∏—Å—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {processed_count}")
        print(f"   - –õ—ñ–¥—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {created_count}")
        print(f"   - –õ–∏—Å—Ç—ñ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ email: {e}")
        import traceback
        traceback.print_exc()


def fetch_all_emails_and_create_leads(start_date: datetime = None):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ email –∞–∫–∞—É–Ω—Ç–∏"""
    for settings_obj in EmailIntegrationSettings.objects.all():
        print(f"\n{'=' * 60}")
        print(f"üìß –û–±—Ä–æ–±–ª—è—î–º–æ –∞–∫–∞—É–Ω—Ç: {settings_obj.name} ({settings_obj.email})")
        print(f"{'=' * 60}")
        fetch_emails_and_create_leads(start_date=start_date, settings_obj=settings_obj)