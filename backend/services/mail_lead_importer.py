# backend/services/mail_lead_importer.py - –ü–û–ö–†–ê–©–ï–ù–ê –í–ï–†–°–Ü–Ø

import imaplib
import email
from email.header import decode_header
import re
from datetime import datetime
from email.utils import parseaddr

from backend.models import Client, Lead, EmailIntegrationSettings
from backend.services.lead_creation_service import create_lead_with_logic
from backend.ws_notify import notify_lead_created


def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É"""
    digits = re.sub(r'\D', '', phone)
    if digits.startswith("0"):
        digits = "38" + digits
    elif not digits.startswith("38") and len(digits) == 10:
        digits = "38" + digits
    return digits


def parse_email_body(msg) -> str:
    """–í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑ email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    for part in msg.walk():
        if part.get_content_type() == "text/plain":
            return part.get_payload(decode=True).decode(part.get_content_charset() or 'utf-8')
    return ""


def is_lead_email(text: str, subject: str = "", sender: str = "") -> bool:
    """
    üîç –†–û–ó–£–ú–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê - —á–∏ —î email —Å–ø—Ä–∞–≤–∂–Ω—ñ–º –ª—ñ–¥–æ–º
    """

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –ª—ñ–¥—ñ–≤ –≤ —Ç–µ–º—ñ
    lead_subject_keywords = [
        'new lead', 'form submission', 'contact form', '–∑–∞—è–≤–∫–∞', '—Ñ–æ—Ä–º–∞',
        'lead id', 'form id', '–∑–∞—è–≤–ª–µ–Ω–∏–µ', '–∑–∞–ø—Ä–æ—Å', 'inquiry'
    ]

    subject_lower = subject.lower()
    for keyword in lead_subject_keywords:
        if keyword in subject_lower:
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–º—ñ: '{keyword}'")
            return True

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª—ñ–¥–∞ –≤ —Ç–µ–∫—Å—Ç—ñ
    lead_patterns = [
        r'\*\*form_id:\*\*',  # **form_id:**
        r'\*form_id:\*',  # *form_id:*
        r'form_id\s*:',  # form_id:
        r'\*\*Lead Id:\*\*',  # **Lead Id:**
        r'Lead Id\s*:',  # Lead Id:
        r'\*\*Name:\*\*',  # **Name:**
        r'Name\s*:',  # Name:
        r'\*\*Phone Number:\*\*',  # **Phone Number:**
        r'Phone Number\s*:',  # Phone Number:
    ]

    pattern_matches = 0
    for pattern in lead_patterns:
        if re.search(pattern, text, re.IGNORECASE):
            pattern_matches += 1

    # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ 3+ –ø–∞—Ç–µ—Ä–Ω—ñ–≤ - —Ü–µ –ª—ñ–¥
    if pattern_matches >= 3:
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {pattern_matches} –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –ª—ñ–¥–∞")
        return True

    # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è - –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ñ –ª–∏—Å—Ç–∏
    marketing_keywords = [
        'unsubscribe', '–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è', 'premium video', 'newsletter',
        'Elliott Wave', 'investment', 'trading', 'market analysis',
        'promotional', 'discount', 'sale', 'offer expires'
    ]

    text_lower = text.lower()
    marketing_found = []
    for keyword in marketing_keywords:
        if keyword.lower() in text_lower:
            marketing_found.append(keyword)

    if marketing_found:
        print(f"‚ùå –í–∏—è–≤–ª–µ–Ω–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: {marketing_found}")
        return False

    # 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    suspicious_senders = [
        'noreply', 'no-reply', 'newsletter', 'marketing', 'promo',
        'elliottwave', 'notifications', 'updates'
    ]

    sender_lower = sender.lower()
    for suspicious in suspicious_senders:
        if suspicious in sender_lower:
            print(f"‚ùå –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: '{suspicious}' –≤ '{sender}'")
            return False

    print(f"‚ö†Ô∏è –ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ç–∏–ø email - –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –ª—ñ–¥")
    return False


def extract_lead_data(text: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑ email –ª–∏—Å—Ç–∞ –ª–∏—à–µ —è–∫—â–æ —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ª—ñ–¥
    """

    def extract_field(label: str, text: str) -> str:
        """–í–∏—Ç—è–≥—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—è –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é"""
        # –§–æ—Ä–º–∞—Ç –∑ –ø–æ–¥–≤—ñ–π–Ω–∏–º–∏ –∑—ñ—Ä–æ—á–∫–∞–º–∏: **label:** value
        pattern = rf'\*\*{re.escape(label)}:\*\*\s*([^*]+?)(?=\*\*|$)'
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip()

        # –§–æ—Ä–º–∞—Ç –∑ –æ–¥–∏–Ω–∞—Ä–Ω–∏–º–∏ –∑—ñ—Ä–æ—á–∫–∞–º–∏: *label:* value
        pattern = rf'\*{re.escape(label)}:\*\s*([^*\n]+?)(?=\*|$|\n)'
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip()

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∑—ñ—Ä–æ—á–æ–∫
        pattern = rf'{re.escape(label)}:\s*([^*\n]+?)(?=\n|\*\*|\*|$)'
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip()

        return ""

    # –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ª—ñ–¥–∞
    required_fields = ["form_id", "Lead Id", "Name", "Phone Number"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    missing_fields = []
    for field in required_fields:
        if not extract_field(field, text):
            missing_fields.append(field)

    if missing_fields:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: {', '.join(missing_fields)}")
        return None

    # –í–∏—Ç—è–≥—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
    lead_id = extract_field("Lead Id", text)
    form_id = extract_field("form_id", text) or extract_field("Form ID", text)
    name = extract_field("Name", text)
    phone_raw = extract_field("Phone Number", text)

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
    create_time = extract_field("Create Time", text)
    ad_id = extract_field("Ad Id", text)
    ad_name = extract_field("Ad Name", text)
    adgroup_id = extract_field("Adgroup Id", text)
    adgroup_name = extract_field("Adgroup Name", text)
    campaign_id = extract_field("Campaign Id", text)
    campaign_name = extract_field("Campaign Name", text)
    form_name = extract_field("Form Name", text)

    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    phone = normalize_phone(phone_raw) if phone_raw else ""
    if not phone:
        print(f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_raw}")
        return None

    # –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å –∑ —É—Å—ñ—Ö –¥–∞–Ω–∏—Ö
    description_parts = [
        f"Lead ID: {lead_id}",
        f"Form ID: {form_id}",
        f"Create Time: {create_time}",
        f"Form Name: {form_name}",
        f"Campaign: {campaign_name} (ID: {campaign_id})",
        f"Ad Group: {adgroup_name} (ID: {adgroup_id})",
        f"Ad: {ad_name} (ID: {ad_id})",
        f"Original Phone: {phone_raw}",
        "--- –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ª–∏—Å—Ç–∞ ---",
        text
    ]

    return {
        "full_name": name,
        "phone": phone,
        "email": "",
        "description": "\n".join(filter(None, description_parts)),
        "source": "email",
        "price": 0,
        "delivery_number": lead_id,
        "order_number": form_id
    }


def fetch_emails_and_create_leads(start_date: datetime = None, settings_obj=None):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î email –ª–∏—Å—Ç–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –ª—ñ–¥–∏ –∑ —Ä–æ–∑—É–º–Ω–æ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é"""
    if not settings_obj:
        print("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ settings_obj")
        return

    EMAIL_USER = settings_obj.email
    EMAIL_PASS = settings_obj.app_password
    IMAP_HOST = settings_obj.imap_host
    FOLDER = settings_obj.folder

    print(f"üìß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   - Email: {EMAIL_USER}")
    print(f"   - IMAP: {IMAP_HOST}")
    print(f"   - –ü–∞–ø–∫–∞: {FOLDER}")
    print(f"   - –†–æ–∑—É–º–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è: ‚úÖ –£–í–Ü–ú–ö–ù–ï–ù–ê")

    try:
        mail = imaplib.IMAP4_SSL(IMAP_HOST)
        mail.login(EMAIL_USER, EMAIL_PASS)
        mail.select(FOLDER)

        if start_date is None:
            start_date = datetime.now()

        start_date_str = start_date.strftime("%d-%b-%Y")
        search_criteria = f'(SINCE "{start_date_str}")'
        status, messages = mail.search(None, search_criteria)

        if not messages[0]:
            print("üìß –ù–æ–≤–∏—Ö –ª–∏—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        email_ids = messages[0].split()
        print(f"üì¨ –ó–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç—ñ–≤: {len(email_ids)}")

        processed_count = 0
        created_count = 0
        skipped_count = 0
        filtered_count = 0  # –ù–æ–≤–∞ –º–µ—Ç—Ä–∏–∫–∞ - –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ

        for num in email_ids:
            try:
                _, msg_data = mail.fetch(num, '(RFC822)')
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)

                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
                from_raw = msg.get("From", "")
                from_email = parseaddr(from_raw)[1]

                # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–º—É –ª–∏—Å—Ç–∞
                subject_raw, encoding = decode_header(msg["Subject"])[0]
                subject = subject_raw.decode(encoding or 'utf-8') if isinstance(subject_raw, bytes) else subject_raw

                print(f"\nüì® –û–±—Ä–æ–±–ª—è—î–º–æ –ª–∏—Å—Ç:")
                print(f"   –í—ñ–¥: {from_email}")
                print(f"   –¢–µ–º–∞: {subject}")

                # –ü–∞—Ä—Å–∏–º–æ —Ç—ñ–ª–æ –ª–∏—Å—Ç–∞
                body = parse_email_body(msg)

                # üîç –†–û–ó–£–ú–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê - —á–∏ —î —Ü–µ –ª—ñ–¥–æ–º?
                if not is_lead_email(body, subject, from_email):
                    print(f"üö´ Email –Ω–µ —î –ª—ñ–¥–æ–º - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                    filtered_count += 1
                    continue

                print(f"‚úÖ Email —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —è–∫ –ª—ñ–¥ - –æ–±—Ä–æ–±–ª—è—î–º–æ")

                data = extract_lead_data(body)

                if not data:
                    print(f"‚ö†Ô∏è –õ–∏—Å—Ç —î –ª—ñ–¥–æ–º, –∞–ª–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –Ω–µ–≤—ñ—Ä–Ω–∞")
                    skipped_count += 1
                    continue

                processed_count += 1

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø–æ Lead ID
                if data.get("delivery_number"):
                    if Lead.objects.filter(delivery_number=data['delivery_number']).exists():
                        print(f"‚ö†Ô∏è Lead ID –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî {data['delivery_number']} ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                        skipped_count += 1
                        continue

                # –õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
                phone = data['phone']
                name = data['full_name']

                try:
                    client = Client.objects.get(phone=phone)
                    print(f"üìû –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name} ({phone})")

                    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ –∞–±–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è
                    if not client.full_name or client.full_name != name:
                        old_name = client.full_name
                        client.full_name = name
                        client.save()
                        print(f"üë§ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞: '{old_name}' ‚Üí '{name}'")

                    data['assigned_to'] = client.assigned_to

                except Client.DoesNotExist:
                    client = Client.objects.create(
                        phone=phone,
                        full_name=name,
                        email=data.get('email', ''),
                        type='individual',
                        status='active'
                    )
                    print(f"üë§ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {name} ({phone})")
                    data['assigned_to'] = None

                # –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–¥
                lead, context = create_lead_with_logic(data)
                notify_lead_created(lead)
                created_count += 1

                print(f"‚úÖ –õ—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {lead.full_name} ‚Äî {lead.phone} ‚Äî Lead ID: {lead.delivery_number}")
                print(f"   –°—Ç–∞—Ç—É—Å: {context['final_status']}, –ú–µ–Ω–µ–¥–∂–µ—Ä: {context['assigned_to']}")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–∏—Å—Ç–∞: {e}")
                import traceback
                traceback.print_exc()
                continue

        mail.logout()
        print(f"\nüìä –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   - –í—Å—å–æ–≥–æ –ª–∏—Å—Ç—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(email_ids)}")
        print(f"   - üö´ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (–Ω–µ –ª—ñ–¥–∏): {filtered_count}")
        print(f"   - üìã –õ–∏—Å—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ —è–∫ –ª—ñ–¥–∏: {processed_count}")
        print(f"   - ‚úÖ –õ—ñ–¥—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {created_count}")
        print(f"   - ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª—ñ–∫–∞—Ç–∏/–ø–æ–º–∏–ª–∫–∏): {skipped_count}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ email: {e}")
        import traceback
        traceback.print_exc()


def fetch_all_emails_and_create_leads(start_date: datetime = None):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ email –∞–∫–∞—É–Ω—Ç–∏ –∑ —Ä–æ–∑—É–º–Ω–æ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é"""
    for settings_obj in EmailIntegrationSettings.objects.all():
        print(f"\n{'=' * 60}")
        print(f"üìß –û–±—Ä–æ–±–ª—è—î–º–æ –∞–∫–∞—É–Ω—Ç: {settings_obj.name} ({settings_obj.email})")
        print(f"{'=' * 60}")
        fetch_emails_and_create_leads(start_date=start_date, settings_obj=settings_obj)


# üîß –¢–ï–°–¢–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –§–Ü–õ–¨–¢–†–ê–¶–Ü–á
def test_email_filter():
    """–¢–µ—Å—Ç—É—î —Ä–æ–±–æ—Ç—É —Ñ—ñ–ª—å—Ç—Ä–∞ email"""

    # –¢–µ—Å—Ç 1: –°–ø—Ä–∞–≤–∂–Ω—ñ–π –ª—ñ–¥
    lead_text = """
    **form_id:** 12345
    **Lead Id:** LEAD_67890
    **Name:** –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ
    **Phone Number:** +38067123456
    **Create Time:** 2024-06-25 10:30:00
    """

    result1 = is_lead_email(lead_text, "New Lead Submission", "forms@company.com")
    print(f"–¢–µ—Å—Ç 1 (—Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ª—ñ–¥): {'‚úÖ –ü–†–û–ô–®–û–í' if result1 else '‚ùå –ù–ï –ü–†–û–ô–®–û–í'}")

    # –¢–µ—Å—Ç 2: –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏–π –ª–∏—Å—Ç
    marketing_text = """
    We've unlocked a premium video for you for a limited time‚Ä¶
    Hi Elliott Waver,
    Most investors would say that oil prices are governed by supply and demand.
    Unsubscribe from future emails.
    """

    result2 = is_lead_email(marketing_text, "Premium Video Unlocked", "noreply@elliottwave.com")
    print(f"–¢–µ—Å—Ç 2 (–º–∞—Ä–∫–µ—Ç–∏–Ω–≥): {'‚úÖ –ü–†–û–ô–®–û–í' if not result2 else '‚ùå –ù–ï –ü–†–û–ô–®–û–í'}")

    return result1 and not result2


if __name__ == "__main__":
    test_email_filter()