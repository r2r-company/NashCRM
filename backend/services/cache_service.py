# backend/services/cache_service.py
"""
–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Å–µ—Ä–≤—ñ—Å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–µ—à–µ–º –¥–ª—è ERP/CRM —Å–∏—Å—Ç–µ–º–∏
–†–æ–∑—Ä–æ–±–ª–µ–Ω–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç—Ä–µ–± –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫–æ–≥–æ –æ–±–ª—ñ–∫—É
"""

from django.core.cache import cache
from django.conf import settings
from django.utils import timezone
from typing import Optional, List, Dict, Any
import logging
import json
import hashlib

logger = logging.getLogger('backend.cache_service')


class CacheService:
    """
    –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏
    """

    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–∞–Ω–∏—Ö –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è
    CACHE_CATEGORIES = {
        'financial': {
            'timeout': 30,  # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ - 30 —Å–µ–∫—É–Ω–¥
            'priority': 'high',
            'auto_invalidate': True
        },
        'operational': {
            'timeout': 60,  # –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ - 1 —Ö–≤–∏–ª–∏–Ω–∞
            'priority': 'medium',
            'auto_invalidate': True
        },
        'reference': {
            'timeout': 300,  # –î–æ–≤—ñ–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ - 5 —Ö–≤–∏–ª–∏–Ω
            'priority': 'low',
            'auto_invalidate': False
        },
        'static': {
            'timeout': 3600,  # –°—Ç–∞—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ - 1 –≥–æ–¥–∏–Ω–∞
            'priority': 'low',
            'auto_invalidate': False
        }
    }

    @classmethod
    def get_cache_key(cls, prefix: str, *args, **kwargs) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –∫–µ—à—É
        """
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á
        key_parts = [prefix]

        # –î–æ–¥–∞—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        for arg in args:
            if arg is not None:
                key_parts.append(str(arg))

        # –î–æ–¥–∞—î–º–æ —ñ–º–µ–Ω–æ–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        for k, v in sorted(kwargs.items()):
            if v is not None:
                key_parts.append(f"{k}:{v}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ö–µ—à –¥–ª—è –¥–æ–≤–≥–∏—Ö –∫–ª—é—á—ñ–≤
        key = "_".join(key_parts)
        if len(key) > 200:  # –û–±–º–µ–∂–µ–Ω–Ω—è Redis/Memcached
            key_hash = hashlib.md5(key.encode()).hexdigest()
            key = f"{prefix}_{key_hash}"

        return key

    @classmethod
    def set_financial_data(cls, key: str, data: Any, timeout: Optional[int] = None) -> None:
        """
        –ö–µ—à—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ –Ω–∞–π–≤–∏—â–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
        """
        category = cls.CACHE_CATEGORIES['financial']
        final_timeout = timeout or category['timeout']

        cache_key = cls.get_cache_key('fin', key)
        cache.set(cache_key, data, final_timeout)

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∞—É–¥–∏—Ç—É
        logger.info(f"üí∞ –ö–µ—à–æ–≤–∞–Ω–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ: {cache_key} (TTL: {final_timeout}s)")

    @classmethod
    def get_financial_data(cls, key: str, default: Any = None) -> Any:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ –∫–µ—à—É
        """
        cache_key = cls.get_cache_key('fin', key)
        data = cache.get(cache_key, default)

        if data is not None:
            logger.debug(f"üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ –∑ –∫–µ—à—É: {cache_key}")
        else:
            logger.debug(f"üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ –ù–ï –≤ –∫–µ—à—ñ: {cache_key}")

        return data

    @classmethod
    def set_operational_data(cls, key: str, data: Any, timeout: Optional[int] = None) -> None:
        """
        –ö–µ—à—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö (—Å—Ç–∞—Ç—É—Å–∏ –ª—ñ–¥—ñ–≤, –≤–æ—Ä–æ–Ω–∫–∞)
        """
        category = cls.CACHE_CATEGORIES['operational']
        final_timeout = timeout or category['timeout']

        cache_key = cls.get_cache_key('ops', key)
        cache.set(cache_key, data, final_timeout)

        logger.info(f"üìä –ö–µ—à–æ–≤–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ: {cache_key} (TTL: {final_timeout}s)")

    @classmethod
    def get_operational_data(cls, key: str, default: Any = None) -> Any:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        """
        cache_key = cls.get_cache_key('ops', key)
        return cache.get(cache_key, default)

    @classmethod
    def set_reference_data(cls, key: str, data: Any, timeout: Optional[int] = None) -> None:
        """
        –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö (–º–µ–Ω–µ–¥–∂–µ—Ä–∏, –∫–ª—ñ—î–Ω—Ç–∏)
        """
        category = cls.CACHE_CATEGORIES['reference']
        final_timeout = timeout or category['timeout']

        cache_key = cls.get_cache_key('ref', key)
        cache.set(cache_key, data, final_timeout)

        logger.info(f"üìã –ö–µ—à–æ–≤–∞–Ω–æ –¥–æ–≤—ñ–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ: {cache_key} (TTL: {final_timeout}s)")

    @classmethod
    def get_reference_data(cls, key: str, default: Any = None) -> Any:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        """
        cache_key = cls.get_cache_key('ref', key)
        return cache.get(cache_key, default)

    @classmethod
    def invalidate_lead_related_cache(cls, lead_id: int, manager_id: Optional[int] = None,
                                      client_phone: Optional[str] = None) -> None:
        """
        –†–æ–∑—É–º–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª—ñ–¥–∞
        –¶–ï –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –í–ò–†–Ü–®–ï–ù–ù–Ø –í–ê–®–û–á –ü–†–û–ë–õ–ï–ú–ò!
        """
        keys_to_delete = []

        # üöÄ –§–Ü–ù–ê–ù–°–û–í–Ü –î–ê–ù–Ü (–Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ)
        keys_to_delete.extend([
            cls.get_cache_key('fin', 'payments', lead_id),
            cls.get_cache_key('fin', 'lead_payments', lead_id),
            cls.get_cache_key('fin', 'payments', f'lead_{lead_id}'),
        ])

        # üöÄ –û–ü–ï–†–ê–¶–Ü–ô–ù–Ü –î–ê–ù–Ü (–≤–æ—Ä–æ–Ω–∫–∞, —Å—Ç–∞—Ç—É—Å–∏)
        keys_to_delete.extend([
            cls.get_cache_key('ops', 'funnel'),
            cls.get_cache_key('ops', 'funnel', 'None', 'None', 'None'),
            cls.get_cache_key('ops', 'funnel', None, None, None),
        ])

        if manager_id:
            keys_to_delete.extend([
                cls.get_cache_key('ops', 'funnel', None, None, manager_id),
                cls.get_cache_key('ops', 'funnel', 'None', 'None', manager_id),
            ])

        # üöÄ –ó–í–Ü–¢–ò (–≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏)
        keys_to_delete.extend([
            cls.get_cache_key('ops', 'leads_report'),
            cls.get_cache_key('ops', 'detailed_report'),
        ])

        # üöÄ –ö–õ–Ü–Ñ–ù–¢–°–¨–ö–Ü –î–ê–ù–Ü
        if client_phone:
            keys_to_delete.extend([
                cls.get_cache_key('ref', 'client_leads', client_phone),
                cls.get_cache_key('ref', 'client_payments', client_phone),
            ])

        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ
        for key in keys_to_delete:
            cache.delete(key)
            logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–µ—à—É: {key}")

        # üöÄ –í–ò–î–ê–õ–Ø–Ñ–ú–û –ü–û –®–ê–ë–õ–û–ù–ê–• (—è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)
        patterns_to_delete = [
            'funnel_*',
            'leads_report_*',
            'detailed_report_*',
            'payments_*',
            f'*lead_{lead_id}*',
        ]

        for pattern in patterns_to_delete:
            try:
                # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ —à–∞–±–ª–æ–Ω—É
                cache.delete_pattern(pattern)
                logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ —à–∞–±–ª–æ–Ω—É: {pattern}")
            except (AttributeError, NotImplementedError):
                # –Ø–∫—â–æ backend –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î delete_pattern
                pass

        logger.info(f"üîÑ –û—á–∏—â–µ–Ω–æ –∫–µ—à –¥–ª—è –ª—ñ–¥–∞ #{lead_id}")

    @classmethod
    def invalidate_manager_cache(cls, manager_id: int) -> None:
        """
        –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        """
        keys_to_delete = [
            cls.get_cache_key('ref', 'managers_list'),
            cls.get_cache_key('ref', 'managers'),
            cls.get_cache_key('ops', 'funnel', None, None, manager_id),
        ]

        for key in keys_to_delete:
            cache.delete(key)

        logger.info(f"üîÑ –û—á–∏—â–µ–Ω–æ –∫–µ—à –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ #{manager_id}")

    @classmethod
    def invalidate_client_cache(cls, client_id: int, phone: Optional[str] = None) -> None:
        """
        –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞
        """
        keys_to_delete = [
            cls.get_cache_key('ref', 'client_leads', client_id),
            cls.get_cache_key('ref', 'client_payments', client_id),
        ]

        if phone:
            keys_to_delete.extend([
                cls.get_cache_key('ref', 'client_leads', phone),
                cls.get_cache_key('ref', 'client_payments', phone),
            ])

        for key in keys_to_delete:
            cache.delete(key)

        logger.info(f"üîÑ –û—á–∏—â–µ–Ω–æ –∫–µ—à –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ #{client_id}")

    @classmethod
    def invalidate_all_reports(cls) -> None:
        """
        –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–≤—ñ—Ç—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ–±–µ—Ä–µ–∂–Ω–æ!)
        """
        patterns = [
            'fin_*',
            'ops_*',
            'funnel_*',
            'leads_report_*',
            'detailed_report_*',
            'payments_*',
        ]

        for pattern in patterns:
            try:
                cache.delete_pattern(pattern)
                logger.warning(f"üóëÔ∏è –ü–û–í–ù–ï –û–ß–ò–©–ï–ù–ù–Ø –ø–æ —à–∞–±–ª–æ–Ω—É: {pattern}")
            except (AttributeError, NotImplementedError):
                pass

        logger.warning("üîÑ –ü–û–í–ù–ï –û–ß–ò–©–ï–ù–ù–Ø –ö–ï–®–£ –ó–í–Ü–¢–Ü–í")

    @classmethod
    def get_cache_stats(cls) -> Dict[str, Any]:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        """
        try:
            # –Ø–∫—â–æ –∫–µ—à –ø—ñ–¥—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = cache.get_stats() if hasattr(cache, 'get_stats') else {}

            return {
                'backend': cache.__class__.__name__,
                'stats': stats,
                'categories': cls.CACHE_CATEGORIES,
                'timestamp': timezone.now().isoformat(),
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É: {e}")
            return {'error': str(e)}

    @classmethod
    def warm_up_cache(cls) -> None:
        """
        –ü—Ä–æ–≥—Ä—ñ–≤ –∫–µ—à—É –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        """
        from backend.models import Lead, CustomUser

        try:
            # –ü—Ä–æ–≥—Ä—ñ–≤–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
            managers = CustomUser.objects.filter(interface_type='accountant').count()
            cls.set_reference_data('managers_count', managers)

            # –ü—Ä–æ–≥—Ä—ñ–≤–∞—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            leads_count = Lead.objects.count()
            cls.set_operational_data('total_leads', leads_count)

            logger.info("üî• –ö–µ—à –ø—Ä–æ–≥—Ä—ñ—Ç–∏–π –±–∞–∑–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥—Ä—ñ–≤—É –∫–µ—à—É: {e}")


# üöÄ –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ö–ï–®–£–í–ê–ù–ù–Ø
def cache_result(category: str = 'operational', timeout: Optional[int] = None,
                 key_prefix: str = 'auto'):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∫–µ—à—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ–π

    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    @cache_result('financial', timeout=30, key_prefix='payments')
    def get_payments_sum(lead_id):
        return calculate_payments(lead_id)
    """

    def decorator(func):
        def wrapper(*args, **kwargs):
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
            cache_key = CacheService.get_cache_key(
                key_prefix,
                func.__name__,
                *args,
                **kwargs
            )

            # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –∫–µ—à—É
            if category == 'financial':
                result = CacheService.get_financial_data(cache_key)
            elif category == 'operational':
                result = CacheService.get_operational_data(cache_key)
            elif category == 'reference':
                result = CacheService.get_reference_data(cache_key)
            else:
                result = cache.get(cache_key)

            if result is not None:
                return result

            # –í–∏–∫–æ–Ω—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞ –∫–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = func(*args, **kwargs)

            if category == 'financial':
                CacheService.set_financial_data(cache_key, result, timeout)
            elif category == 'operational':
                CacheService.set_operational_data(cache_key, result, timeout)
            elif category == 'reference':
                CacheService.set_reference_data(cache_key, result, timeout)
            else:
                cache.set(cache_key, result, timeout or 300)

            return result

        return wrapper

    return decorator


# üöÄ –ú–Ü–î–õ–í–ï–† –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –û–ß–ò–©–ï–ù–ù–Ø –ö–ï–®–£
class SmartCacheMiddleware:
    """
    –ú—ñ–¥–ª–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –¥–∞–Ω–∏—Ö
    """

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)

        # –Ø–∫—â–æ —Ü–µ POST/PUT/PATCH –∑–∞–ø–∏—Ç –¥–æ API –ª—ñ–¥—ñ–≤
        if (request.method in ['POST', 'PUT', 'PATCH', 'DELETE'] and
                '/api/leads/' in request.path):
            # –û—á–∏—â—É—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö
            CacheService.invalidate_all_reports()
            logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –ª—ñ–¥—ñ–≤")

        return response


# üöÄ –ö–û–ú–ê–ù–î–ê DJANGO –î–õ–Ø –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–ï–®–ï–ú
