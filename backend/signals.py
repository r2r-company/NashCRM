# backend/signals.py - –ù–ê–î–Ü–ô–ù–ê –í–ï–†–°–Ü–Ø –ë–ï–ó –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
"""
Django Signals –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ ERP/CRM —Å–∏—Å—Ç–µ–º–∏
–ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ transaction.on_commit()
"""

from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.utils import timezone
from django.db import models, transaction
import logging

from .models import Lead, Client, LeadPaymentOperation, CustomUser, ClientInteraction, ClientTask
from .validators.lead_status_validator import LeadStatusValidator

logger = logging.getLogger('backend.signals')

# üõ°Ô∏è –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
_processing_leads = set()  # –ú–Ω–æ–∂–∏–Ω–∞ ID –ª—ñ–¥—ñ–≤, —â–æ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è


@receiver(pre_save, sender=Lead)
def lead_pre_save(sender, instance, **kwargs):
    """
    –û–±—Ä–æ–±–∫–∞ –ª—ñ–¥–∞ –ü–ï–†–ï–î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º - —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å
    """
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ª—ñ–¥—ñ–≤
    if instance.pk:
        try:
            old_lead = Lead.objects.get(pk=instance.pk)
            if old_lead.status != instance.status:
                instance.status_updated_at = timezone.now()
                print(f"üîÑ –°–ò–ì–ù–ê–õ: –°—Ç–∞—Ç—É—Å –ª—ñ–¥–∞ #{instance.pk} –∑–º—ñ–Ω–µ–Ω–æ: {old_lead.status} ‚Üí {instance.status}")
        except Lead.DoesNotExist:
            pass


@receiver(post_save, sender=Lead)
def lead_post_save(sender, instance, created, **kwargs):
    """
    –û–±—Ä–æ–±–∫–∞ –ª—ñ–¥–∞ –ü–Ü–°–õ–Ø –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é
    """
    if created and instance.pk not in _processing_leads:
        # üõ°Ô∏è –î–æ–¥–∞—î–º–æ ID –≤ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
        _processing_leads.add(instance.pk)

        print(f"‚úÖ –ù–û–í–ò–ô –õ–Ü–î: #{instance.pk} - {instance.full_name}")

        def process_new_lead():
            """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ª—ñ–¥–∞ –ü–Ü–°–õ–Ø –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
            try:
                # 1. –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø/–û–ù–û–í–õ–ï–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–ê
                if instance.phone:
                    normalized_phone = Client.normalize_phone(instance.phone)
                    client, created = Client.objects.get_or_create(
                        phone=normalized_phone,
                        defaults={
                            'full_name': instance.full_name or '–ö–ª—ñ—î–Ω—Ç',
                            'email': instance.email or '',
                        }
                    )

                    if created:
                        print(f"üë§ –°–¢–í–û–†–ï–ù–û –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name}")
                    else:
                        print(f"üë§ –ó–ù–ê–ô–î–ï–ù–û –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name}")

                # 2. –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –ü–ï–†–ï–•–Ü–î queued ‚Üí in_work (–ó –í–ê–õ–Ü–î–ê–¶–Ü–Ñ–Æ)
                current_lead = Lead.objects.get(pk=instance.pk)
                if (current_lead.status == 'queued' and
                        current_lead.assigned_to and
                        not Lead.objects.filter(
                            assigned_to=current_lead.assigned_to,
                            status='in_work'
                        ).exclude(pk=current_lead.pk).exists()):

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–ª–∏–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥
                    from backend.validators.lead_status_validator import LeadStatusValidator
                    can_transition, reason = LeadStatusValidator.can_transition(
                        'queued', 'in_work', current_lead
                    )

                    if can_transition:
                        current_lead.status = 'in_work'
                        current_lead.status_updated_at = timezone.now()
                        current_lead.save()
                        print(f"üöÄ –õ—ñ–¥ #{current_lead.pk} –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ä–æ–±–æ—Ç—É")

                from django.core.cache import cache
                cache.clear()

            except Exception as e:
                print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ –ª—ñ–¥–∞: {e}")
            finally:
                _processing_leads.discard(instance.pk)

        transaction.on_commit(process_new_lead)

    elif not created:
        print(f"üîÑ –û–ù–û–í–õ–ï–ù–û –ª—ñ–¥ #{instance.pk}")
        from django.core.cache import cache
        cache.clear()


@receiver(post_save, sender=LeadPaymentOperation)
def payment_operation_created(sender, instance, created, **kwargs):
    """
    –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º
    """
    if created:
        print(f"üí∞ –ü–õ–ê–¢–Ü–ñ: {instance.operation_type} {instance.amount} –¥–ª—è –ª—ñ–¥–∞ #{instance.lead.pk}")

        # –û—á–∏—â—É—î–º–æ –∫–µ—à
        from django.core.cache import cache
        cache.clear()

        # üî• –ê–í–¢–û–ó–ê–í–ï–†–®–ï–ù–ù–Ø –ü–†–ò –ü–û–í–ù–Ü–ô –û–ü–õ–ê–¢–Ü (–¢–Ü–õ–¨–ö–ò –î–õ–Ø –û–¢–†–ò–ú–ê–ù–ò–• –ö–û–®–¢–Ü–í)
        if instance.operation_type == 'received':
            def check_full_payment():
                try:
                    lead = Lead.objects.get(pk=instance.lead.pk)

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ª—ñ–¥ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
                    if lead.status == 'on_the_way' and LeadStatusValidator.is_fully_paid(lead):
                        can_complete, reason = LeadStatusValidator.can_transition(
                            lead.status, 'completed', lead
                        )

                        if can_complete:
                            lead.status = 'completed'
                            lead.status_updated_at = timezone.now()
                            lead.save()  # ‚Üê –í–ò–ö–õ–ò–ö–ê–Ñ –°–ò–ì–ù–ê–õ–ò!

                            print(f"‚úÖ –õ—ñ–¥ #{lead.pk} –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–≤–Ω—É –æ–ø–ª–∞—Ç—É")
                        else:
                            print(f"‚ö†Ô∏è –õ—ñ–¥ #{lead.pk} –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–ø–ª–∞—á–µ–Ω–∏–π, –∞–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π: {reason}")

                    # –õ–æ–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç
                    payment_info = LeadStatusValidator.get_payment_info(lead)
                    print(
                        f"üìä –õ—ñ–¥ #{lead.pk}: –æ–ø–ª–∞—á–µ–Ω–æ {payment_info['received']} –∑ {payment_info['price']} –≥—Ä–Ω ({payment_info['payment_percentage']}%)")

                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {e}")

            transaction.on_commit(check_full_payment)


@receiver(pre_save, sender=Lead)
def lead_status_change_logger(sender, instance, **kwargs):
    """
    –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
    """
    if instance.pk:
        try:
            old_lead = Lead.objects.get(pk=instance.pk)

            # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è
            if old_lead.status != instance.status:
                instance.status_updated_at = timezone.now()

                # –õ–æ–≥—É—î–º–æ –∑–º—ñ–Ω—É –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
                payment_info = LeadStatusValidator.get_payment_info(old_lead)

                print(f"üîÑ –ó–ú–Ü–ù–ê –°–¢–ê–¢–£–°–£ –ª—ñ–¥–∞ #{instance.pk}:")
                print(f"   üìä {old_lead.full_name} ({old_lead.phone})")
                print(
                    f"   üìà {LeadStatusValidator.STATUS_NAMES.get(old_lead.status)} ‚Üí {LeadStatusValidator.STATUS_NAMES.get(instance.status)}")
                print(
                    f"   üí∞ –û–ø–ª–∞—Ç–∞: {payment_info['received']}/{payment_info['price']} –≥—Ä–Ω ({payment_info['payment_percentage']}%)")

                # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ –Ω–∞–º–∞–≥–∞—é—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –±–µ–∑ –ø–æ–≤–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
                if instance.status == 'completed' and not LeadStatusValidator.is_fully_paid(old_lead):
                    print(f"‚ö†Ô∏è –£–í–ê–ì–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–µ–∑ –ø–æ–≤–Ω–æ—ó –æ–ø–ª–∞—Ç–∏! –ù–µ –≤–∏—Å—Ç–∞—á–∞—î {payment_info['shortage']} –≥—Ä–Ω")

        except Lead.DoesNotExist:
            pass



@receiver(post_save, sender=Client)
def client_saved(sender, instance, created, **kwargs):
    """
    –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
    """
    if created:
        print(f"üë§ –ö–õ–Ü–Ñ–ù–¢ –°–¢–í–û–†–ï–ù–û: {instance.full_name} ({instance.phone})")
    else:
        print(f"üë§ –ö–õ–Ü–Ñ–ù–¢ –û–ù–û–í–õ–ï–ù–û: {instance.full_name} ({instance.phone})")


# üöÄ –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò
def check_duplicates():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    from django.db.models import Count

    # –ö–ª—ñ—î–Ω—Ç–∏-–¥—É–±–ª—ñ–∫–∞—Ç–∏
    duplicate_clients = Client.objects.values('phone').annotate(
        count=Count('id')
    ).filter(count__gt=1)

    if duplicate_clients:
        print("‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–Ü –î–£–ë–õ–Ü–ö–ê–¢–ò –ö–õ–Ü–Ñ–ù–¢–Ü–í:")
        for dup in duplicate_clients:
            clients = Client.objects.filter(phone=dup['phone'])
            print(f"üìû {dup['phone']}: {dup['count']} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
            for client in clients:
                print(f"   - ID: {client.id}, –Ü–º'—è: {client.full_name}")
    else:
        print("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")


print("üì° –ù–∞–¥—ñ–π–Ω—ñ Django signals –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ (–∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)!")


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –ú–ï–¢–†–ò–ö –ö–õ–Ü–Ñ–ù–¢–ê –ü–†–ò –ó–ú–Ü–ù–Ü –õ–Ü–î–ê
@receiver(post_save, sender=Lead)
def update_client_metrics_on_lead_change(sender, instance, created, **kwargs):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª—ñ–¥–∞
    """
    if instance.phone:
        def update_metrics():
            try:
                client = Client.objects.get(phone=instance.phone)
                client.update_client_metrics()
                print(f"üìä –û–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Ç—Ä–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name}")
            except Client.DoesNotExist:
                print(f"‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {instance.phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")

        transaction.on_commit(update_metrics)


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –ú–ï–¢–†–ò–ö –ü–†–ò –ü–õ–ê–¢–ï–ñ–ê–•
@receiver(post_save, sender=LeadPaymentOperation)
def update_client_metrics_on_payment(sender, instance, created, **kwargs):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º—É –ø–ª–∞—Ç–µ–∂—ñ
    """
    if created and instance.operation_type == 'received':
        def update_metrics():
            try:
                client = Client.objects.get(phone=instance.lead.phone)
                old_total = float(client.total_spent)
                client.update_client_metrics()
                new_total = float(client.total_spent)

                print(f"üí∞ –ü–ª–∞—Ç—ñ–∂ {instance.amount} –≥—Ä–Ω –≤—ñ–¥ {client.full_name}")
                print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {old_total} ‚Üí {new_total} –≥—Ä–Ω")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–ª—ñ—î–Ω—Ç –ø–µ—Ä–µ–π—à–æ–≤ –≤ –Ω–æ–≤–∏–π —Å–µ–≥–º–µ–Ω—Ç
                if client.akb_segment == 'vip' and old_total < 50000:
                    print(f"üéâ {client.full_name} —Å—Ç–∞–≤ VIP –∫–ª—ñ—î–Ω—Ç–æ–º!")

            except Client.DoesNotExist:
                print(f"‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –ø–ª–∞—Ç–µ–∂—É {instance.id}")

        transaction.on_commit(update_metrics)


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø –ó–ê–î–ê–ß –î–õ–Ø FOLLOW-UP
@receiver(post_save, sender=ClientInteraction)
def create_follow_up_task(sender, instance, created, **kwargs):
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –¥–ª—è follow-up —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    """
    if created and instance.follow_up_date:
        def create_task():
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –≤–∂–µ –∑–∞–¥–∞—á—ñ –Ω–∞ —Ü—é –¥–∞—Ç—É
                existing_task = ClientTask.objects.filter(
                    client=instance.client,
                    due_date__date=instance.follow_up_date.date(),
                    status__in=['pending', 'in_progress']
                ).exists()

                if not existing_task:
                    task = ClientTask.objects.create(
                        client=instance.client,
                        title=f"Follow-up –ø–æ –≤–∑–∞—î–º–æ–¥—ñ—ó: {instance.subject}",
                        description=f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –≤–∑–∞—î–º–æ–¥—ñ—ó –≤—ñ–¥ {instance.created_at.strftime('%d.%m.%Y')}",
                        assigned_to=instance.client.assigned_to or instance.created_by,
                        priority='medium',
                        due_date=instance.follow_up_date
                    )
                    print(f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–¥–∞—á—É follow-up –¥–ª—è {instance.client.full_name}")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ follow-up: {e}")

        transaction.on_commit(create_task)


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –î–ê–¢–ò –û–°–¢–ê–ù–ù–¨–û–ì–û –ö–û–ù–¢–ê–ö–¢–£
@receiver(post_save, sender=ClientInteraction)
def update_last_contact_date(sender, instance, created, **kwargs):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
    """
    if created:
        def update_contact_date():
            try:
                client = instance.client
                client.last_contact_date = instance.created_at

                # –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó
                if client.temperature == 'cold':
                    client.temperature = 'warm'
                    print(f"üå°Ô∏è {client.full_name}: cold ‚Üí warm (–ø—ñ—Å–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É)")

                Client.objects.filter(id=client.id).update(
                    last_contact_date=client.last_contact_date,
                    temperature=client.temperature
                )

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É: {e}")

        transaction.on_commit(update_contact_date)


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê –ù–û–í–û–ú–£ –ö–õ–Ü–Ñ–ù–¢–£
@receiver(post_save, sender=Client)
def auto_assign_manager_to_client(sender, instance, created, **kwargs):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–æ–≤–æ–º—É –∫–ª—ñ—î–Ω—Ç—É
    """
    if created and not instance.assigned_to:
        def assign_manager():
            try:
                from backend.services.lead_creation_service import get_free_manager

                manager = get_free_manager()
                if manager:
                    Client.objects.filter(id=instance.id).update(assigned_to=manager)
                    print(f"üë§ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager.username} –∫–ª—ñ—î–Ω—Ç—É {instance.full_name}")

                    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –∑–∞–¥–∞—á—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    ClientTask.objects.create(
                        client=instance,
                        title=f"–ü–µ—Ä—à—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç –∑ –Ω–æ–≤–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º: {instance.full_name}",
                        description=f"–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ. –¢–µ–ª–µ—Ñ–æ–Ω: {instance.phone}",
                        assigned_to=manager,
                        priority='medium',
                        due_date=timezone.now() + timezone.timedelta(hours=24)
                    )
                else:
                    print(f"‚ö†Ô∏è –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {instance.full_name}")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

        transaction.on_commit(assign_manager)


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø –ü–û–ß–ê–¢–ö–û–í–û–á –í–ó–ê–Ñ–ú–û–î–Ü–á
@receiver(post_save, sender=Lead)
def create_initial_interaction(sender, instance, created, **kwargs):
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ª—ñ–¥–∞
    """
    if created:
        def create_interaction():
            try:
                client = Client.objects.get(phone=instance.phone)

                # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∑–∞—î–º–æ–¥—ñ—é —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –ª—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞
                existing_interactions = ClientInteraction.objects.filter(client=client).count()
                if existing_interactions == 0:
                    ClientInteraction.objects.create(
                        client=client,
                        interaction_type='other',
                        direction='incoming',
                        subject=f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ª—ñ–¥: {instance.full_name}",
                        description=f"–ù–æ–≤–∏–π –ª—ñ–¥ –≤—ñ–¥ {instance.source or '–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞'}. "
                                    f"–û–ø–∏—Å: {instance.description or '–ë–µ–∑ –æ–ø–∏—Å—É'}",
                        outcome='follow_up',
                        created_by=instance.assigned_to or client.assigned_to
                    )
                    print(f"üìù –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –≤–∑–∞—î–º–æ–¥—ñ—é –¥–ª—è {client.full_name}")

            except Client.DoesNotExist:
                print(f"‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –ª—ñ–¥–∞ {instance.id}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó: {e}")

        transaction.on_commit(create_interaction)


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ü–ï–†–ï–í–ï–î–ï–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–ê –í "–ì–ê–†–Ø–ß–Ü"
@receiver(post_save, sender=Lead)
def update_client_temperature_on_repeated_leads(sender, instance, created, **kwargs):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –ª—ñ–¥–∞—Ö
    """
    if created:
        def update_temperature():
            try:
                client = Client.objects.get(phone=instance.phone)
                leads_count = Lead.objects.filter(phone=client.phone).count()

                # –Ø–∫—â–æ —Ü–µ 2-–π –ª—ñ–¥ - –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Ç–µ–ø–ª—ñ
                if leads_count == 2 and client.temperature == 'cold':
                    Client.objects.filter(id=client.id).update(temperature='warm')
                    print(f"üå°Ô∏è {client.full_name}: cold ‚Üí warm (2-–π –ª—ñ–¥)")

                # –Ø–∫—â–æ —Ü–µ 3-–π –ª—ñ–¥ - –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –≥–∞—Ä—è—á—ñ
                elif leads_count >= 3 and client.temperature in ['cold', 'warm']:
                    Client.objects.filter(id=client.id).update(temperature='hot')
                    print(f"üî• {client.full_name}: ‚Üí hot (3+ –ª—ñ–¥—ñ–≤)")

                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    ClientTask.objects.create(
                        client=client,
                        title=f"üî• –ì–ê–†–Ø–ß–ò–ô –ö–õ–Ü–Ñ–ù–¢: {client.full_name}",
                        description=f"–ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–∏–≤ {leads_count} –ª—ñ–¥—ñ–≤! –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –∑–≤'—è–∑–∞—Ç–∏—Å—è!",
                        assigned_to=client.assigned_to or instance.assigned_to,
                        priority='urgent',
                        due_date=timezone.now() + timezone.timedelta(hours=2)
                    )

            except Client.DoesNotExist:
                pass
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏: {e}")

        transaction.on_commit(update_temperature)


# üî• –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø –ü–†–û –†–ò–ó–ò–ö –í–Ü–î–¢–û–ö–£
@receiver(post_save, sender=Client)
def check_churn_risk(sender, instance, created, **kwargs):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫—É –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç–∞
    """
    if not created and instance.rfm_recency and instance.rfm_recency > 90:
        def create_churn_warning():
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –≤–∂–µ –∑–∞–¥–∞—á—ñ –ø—Ä–æ —Ä–∏–∑–∏–∫ –≤—ñ–¥—Ç–æ–∫—É
                existing_task = ClientTask.objects.filter(
                    client=instance,
                    title__icontains='—Ä–∏–∑–∏–∫ –≤—ñ–¥—Ç–æ–∫—É',
                    status__in=['pending', 'in_progress']
                ).exists()

                if not existing_task and instance.total_orders > 0:
                    priority = 'high' if instance.total_spent > 10000 else 'medium'

                    ClientTask.objects.create(
                        client=instance,
                        title=f"‚ö†Ô∏è –†–∏–∑–∏–∫ –≤—ñ–¥—Ç–æ–∫—É: {instance.full_name}",
                        description=f"–ö–ª—ñ—î–Ω—Ç –Ω–µ –∫—É–ø—É–≤–∞–≤ {instance.rfm_recency} –¥–Ω—ñ–≤. "
                                    f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {instance.total_spent} –≥—Ä–Ω. "
                                    f"–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è!",
                        assigned_to=instance.assigned_to,
                        priority=priority,
                        due_date=timezone.now() + timezone.timedelta(days=1)
                    )
                    print(f"‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫ –≤—ñ–¥—Ç–æ–∫—É: {instance.full_name}")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {e}")

        transaction.on_commit(create_churn_warning)


# üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ó–ê–ö–†–ò–¢–¢–Ø –ó–ê–î–ê–ß –ü–†–ò –ü–û–ö–£–ü–¶–Ü
@receiver(post_save, sender=LeadPaymentOperation)
def auto_complete_tasks_on_purchase(sender, instance, created, **kwargs):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –∫–ª—ñ—î–Ω—Ç–∞
    """
    if created and instance.operation_type == 'received':
        def complete_tasks():
            try:
                client = Client.objects.get(phone=instance.lead.phone)

                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑–∞–¥–∞—á—ñ —Ç–∏–ø—É "–∫–æ–Ω—Ç–∞–∫—Ç", "follow-up", "—Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è"
                tasks_to_complete = ClientTask.objects.filter(
                    client=client,
                    status__in=['pending', 'in_progress']
                ).filter(
                    Q(title__icontains='–∫–æ–Ω—Ç–∞–∫—Ç') |
                    Q(title__icontains='follow-up') |
                    Q(title__icontains='—Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è') |
                    Q(title__icontains='–≥–∞—Ä—è—á–∏–π')
                )

                completed_count = 0
                for task in tasks_to_complete:
                    task.status = 'completed'
                    task.completed_at = timezone.now()
                    task.save()
                    completed_count += 1

                if completed_count > 0:
                    print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ {completed_count} –∑–∞–¥–∞—á –¥–ª—è {client.full_name} –ø—ñ—Å–ª—è –ø–æ–∫—É–ø–∫–∏")

            except Client.DoesNotExist:
                pass
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–¥–∞—á: {e}")

        transaction.on_commit(complete_tasks)


# üî• –ó–í–Ü–¢ –ü–†–û –©–û–î–ï–ù–ù–£ –ê–ö–¢–ò–í–ù–Ü–°–¢–¨ CRM
@receiver(post_save, sender=ClientInteraction)
def daily_crm_activity_tracking(sender, instance, created, **kwargs):
    """
    –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ CRM
    """
    if created:
        def track_activity():
            try:
                from django.core.cache import cache
                today = timezone.now().date()
                cache_key = f"crm_activity_{today}_{instance.created_by.id}"

                # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                current_count = cache.get(cache_key, 0)
                cache.set(cache_key, current_count + 1, 86400)  # 24 –≥–æ–¥–∏–Ω–∏

                print(f"üìà –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å {instance.created_by.username}: {current_count + 1} –≤–∑–∞—î–º–æ–¥—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")

        transaction.on_commit(track_activity)


print("üöÄ –†–æ–∑—à–∏—Ä–µ–Ω—ñ CRM —Å–∏–≥–Ω–∞–ª–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!")


@receiver(post_save, sender=Lead)
def critical_states_monitor(sender, instance, created, **kwargs):
    """
    –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å—Ç–∞–Ω—ñ–≤ –ª—ñ–¥—ñ–≤
    """
    if not created:  # –¢—ñ–ª—å–∫–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å
        def check_critical_states():
            try:
                payment_info = LeadStatusValidator.get_payment_info(instance)

                # üö® –ü–µ—Ä–µ–ø–ª–∞—Ç–∞
                if payment_info['overpaid'] > 0:
                    print(f"üö® –ü–ï–†–ï–ü–õ–ê–¢–ê: –õ—ñ–¥ #{instance.pk} –ø–µ—Ä–µ–ø–ª–∞—á–µ–Ω–æ –Ω–∞ {payment_info['overpaid']} –≥—Ä–Ω!")

                # ‚ö†Ô∏è –õ—ñ–¥ –≤ –¥–æ—Ä–æ–∑—ñ –∞–ª–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∏–π
                if instance.status == 'on_the_way' and payment_info['shortage'] > 0:
                    print(f"‚ö†Ô∏è –£–í–ê–ì–ê: –õ—ñ–¥ #{instance.pk} –≤ –¥–æ—Ä–æ–∑—ñ, –∞–ª–µ –Ω–µ –¥–æ–ø–ª–∞—á–µ–Ω–æ {payment_info['shortage']} –≥—Ä–Ω")

                # üí∞ –õ—ñ–¥ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                if (instance.status == 'on_the_way' and
                        LeadStatusValidator.is_fully_paid(instance)):
                    print(f"‚úÖ –ì–û–¢–û–í–û: –õ—ñ–¥ #{instance.pk} –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ - –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–ø–ª–∞—á–µ–Ω–æ!")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")

        transaction.on_commit(check_critical_states)


print("üöÄ –û–Ω–æ–≤–ª–µ–Ω—ñ Django signals –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!")