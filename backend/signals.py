# backend/signals.py - –ù–ê–î–Ü–ô–ù–ê –í–ï–†–°–Ü–Ø –ë–ï–ó –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
"""
Django Signals –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ ERP/CRM —Å–∏—Å—Ç–µ–º–∏
–ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ transaction.on_commit()
"""

from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.utils import timezone
from django.db import models, transaction
import logging

from .models import Lead, Client, LeadPaymentOperation, CustomUser

logger = logging.getLogger('backend.signals')

# üõ°Ô∏è –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
_processing_leads = set()  # –ú–Ω–æ–∂–∏–Ω–∞ ID –ª—ñ–¥—ñ–≤, —â–æ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è


@receiver(pre_save, sender=Lead)
def lead_pre_save(sender, instance, **kwargs):
    """
    –û–±—Ä–æ–±–∫–∞ –ª—ñ–¥–∞ –ü–ï–†–ï–î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º - —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å
    """
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –ª—ñ–¥—ñ–≤
    if instance.pk:
        try:
            old_lead = Lead.objects.get(pk=instance.pk)
            if old_lead.status != instance.status:
                instance.status_updated_at = timezone.now()
                print(f"üîÑ –°–ò–ì–ù–ê–õ: –°—Ç–∞—Ç—É—Å –ª—ñ–¥–∞ #{instance.pk} –∑–º—ñ–Ω–µ–Ω–æ: {old_lead.status} ‚Üí {instance.status}")
        except Lead.DoesNotExist:
            pass


@receiver(post_save, sender=Lead)
def lead_post_save(sender, instance, created, **kwargs):
    """
    –û–±—Ä–æ–±–∫–∞ –ª—ñ–¥–∞ –ü–Ü–°–õ–Ø –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è - –¢–Ü–õ–¨–ö–ò –¥–ª—è –Ω–æ–≤–∏—Ö –ª—ñ–¥—ñ–≤
    """
    if created and instance.pk not in _processing_leads:
        # üõ°Ô∏è –î–æ–¥–∞—î–º–æ ID –≤ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
        _processing_leads.add(instance.pk)

        print(f"‚úÖ –°–ò–ì–ù–ê–õ: –õ—ñ–¥ #{instance.pk} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {instance.full_name}")

        def process_new_lead():
            """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ª—ñ–¥–∞ –ü–Ü–°–õ–Ø –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
            try:
                # 1. –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –°–¢–í–û–†–ï–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–ê
                if instance.phone:
                    normalized_phone = Client.normalize_phone(instance.phone)

                    # üõ°Ô∏è –ü–û–î–í–Ü–ô–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –Ω–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
                    if not Client.objects.filter(phone=normalized_phone).exists():
                        client = Client.objects.create(
                            phone=normalized_phone,
                            full_name=instance.full_name or '–ö–ª—ñ—î–Ω—Ç',
                            email=instance.email or '',
                        )
                        print(f"üë§ –°–¢–í–û–†–ï–ù–û –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name} ({client.phone})")
                    else:
                        client = Client.objects.get(phone=normalized_phone)
                        print(f"üë§ –ó–ù–ê–ô–î–ï–ù–û —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name}")

                        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ
                        updated = False
                        if not client.full_name or client.full_name == '–ö–ª—ñ—î–Ω—Ç':
                            if instance.full_name:
                                client.full_name = instance.full_name
                                updated = True
                        if not client.email and instance.email:
                            client.email = instance.email
                            updated = True

                        if updated:
                            client.save()
                            print(f"üë§ –û–ù–û–í–õ–ï–ù–û –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name}")

                # 2. –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –ü–ï–†–ï–•–Ü–î queued ‚Üí in_work
                current_lead = Lead.objects.get(pk=instance.pk)
                if (current_lead.status == 'queued' and
                        current_lead.assigned_to and
                        not Lead.objects.filter(
                            assigned_to=current_lead.assigned_to,
                            status='in_work'
                        ).exclude(pk=current_lead.pk).exists()):
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ update() —â–æ–± –ù–ï –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏ –∑–Ω–æ–≤—É
                    Lead.objects.filter(pk=current_lead.pk).update(
                        status='in_work',
                        status_updated_at=timezone.now()
                    )
                    print(f"üöÄ –õ—ñ–¥ #{current_lead.pk} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ä–æ–±–æ—Ç—É")

                # –û—á–∏—â—É—î–º–æ –∫–µ—à
                from django.core.cache import cache
                cache.clear()

            except Exception as e:
                print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ –ª—ñ–¥–∞: {e}")
            finally:
                # üõ°Ô∏è –í–∏–¥–∞–ª—è—î–º–æ –∑ –∑–∞—Ö–∏—Å—Ç—É –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
                _processing_leads.discard(instance.pk)

        # üöÄ –ö–õ–Æ–ß–û–í–ï: –í–∏–∫–æ–Ω—É—î–º–æ –ü–Ü–°–õ–Ø –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transaction.on_commit(process_new_lead)

    elif not created:
        # –ü—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ª—ñ–¥–∞
        print(f"üîÑ –õ—ñ–¥ #{instance.pk} –æ–Ω–æ–≤–ª–µ–Ω–æ")
        from django.core.cache import cache
        cache.clear()


@receiver(post_save, sender=LeadPaymentOperation)
def payment_operation_created(sender, instance, created, **kwargs):
    """
    –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
    """
    if created:
        print(f"üí∞ –ü–õ–ê–¢–Ü–ñ: {instance.operation_type} {instance.amount} –¥–ª—è –ª—ñ–¥–∞ #{instance.lead.pk}")

        # –û—á–∏—â—É—î–º–æ –∫–µ—à
        from django.core.cache import cache
        cache.clear()

        # –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ
        if instance.operation_type == 'received':
            def check_full_payment():
                try:
                    lead = Lead.objects.get(pk=instance.lead.pk)
                    total_received = LeadPaymentOperation.objects.filter(
                        lead=lead,
                        operation_type='received'
                    ).aggregate(total=models.Sum('amount'))['total'] or 0

                    if lead.price and total_received >= lead.price and lead.status != 'completed':
                        Lead.objects.filter(pk=lead.pk).update(
                            status='completed',
                            status_updated_at=timezone.now()
                        )
                        print(f"‚úÖ –õ—ñ–¥ #{lead.pk} –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–≤–Ω—É –æ–ø–ª–∞—Ç—É")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {e}")

            transaction.on_commit(check_full_payment)


@receiver(post_save, sender=Client)
def client_saved(sender, instance, created, **kwargs):
    """
    –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
    """
    if created:
        print(f"üë§ –ö–õ–Ü–Ñ–ù–¢ –°–¢–í–û–†–ï–ù–û: {instance.full_name} ({instance.phone})")
    else:
        print(f"üë§ –ö–õ–Ü–Ñ–ù–¢ –û–ù–û–í–õ–ï–ù–û: {instance.full_name} ({instance.phone})")


# üöÄ –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò
def check_duplicates():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    from django.db.models import Count

    # –ö–ª—ñ—î–Ω—Ç–∏-–¥—É–±–ª—ñ–∫–∞—Ç–∏
    duplicate_clients = Client.objects.values('phone').annotate(
        count=Count('id')
    ).filter(count__gt=1)

    if duplicate_clients:
        print("‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–Ü –î–£–ë–õ–Ü–ö–ê–¢–ò –ö–õ–Ü–Ñ–ù–¢–Ü–í:")
        for dup in duplicate_clients:
            clients = Client.objects.filter(phone=dup['phone'])
            print(f"üìû {dup['phone']}: {dup['count']} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
            for client in clients:
                print(f"   - ID: {client.id}, –Ü–º'—è: {client.full_name}")
    else:
        print("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")


print("üì° –ù–∞–¥—ñ–π–Ω—ñ Django signals –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ (–∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)!")