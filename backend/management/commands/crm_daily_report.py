# backend/management/commands/crm_daily_report.py
"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —â–æ–¥–µ–Ω–Ω–æ–≥–æ CRM –∑–≤—ñ—Ç—É
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python manage.py crm_daily_report
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from django.db.models import Count, Sum, Avg, Q
from backend.models import Client, ClientInteraction, ClientTask, Lead, LeadPaymentOperation


class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä—É—î —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ CRM –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'

    def handle(self, *args, **options):
        today = timezone.now().date()
        yesterday = today - timedelta(days=1)
        week_ago = today - timedelta(days=7)

        self.stdout.write(f"üìä CRM –ó–≤—ñ—Ç –∑–∞ {today}")
        self.stdout.write("=" * 50)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö
        total_clients = Client.objects.count()
        new_clients_today = Client.objects.filter(created_at__date=today).count()
        akb_clients = Client.objects.filter(total_orders__gt=0).count()

        self.stdout.write(f"\nüë• –ö–õ–Ü–Ñ–ù–¢–ò:")
        self.stdout.write(f"   –í—Å—å–æ–≥–æ –≤ –±–∞–∑—ñ: {total_clients}")
        self.stdout.write(f"   –ù–æ–≤–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {new_clients_today}")
        self.stdout.write(f"   –ê–ö–ë –∫–ª—ñ—î–Ω—Ç—ñ–≤: {akb_clients}")

        # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ñ
        temp_stats = Client.objects.values('temperature').annotate(
            count=Count('id')
        ).order_by('temperature')

        self.stdout.write(f"\nüå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê –õ–Ü–î–Ü–í:")
        for stat in temp_stats:
            temp_name = dict(Client.TEMPERATURE_CHOICES).get(stat['temperature'], stat['temperature'])
            self.stdout.write(f"   {temp_name}: {stat['count']}")

        # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö –ê–ö–ë
        akb_stats = Client.objects.filter(
            akb_segment__in=['vip', 'premium', 'standard', 'basic']
        ).values('akb_segment').annotate(
            count=Count('id'),
            revenue=Sum('total_spent')
        ).order_by('-revenue')

        self.stdout.write(f"\nüí∞ –°–ï–ì–ú–ï–ù–¢–ò –ê–ö–ë:")
        for stat in akb_stats:
            segment_name = dict(Client.AKB_SEGMENT_CHOICES).get(stat['akb_segment'], stat['akb_segment'])
            revenue = stat['revenue'] or 0
            self.stdout.write(f"   {segment_name}: {stat['count']} –∫–ª—ñ—î–Ω—Ç—ñ–≤, {revenue:.0f} –≥—Ä–Ω")

        # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∑–∞—î–º–æ–¥—ñ–π
        interactions_today = ClientInteraction.objects.filter(created_at__date=today)
        interactions_week = ClientInteraction.objects.filter(created_at__date__gte=week_ago)

        self.stdout.write(f"\nüìû –í–ó–ê–Ñ–ú–û–î–Ü–á:")
        self.stdout.write(f"   –°—å–æ–≥–æ–¥–Ω—ñ: {interactions_today.count()}")
        self.stdout.write(f"   –ó–∞ —Ç–∏–∂–¥–µ–Ω—å: {interactions_week.count()}")

        # –¢–û–ü –∞–∫—Ç–∏–≤–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
        top_managers = interactions_today.values(
            'created_by__username'
        ).annotate(
            count=Count('id')
        ).order_by('-count')[:5]

        if top_managers:
            self.stdout.write(f"\nüèÜ –¢–û–ü –ê–ö–¢–ò–í–ù–Ü –ú–ï–ù–ï–î–ñ–ï–†–ò:")
            for i, manager in enumerate(top_managers, 1):
                self.stdout.write(f"   {i}. {manager['created_by__username']}: {manager['count']} –≤–∑–∞—î–º–æ–¥—ñ–π")

        # –ó–∞–¥–∞—á—ñ
        pending_tasks = ClientTask.objects.filter(status='pending').count()
        overdue_tasks = ClientTask.objects.filter(
            due_date__lt=timezone.now(),
            status__in=['pending', 'in_progress']
        ).count()
        completed_today = ClientTask.objects.filter(
            completed_at__date=today,
            status='completed'
        ).count()

        self.stdout.write(f"\nüìã –ó–ê–î–ê–ß–Ü:")
        self.stdout.write(f"   –û—á—ñ–∫—É—é—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {pending_tasks}")
        self.stdout.write(f"   –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ: {overdue_tasks}")
        self.stdout.write(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {completed_today}")

        # –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        revenue_today = LeadPaymentOperation.objects.filter(
            created_at__date=today,
            operation_type='received'
        ).aggregate(total=Sum('amount'))['total'] or 0

        revenue_week = LeadPaymentOperation.objects.filter(
            created_at__date__gte=week_ago,
            operation_type='received'
        ).aggregate(total=Sum('amount'))['total'] or 0

        self.stdout.write(f"\nüíµ –§–Ü–ù–ê–ù–°–ò:")
        self.stdout.write(f"   –í–∏—Ä—É—á–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {revenue_today:.2f} –≥—Ä–Ω")
        self.stdout.write(f"   –í–∏—Ä—É—á–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: {revenue_week:.2f} –≥—Ä–Ω")

        # –†–∏–∑–∏–∫–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏
        churn_risk = Client.objects.filter(
            Q(temperature='sleeping') | Q(rfm_recency__gt=180),
            total_orders__gt=0
        ).count()

        potential_loss = Client.objects.filter(
            Q(temperature='sleeping') | Q(rfm_recency__gt=180),
            total_orders__gt=0
        ).aggregate(total=Sum('total_spent'))['total'] or 0

        self.stdout.write(f"\n‚ö†Ô∏è –†–ò–ó–ò–ö–ò:")
        self.stdout.write(f"   –ö–ª—ñ—î–Ω—Ç—ñ–≤ –∑ —Ä–∏–∑–∏–∫–æ–º –≤—ñ–¥—Ç–æ–∫—É: {churn_risk}")
        self.stdout.write(f"   –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –≤—Ç—Ä–∞—Ç–∏: {potential_loss:.2f} –≥—Ä–Ω")

        self.stdout.write("\n" + "=" * 50)
        self.stdout.write(f"üìÖ –ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {timezone.now().strftime('%Y-%m-%d %H:%M:%S')}")
