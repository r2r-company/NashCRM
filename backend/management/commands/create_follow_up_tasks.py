# backend/management/commands/create_follow_up_tasks.py
"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á follow-up
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python manage.py create_follow_up_tasks
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta
from backend.models import Client, ClientTask


class Command(BaseCommand):
    help = '–°—Ç–≤–æ—Ä—é—î –∑–∞–¥–∞—á—ñ follow-up –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--days-inactive',
            type=int,
            default=90,
            help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è —Å–ø–ª—è—á–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 90)'
        )

    def handle(self, *args, **options):
        days_inactive = options['days_inactive']

        self.stdout.write(f"üéØ –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è follow-up...")

        # –°–ø–ª—è—á—ñ –∫–ª—ñ—î–Ω—Ç–∏
        sleeping_clients = Client.objects.filter(
            temperature='sleeping',
            total_orders__gt=0,
            rfm_recency__gte=days_inactive
        ).exclude(
            tasks__status__in=['pending', 'in_progress'],
            tasks__title__icontains='—Ä–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è'
        )

        # –ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏
        hot_leads = Client.objects.filter(
            temperature='hot'
        ).exclude(
            tasks__status__in=['pending', 'in_progress'],
            tasks__title__icontains='–∫–æ–Ω—Ç–∞–∫—Ç'
        )

        # –ö–ª—ñ—î–Ω—Ç–∏ VIP –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—É –±—ñ–ª—å—à–µ –º—ñ—Å—è—Ü—è
        vip_no_contact = Client.objects.filter(
            akb_segment='vip',
            last_contact_date__lt=timezone.now() - timedelta(days=30)
        ).exclude(
            tasks__status__in=['pending', 'in_progress']
        )

        created_tasks = []

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—ñ –¥–ª—è —Å–ø–ª—è—á–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        for client in sleeping_clients:
            task = ClientTask.objects.create(
                client=client,
                title=f'–†–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞: {client.full_name}',
                description=f'–ö–ª—ñ—î–Ω—Ç –Ω–µ –∫—É–ø—É–≤–∞–≤ {client.rfm_recency} –¥–Ω—ñ–≤. '
                            f'–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫: {client.total_spent} –≥—Ä–Ω.',
                assigned_to=client.assigned_to,
                priority='medium',
                due_date=timezone.now() + timedelta(days=3)
            )
            created_tasks.append(task)
            self.stdout.write(f"üò¥ –†–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è: {client.full_name}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—ñ –¥–ª—è –≥–∞—Ä—è—á–∏—Ö –ª—ñ–¥—ñ–≤
        for client in hot_leads:
            task = ClientTask.objects.create(
                client=client,
                title=f'üî• –¢–ï–†–ú–Ü–ù–û–í–ò–ô –∫–æ–Ω—Ç–∞–∫—Ç: {client.full_name}',
                description=f'–ì–∞—Ä—è—á–∏–π –ª—ñ–¥! {client.next_contact_recommendation}',
                assigned_to=client.assigned_to,
                priority='urgent',
                due_date=timezone.now() + timedelta(hours=24)
            )
            created_tasks.append(task)
            self.stdout.write(f"üî• –ì–∞—Ä—è—á–∏–π –ª—ñ–¥: {client.full_name}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—ñ –¥–ª—è VIP –∫–ª—ñ—î–Ω—Ç—ñ–≤
        for client in vip_no_contact:
            task = ClientTask.objects.create(
                client=client,
                title=f'üíé VIP –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: {client.full_name}',
                description=f'VIP –∫–ª—ñ—î–Ω—Ç –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—É –±—ñ–ª—å—à–µ –º—ñ—Å—è—Ü—è. '
                            f'–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {client.total_spent} –≥—Ä–Ω.',
                assigned_to=client.assigned_to,
                priority='high',
                due_date=timezone.now() + timedelta(days=1)
            )
            created_tasks.append(task)
            self.stdout.write(f"üíé VIP –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: {client.full_name}")

        # –ü—ñ–¥—Å—É–º–æ–∫
        self.stdout.write(
            self.style.SUCCESS(
                f"\n‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(created_tasks)} –∑–∞–¥–∞—á:\n"
                f"   –†–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è: {sleeping_clients.count()}\n"
                f"   –ì–∞—Ä—è—á—ñ –ª—ñ–¥–∏: {hot_leads.count()}\n"
                f"   VIP –ø—ñ–¥—Ç—Ä–∏–º–∫–∞: {vip_no_contact.count()}"
            )
        )