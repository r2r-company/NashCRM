# backend/management/commands/update_client_metrics.py
"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python manage.py update_client_metrics
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from backend.models import Client
import time


class Command(BaseCommand):
    help = '–û–Ω–æ–≤–ª—é—î –º–µ—Ç—Ä–∏–∫–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –ê–ö–ë —Å–µ–≥–º–µ–Ω—Ç, RFM)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--batch-size',
            type=int,
            default=100,
            help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞ —Ä–∞–∑ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 100)'
        )
        parser.add_argument(
            '--only-akb',
            action='store_true',
            help='–û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –ø–æ–∫—É–ø–∫–∞–º–∏ (–ê–ö–ë)'
        )

    def handle(self, *args, **options):
        batch_size = options['batch_size']
        only_akb = options['only_akb']

        start_time = time.time()

        # –í–∏–±–∏—Ä–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if only_akb:
            clients = Client.objects.filter(total_orders__gt=0)
            self.stdout.write(f"üéØ –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –ê–ö–ë –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
        else:
            clients = Client.objects.all()
            self.stdout.write(f"üéØ –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤...")

        total_count = clients.count()
        self.stdout.write(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_count}")

        updated_count = 0
        errors_count = 0

        # –û–±—Ä–æ–±–ª—è—î–º–æ –±–∞—Ç—á–∞–º–∏
        for i in range(0, total_count, batch_size):
            batch = clients[i:i + batch_size]

            for client in batch:
                try:
                    old_temperature = client.temperature
                    old_segment = client.akb_segment

                    client.update_client_metrics()

                    # –õ–æ–≥—É—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –∑–º—ñ–Ω–∏
                    if client.temperature != old_temperature:
                        self.stdout.write(
                            f"üå°Ô∏è {client.full_name}: {old_temperature} ‚Üí {client.temperature}"
                        )

                    if client.akb_segment != old_segment:
                        self.stdout.write(
                            f"üí∞ {client.full_name}: {old_segment} ‚Üí {client.akb_segment}"
                        )

                    updated_count += 1

                except Exception as e:
                    errors_count += 1
                    self.stderr.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {client.id}: {str(e)}")

            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            progress = ((i + batch_size) / total_count) * 100
            self.stdout.write(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å: {min(progress, 100):.1f}% ({updated_count}/{total_count})")

        # –ü—ñ–¥—Å—É–º–æ–∫
        elapsed_time = time.time() - start_time
        self.stdout.write(
            self.style.SUCCESS(
                f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"   –û–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –∫–ª—ñ—î–Ω—Ç—ñ–≤\n"
                f"   –ü–æ–º–∏–ª–æ–∫: {errors_count}\n"
                f"   –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥"
            )
        )