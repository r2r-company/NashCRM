# backend/management/commands/cleanup_duplicates.py
"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python manage.py cleanup_duplicates
"""

from django.core.management.base import BaseCommand
from django.db.models import Count
from backend.models import Client


class Command(BaseCommand):
    help = '–û—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏, –Ω–µ –≤–∏–¥–∞–ª—è—Ç–∏',
        )

    def handle(self, *args, **options):
        self.stdout.write("üßπ –û–ß–ò–©–ï–ù–ù–Ø –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ö–õ–Ü–Ñ–ù–¢–Ü–í")
        self.stdout.write("=" * 40)

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        duplicate_clients = Client.objects.values('phone').annotate(
            count=Count('id')
        ).filter(count__gt=1).order_by('-count')

        if not duplicate_clients:
            self.stdout.write("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        total_duplicates = 0
        for dup in duplicate_clients:
            phone = dup['phone']
            count = dup['count']

            self.stdout.write(f"\nüìû –ù–æ–º–µ—Ä: {phone} ({count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤)")

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ —Ü–∏–º –Ω–æ–º–µ—Ä–æ–º
            clients = Client.objects.filter(phone=phone).order_by('created_at')

            # –ó–∞–ª–∏—à–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ (–Ω–∞–π—Å—Ç–∞—Ä—à–æ–≥–æ), –≤–∏–¥–∞–ª—è—î–º–æ —Ä–µ—à—Ç—É
            keeper = clients.first()
            duplicates_to_delete = clients.exclude(id=keeper.id)

            self.stdout.write(f"   ‚úÖ –ó–∞–ª–∏—à–∞—î–º–æ: #{keeper.id} - {keeper.full_name} (—Å—Ç–≤–æ—Ä–µ–Ω–æ: {keeper.created_at})")

            for duplicate in duplicates_to_delete:
                if options['dry_run']:
                    self.stdout.write(f"   üóëÔ∏è [DRY RUN] –í–∏–¥–∞–ª–∏–ª–∏ –±: #{duplicate.id} - {duplicate.full_name}")
                else:
                    self.stdout.write(f"   üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ: #{duplicate.id} - {duplicate.full_name}")
                    duplicate.delete()
                total_duplicates += 1

        if options['dry_run']:
            self.stdout.write(f"\nüìä [DRY RUN] –ó–Ω–∞–π–¥–µ–Ω–æ {total_duplicates} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            self.stdout.write("–ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ --dry-run –¥–ª—è —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
        else:
            self.stdout.write(f"\n‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {total_duplicates} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")

        self.stdout.write("\nüîç –ü–û–¢–û–ß–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        total_clients = Client.objects.count()
        unique_phones = Client.objects.values('phone').distinct().count()
        self.stdout.write(f"   üë• –í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_clients}")
        self.stdout.write(f"   üìû –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤: {unique_phones}")

        if total_clients != unique_phones:
            self.stdout.write("‚ö†Ô∏è –í—Å–µ —â–µ —î –¥—É–±–ª—ñ–∫–∞—Ç–∏! –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–Ω–æ–≤—É.")
        else:
            self.stdout.write("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ–º–∞—î!")