from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.contrib.auth.models import User
from django.utils.timezone import now
from .models import CustomUser, Lead, LeadPaymentOperation
from backend.services.lead_queue import on_lead_closed

# === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è CustomUser ===
@receiver(post_save, sender=User)
def create_custom_user(sender, instance, created, **kwargs):
    if created:
        CustomUser.objects.create(user=instance, interface_type='manager')


# === –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º ===
_lead_previous_states = {}

@receiver(pre_save, sender=Lead)
def store_previous_lead_state(sender, instance, **kwargs):
    if instance.pk:
        try:
            previous = Lead.objects.get(pk=instance.pk)
            _lead_previous_states[instance.pk] = {
                'status': previous.status,
            }
            if previous.status != instance.status:
                instance.status_updated_at = now()
        except Lead.DoesNotExist:
            pass


# === –†–µ–∞–≥—É—î–º–æ –Ω–∞ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É ===
@receiver(post_save, sender=Lead)
def handle_lead_status_change(sender, instance, created, **kwargs):
    if created:
        return

    previous_state = _lead_previous_states.get(instance.pk)
    if not previous_state:
        return

    prev = previous_state['status']
    curr = instance.status

    if prev == curr:
        _lead_previous_states.pop(instance.pk, None)
        return

    print(f"üîÑ –õ—ñ–¥ #{instance.pk} –∑–º—ñ–Ω–µ–Ω–æ: {prev} ‚Üí {curr}")

    # === –í –î–æ—Ä–æ–∑—ñ ‚Üí –°—Ç–≤–æ—Ä—é—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –æ–ø–ª–∞—Ç—É ===
    if curr == "on_the_way":
        LeadPaymentOperation.objects.get_or_create(
            lead=instance,
            operation_type='expected',
            defaults={
                "amount": instance.price,
                "comment": f"–û—á—ñ–∫—É—î—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ –ø–æ –ª—ñ–¥—É #{instance.pk}"
            }
        )
        print(f"üí∞ –û—á—ñ–∫—É—î—Ç—å—Å—è {instance.price} –≥—Ä–Ω –ø–æ {instance.full_name}")

    # === –ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚Üí –ü—Ä–∏–π–Ω—è—Ç–æ –æ–ø–ª–∞—Ç—É ===
    elif curr == "completed":
        amount = instance.actual_cash or instance.price or 0
        LeadPaymentOperation.objects.create(
            lead=instance,
            operation_type='received',
            amount=amount,
            comment=f"–ì—Ä–æ—à—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ –ª—ñ–¥—É #{instance.pk}"
        )
        print(f"üíµ –û—Ç—Ä–∏–º–∞–Ω–æ {amount} –≥—Ä–Ω –ø–æ {instance.full_name}")

        if instance.assigned_to:
            on_lead_closed(instance)

    # === –í—ñ–¥–º–æ–≤–ª–µ–Ω–æ ‚Üí –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –±–µ–∑ –≥—Ä–æ—à–µ–π ===
    elif curr == "declined":
        if instance.assigned_to:
            on_lead_closed(instance)
            print(f"‚ùå –õ—ñ–¥ {instance.full_name} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")

    _lead_previous_states.pop(instance.pk, None)



# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
def log_lead_status_change(lead, old_status, new_status, user=None):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∞—É–¥–∏—Ç—É"""
    print(f"üìã AUDIT: –õ—ñ–¥ {lead.full_name} (ID: {lead.id})")
    print(f"   –°—Ç–∞—Ç—É—Å: {old_status} ‚Üí {new_status}")
    print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.username if user else '–°–∏—Å—Ç–µ–º–∞'}")
    print(f"   –ß–∞—Å: {now()}")
    print(f"   –¶—ñ–Ω–∞: {lead.price} –≥—Ä–Ω")