import os
import re
from datetime import timedelta, datetime
from decimal import Decimal

from django.contrib.auth.models import User
from django.db import models
from django.db.models import Sum

from django.utils.timezone import now

def lead_file_upload_path(instance, filename):
    ext = filename.split('.')[-1]
    filename = f"{now().strftime('%Y%m%d%H%M%S%f')}.{ext}"
    return os.path.join("lead_files", filename)




class CustomUser(models.Model):
    INTERFACE_CHOICES = [
        ('admin', '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä'),
        ('accountant', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä'),
        ('manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä'),
        ('warehouse', '–°–∫–ª–∞–¥—Å—å–∫–∏–π'),
    ]

    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    interface_type = models.CharField(max_length=20, choices=INTERFACE_CHOICES, verbose_name="–¢–∏–ø —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
    avatar = models.ImageField(upload_to="avatars/", null=True, blank=True, verbose_name="–§–æ—Ç–æ")

    def __str__(self):
        return f"{self.user.username} ({self.get_interface_type_display()})"

    class Meta:
        verbose_name = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
        verbose_name_plural = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
        indexes = [
            models.Index(fields=['interface_type']),
            models.Index(fields=['user', 'interface_type']),
        ]
class LeadFile(models.Model):
    lead = models.ForeignKey("Lead", related_name="uploaded_files", on_delete=models.CASCADE)
    file = models.FileField(upload_to=lead_file_upload_path)
    uploaded_at = models.DateTimeField(auto_now_add=True)  # —Ç—ñ–ª—å–∫–∏ —Ü–µ –ø–æ–ª–µ

    class Meta:
        verbose_name = "–§–∞–π–ª –ª—ñ–¥–∞"
        verbose_name_plural = "–§–∞–π–ª–∏ –ª—ñ–¥—ñ–≤"

    def __str__(self):
        return f"{self.lead.full_name} ‚Äì {self.file.name}"



class Lead(models.Model):
    STATUS_CHOICES = [
        ('queued', '–£ —á–µ—Ä–∑—ñ'),
        ('in_work', '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'),
        ('awaiting_prepayment', '–û—á—ñ–∫—É—é –∞–≤–∞–Ω—Å'),
        ('preparation', '–í —Ä–æ–±–æ—Ç—É'),
        ('warehouse_processing', '–û–±—Ä–æ–±–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥—ñ'),
        ('warehouse_ready', '–°–∫–ª–∞–¥ - –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–≥—Ä—É–∑–∫–∏'),  # üÜï –ù–û–í–ò–ô –°–¢–ê–¢–£–°
        ('on_the_way', '–í –¥–æ—Ä–æ–∑—ñ'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
        ('declined', '–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ'),
    ]

    full_name = models.CharField(max_length=255, verbose_name="–ü–Ü–ë")
    phone = models.CharField(max_length=30, blank=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(blank=True, verbose_name="Email")
    source = models.CharField(max_length=100, blank=True, verbose_name="–î–∂–µ—Ä–µ–ª–æ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å")
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–¶—ñ–Ω–∞")
    advance = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–ê–≤–∞–Ω—Å")
    delivery_cost = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏")
    comment = models.TextField(blank=True, null=True, verbose_name="–ö–æ–º–µ–Ω—Ç–∞—Ä")
    order_number = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

    delivery_number = models.CharField(max_length=100, blank=True, verbose_name="–¢–¢–ù")
    status = models.CharField(max_length=30, choices=STATUS_CHOICES, default='queued', verbose_name="–°—Ç–∞—Ç—É—Å")
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ")
    queued_position = models.PositiveIntegerField(null=True, blank=True, verbose_name="–ü–æ–∑–∏—Ü—ñ—è –≤ —á–µ—Ä–∑—ñ")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°—Ç–≤–æ—Ä–µ–Ω–æ")
    status_updated_at = models.DateTimeField(null=True, blank=True)
    actual_cash = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    full_address = models.CharField("–ê–¥—Ä–µ—Å–∞ (Google)", max_length=512, blank=True, null=True)
    country = models.CharField(max_length=100, blank=True, null=True)
    city = models.CharField(max_length=100, blank=True, null=True)
    postal_code = models.CharField(max_length=20, blank=True, null=True)
    street = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return f"{self.full_name} ‚Äî {self.price} –≥—Ä–Ω ({self.get_status_display()})"

    @property
    def manager_reward(self):
        return round(self.price * 0.03, 2) if self.price else 0

    @property
    def remaining_amount(self):
        return (self.price or 0) - (self.advance or 0)

    @property
    def is_two_weeks_old(self):
        return self.status != 'completed' and self.created_at <= now() - timedelta(days=14)

    @property
    def is_three_months_old(self):
        return self.status != 'completed' and self.created_at <= now() - timedelta(days=90)

    class Meta:
        verbose_name = "–õ—ñ–¥"
        verbose_name_plural = "–õ—ñ–¥–∏"
        indexes = [
            models.Index(fields=['status']),
            models.Index(fields=['created_at']),
            models.Index(fields=['status_updated_at']),
            models.Index(fields=['phone']),
            models.Index(fields=['assigned_to']),
            models.Index(fields=['assigned_to', 'status']),
            models.Index(fields=['status', 'created_at']),
            models.Index(fields=['phone', 'status']),
            models.Index(fields=['created_at', 'assigned_to']),
            models.Index(fields=['status', 'price']),
        ]


class Client(models.Model):
    CLIENT_TYPE_CHOICES = [
        ('individual', '–§—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞'),
        ('company', '–ö–æ–º–ø–∞–Ω—ñ—è'),
        ('vip', 'VIP-–∫–ª—ñ—î–Ω—Ç'),
    ]

    STATUS_CHOICES = [
        ('active', '–ê–∫—Ç–∏–≤–Ω–∏–π'),
        ('inactive', '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'),
        ('blacklist', '–£ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É'),
    ]

    # üî• –ù–û–í–ê –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø –ü–û –¢–ï–ú–ü–ï–†–ê–¢–£–†–Ü
    TEMPERATURE_CHOICES = [
        ('cold', '–•–æ–ª–æ–¥–Ω–∏–π –ª—ñ–¥'),  # –ù–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–µ –ø—Ä–æ—è–≤–ª—è–≤ —ñ–Ω—Ç–µ—Ä–µ—Å
        ('warm', '–¢–µ–ø–ª–∏–π –ª—ñ–¥'),  # –ü—Ä–æ—è–≤–ª—è–≤ —ñ–Ω—Ç–µ—Ä–µ—Å, –∞–ª–µ –Ω–µ –∫—É–ø—É–≤–∞–≤
        ('hot', '–ì–∞—Ä—è—á–∏–π –ª—ñ–¥'),  # –ì–æ—Ç–æ–≤–∏–π –¥–æ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–∑
        ('customer', '–ö–ª—ñ—î–Ω—Ç –ê–ö–ë'),  # –ó–¥—ñ–π—Å–Ω–∏–≤ –ø–æ–∫—É–ø–∫—É
        ('loyal', '–õ–æ—è–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç'),  # –ü–æ—Å—Ç—ñ–π–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
        ('sleeping', '–°–ø–ª—è—á–∏–π –∫–ª—ñ—î–Ω—Ç')  # –î–∞–≤–Ω–æ –Ω–µ –∫—É–ø—É–≤–∞–≤
    ]

    # üî• –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø –ê–ö–ë (–ê–ö–¢–ò–í–ù–ê –ö–õ–Ü–Ñ–ù–¢–°–¨–ö–ê –ë–ê–ó–ê)
    AKB_SEGMENT_CHOICES = [
        ('vip', 'VIP (>50–∫ –≥—Ä–Ω)'),
        ('premium', '–ü—Ä–µ–º—ñ—É–º (20-50–∫ –≥—Ä–Ω)'),
        ('standard', '–°—Ç–∞–Ω–¥–∞—Ä—Ç (5-20–∫ –≥—Ä–Ω)'),
        ('basic', '–ë–∞–∑–æ–≤–∏–π (<5–∫ –≥—Ä–Ω)'),
        ('new', '–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç'),
        ('inactive', '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'),
    ]

    # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
    full_name = models.CharField(max_length=255, verbose_name="–ü–Ü–ë")
    phone = models.CharField(max_length=30, unique=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(blank=True, null=True, verbose_name="Email")
    company_name = models.CharField(max_length=255, blank=True, verbose_name="–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó")
    type = models.CharField(max_length=20, choices=CLIENT_TYPE_CHOICES, default='individual', verbose_name="–¢–∏–ø")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='active', verbose_name="–°—Ç–∞—Ç—É—Å")

    # üî• –ù–û–í–Ü –ü–û–õ–Ø CRM
    temperature = models.CharField(max_length=20, choices=TEMPERATURE_CHOICES, default='cold',
                                   verbose_name="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ª—ñ–¥–∞")
    akb_segment = models.CharField(max_length=20, choices=AKB_SEGMENT_CHOICES, default='new',
                                   verbose_name="–°–µ–≥–º–µ–Ω—Ç –ê–ö–ë")

    # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    total_spent = models.DecimalField(max_digits=15, decimal_places=2, default=0, verbose_name="–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫")
    avg_check = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫")
    total_orders = models.PositiveIntegerField(default=0, verbose_name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å")

    # –î–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    first_purchase_date = models.DateTimeField(null=True, blank=True, verbose_name="–ü–µ—Ä—à–∞ –ø–æ–∫—É–ø–∫–∞")
    last_purchase_date = models.DateTimeField(null=True, blank=True, verbose_name="–û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∞")
    last_contact_date = models.DateTimeField(null=True, blank=True, verbose_name="–û—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç")

    # CRM –ø–æ–ª—è
    notes = models.TextField(blank=True, verbose_name="–ù–æ—Ç–∞—Ç–∫–∏")
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ú–µ–Ω–µ–¥–∂–µ—Ä")
    difficulty_rating = models.PositiveSmallIntegerField(
        default=1,
        choices=[(i, f"{i} –∑—ñ—Ä–æ–∫") for i in range(1, 6)],
        verbose_name="–†–µ–π—Ç–∏–Ω–≥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ"
    )

    # üî• –ù–û–í–Ü CRM –ü–û–õ–Ø
    lead_source = models.CharField(max_length=100, blank=True, verbose_name="–î–∂–µ—Ä–µ–ª–æ –ø–µ—Ä—à–æ–≥–æ –ª—ñ–¥–∞")
    preferred_contact_method = models.CharField(max_length=50, choices=[
        ('phone', '–¢–µ–ª–µ—Ñ–æ–Ω'),
        ('email', 'Email'),
        ('messenger', '–ú–µ—Å–µ–Ω–¥–∂–µ—Ä'),
        ('sms', 'SMS'),
    ], default='phone', verbose_name="–°–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É")

    # –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è
    country = models.CharField(max_length=100, blank=True, verbose_name="–ö—Ä–∞—ó–Ω–∞")
    city = models.CharField(max_length=100, blank=True, verbose_name="–ú—ñ—Å—Ç–æ")

    # RFM –∞–Ω–∞–ª—ñ–∑ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è)
    rfm_recency = models.PositiveIntegerField(null=True, blank=True, verbose_name="R - Recency (–¥–Ω—ñ)")
    rfm_frequency = models.PositiveIntegerField(null=True, blank=True, verbose_name="F - Frequency (–ø–æ–∫—É–ø–æ–∫)")
    rfm_monetary = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True,
                                       verbose_name="M - Monetary (—Å—É–º–∞)")
    rfm_score = models.CharField(max_length=10, blank=True, verbose_name="RFM Score (111-555)")

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°—Ç–≤–æ—Ä–µ–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–Ω–æ–≤–ª–µ–Ω–æ")

    def save(self, *args, **kwargs):
        self.phone = self.normalize_phone(self.phone)
        super().save(*args, **kwargs)
        # –ü—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
        self.update_client_metrics()

    @staticmethod
    def normalize_phone(phone: str) -> str:
        digits = re.sub(r'\D', '', phone)
        if digits.startswith("0"):
            digits = "38" + digits
        elif not digits.startswith("38") and len(digits) == 10:
            digits = "38" + digits
        return digits

    def update_client_metrics(self):
        """üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –í–°–Ü–• –ú–ï–¢–†–ò–ö –ö–õ–Ü–Ñ–ù–¢–ê"""


        # –†–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ª—ñ–¥–∞—Ö
        completed_leads = Lead.objects.filter(
            phone=self.phone,
            status='completed'
        )

        # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        payments = LeadPaymentOperation.objects.filter(
            lead__phone=self.phone,
            operation_type='received'
        )

        total_spent = payments.aggregate(total=Sum('amount'))['total'] or Decimal('0')
        total_orders = completed_leads.count()
        avg_check = total_spent / total_orders if total_orders > 0 else Decimal('0')

        # –î–∞—Ç–∏
        first_purchase = completed_leads.order_by('created_at').first()
        last_purchase = completed_leads.order_by('-created_at').first()

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª—è
        self.total_spent = total_spent
        self.total_orders = total_orders
        self.avg_check = avg_check
        self.first_purchase_date = first_purchase.created_at if first_purchase else None
        self.last_purchase_date = last_purchase.created_at if last_purchase else None

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        self.temperature = self.calculate_temperature()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Å–µ–≥–º–µ–Ω—Ç –ê–ö–ë
        self.akb_segment = self.calculate_akb_segment()

        # RFM –∞–Ω–∞–ª—ñ–∑
        self.calculate_rfm_metrics()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–µ–∑ –≤–∏–∫–ª–∏–∫–∞–Ω–Ω—è save() —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ä–µ–∫—É—Ä—Å—ñ—ó
        Client.objects.filter(id=self.id).update(
            total_spent=self.total_spent,
            total_orders=self.total_orders,
            avg_check=self.avg_check,
            first_purchase_date=self.first_purchase_date,
            last_purchase_date=self.last_purchase_date,
            temperature=self.temperature,
            akb_segment=self.akb_segment,
            rfm_recency=self.rfm_recency,
            rfm_frequency=self.rfm_frequency,
            rfm_monetary=self.rfm_monetary,
            rfm_score=self.rfm_score,
        )

    def calculate_temperature(self) -> str:
        """üå°Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ò –õ–Ü–î–ê"""
        if self.total_orders == 0:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–∏ —Å–ø—Ä–æ–±–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É
            leads_count = Lead.objects.filter(phone=self.phone).count()
            if leads_count == 0:
                return 'cold'  # –ù–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
            elif leads_count == 1:
                return 'warm'  # –û–¥–∏–Ω –ª—ñ–¥, –∞–ª–µ –Ω–µ –∫—É–ø—É–≤–∞–≤
            else:
                return 'hot'  # –ë–∞–≥–∞—Ç–æ –ª—ñ–¥—ñ–≤, –∞–ª–µ –Ω–µ –∫—É–ø—É–≤–∞–≤ - –≥–∞—Ä—è—á–∏–π

        # –ö–ª—ñ—î–Ω—Ç–∏ —â–æ –∫—É–ø—É–≤–∞–ª–∏
        days_since_last_purchase = None
        if self.last_purchase_date:
            days_since_last_purchase = (now() - self.last_purchase_date).days

        if self.total_orders >= 3:
            return 'loyal'  # –õ–æ—è–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç (3+ –ø–æ–∫—É–ø–∫–∏)
        elif days_since_last_purchase and days_since_last_purchase > 180:
            return 'sleeping'  # –°–ø–ª—è—á–∏–π –∫–ª—ñ—î–Ω—Ç (>6 –º—ñ—Å—è—Ü—ñ–≤)
        else:
            return 'customer'  # –ê–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –ê–ö–ë

    def calculate_akb_segment(self) -> str:
        """üí∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –°–ï–ì–ú–ï–ù–¢–ê –ê–ö–ë"""
        if self.total_orders == 0:
            return 'new'

        if self.total_spent >= 50000:
            return 'vip'
        elif self.total_spent >= 20000:
            return 'premium'
        elif self.total_spent >= 5000:
            return 'standard'
        elif self.total_spent > 0:
            return 'basic'
        else:
            return 'inactive'

    def calculate_rfm_metrics(self):
        """üìä RFM –ê–ù–ê–õ–Ü–ó (Recency, Frequency, Monetary)"""
        if self.last_purchase_date:
            self.rfm_recency = (now() - self.last_purchase_date).days
        else:
            self.rfm_recency = 999  # –ù—ñ–∫–æ–ª–∏ –Ω–µ –∫—É–ø—É–≤–∞–≤

        self.rfm_frequency = self.total_orders
        self.rfm_monetary = self.total_spent

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ RFM —Å–∫–æ—Ä (1-5 –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
        r_score = self.get_rfm_recency_score()
        f_score = self.get_rfm_frequency_score()
        m_score = self.get_rfm_monetary_score()

        self.rfm_score = f"{r_score}{f_score}{m_score}"

    def get_rfm_recency_score(self) -> int:
        """R - Recency: —á–∏–º –º–µ–Ω—à–µ –¥–Ω—ñ–≤, —Ç–∏–º –∫—Ä–∞—â–µ"""
        if self.rfm_recency <= 30:
            return 5  # –ö—É–ø—É–≤–∞–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
        elif self.rfm_recency <= 90:
            return 4  # –û—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ
        elif self.rfm_recency <= 180:
            return 3  # –û—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤
        elif self.rfm_recency <= 365:
            return 2  # –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫
        else:
            return 1  # –ë—ñ–ª—å—à–µ —Ä–æ–∫—É –∞–±–æ –Ω—ñ–∫–æ–ª–∏

    def get_rfm_frequency_score(self) -> int:
        """F - Frequency: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫"""
        if self.rfm_frequency >= 10:
            return 5
        elif self.rfm_frequency >= 5:
            return 4
        elif self.rfm_frequency >= 3:
            return 3
        elif self.rfm_frequency >= 2:
            return 2
        else:
            return 1

    def get_rfm_monetary_score(self) -> int:
        """M - Monetary: —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫"""
        if self.rfm_monetary >= 50000:
            return 5
        elif self.rfm_monetary >= 20000:
            return 4
        elif self.rfm_monetary >= 10000:
            return 3
        elif self.rfm_monetary >= 5000:
            return 2
        else:
            return 1

    @property
    def is_akb(self) -> bool:
        """–ß–∏ —î –∫–ª—ñ—î–Ω—Ç —á–∞—Å—Ç–∏–Ω–æ—é –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó –±–∞–∑–∏"""
        return self.total_orders > 0 and self.akb_segment != 'inactive'

    @property
    def customer_lifetime_value(self) -> Decimal:
        """LTV - –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –∂–∏—Ç—Ç—î–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç–∞"""
        if self.total_orders == 0:
            return Decimal('0')

        # –ü—Ä–æ—Å—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞: —Å–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫ * –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫
        avg_purchase_interval_days = 90  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –ø–æ–∫—É–ø–∫—É —Ä–∞–∑ –≤ 3 –º—ñ—Å—è—Ü—ñ
        estimated_lifetime_years = 3  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ 3 —Ä–æ–∫–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ
        estimated_purchases = int((estimated_lifetime_years * 365) / avg_purchase_interval_days)

        return self.avg_check * estimated_purchases

    @property
    def risk_of_churn(self) -> str:
        """–†–∏–∑–∏–∫ –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç–∞"""
        if self.temperature == 'sleeping':
            return '–í–∏—Å–æ–∫–∏–π'
        elif self.rfm_recency is not None and self.rfm_recency > 180:
            return '–°–µ—Ä–µ–¥–Ω—ñ–π'
        elif self.rfm_score and self.rfm_score.startswith('5'):
            return '–ù–∏–∑—å–∫–∏–π'
        return '–°–µ—Ä–µ–¥–Ω—ñ–π'

    @property
    def next_contact_recommendation(self) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"""
        if self.temperature == 'cold':
            return '–†–æ–∑—ñ–≥—Ä—ñ–≤–∞–Ω–Ω—è: –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç—É'
        elif self.temperature == 'warm':
            return '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è'
        elif self.temperature == 'hot':
            return '–¢–ï–†–ú–Ü–ù–û–í–û: –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø–æ–∫—É–ø–∫–∏!'
        elif self.temperature == 'sleeping':
            return '–†–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è: —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∑–Ω–∏–∂–∫–∞'
        elif self.temperature == 'loyal':
            return '–ü—Ä–æ–≥—Ä–∞–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ, VIP-–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó'
        else:
            return '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤—ñ–¥–Ω–æ—Å–∏–Ω'

    def __str__(self):
        return f"{self.full_name} ({self.phone}) - {self.get_temperature_display()}"

    class Meta:
        verbose_name = "–ö–ª—ñ—î–Ω—Ç"
        verbose_name_plural = "–ö–ª—ñ—î–Ω—Ç–∏"
        indexes = [
            # –Ü—Å–Ω—É—é—á—ñ —ñ–Ω–¥–µ–∫—Å–∏
            models.Index(fields=['phone']),
            models.Index(fields=['status']),
            models.Index(fields=['assigned_to']),
            models.Index(fields=['created_at']),
            models.Index(fields=['type', 'status']),

            # üî• –ù–û–í–Ü –Ü–ù–î–ï–ö–°–ò –î–õ–Ø CRM
            models.Index(fields=['temperature']),
            models.Index(fields=['akb_segment']),
            models.Index(fields=['total_spent']),
            models.Index(fields=['last_purchase_date']),
            models.Index(fields=['temperature', 'akb_segment']),
            models.Index(fields=['assigned_to', 'temperature']),
            models.Index(fields=['akb_segment', 'total_spent']),
            models.Index(fields=['rfm_score']),
        ]


class LeadPaymentOperation(models.Model):
    lead = models.ForeignKey(Lead, on_delete=models.CASCADE, related_name="payment_operations", verbose_name="–õ—ñ–¥")
    operation_type = models.CharField(max_length=20, choices=[
        ('expected', '–û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—É–º–∞'),
        ('received', '–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ –≤–æ–¥—ñ—è'),
    ], verbose_name="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó")
    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–∞")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    comment = models.CharField(max_length=255, blank=True, verbose_name="–ö–æ–º–µ–Ω—Ç–∞—Ä")

    def __str__(self):
        return f"{self.lead.full_name} ‚Äì {self.get_operation_type_display()} ‚Äì {self.amount} –≥—Ä–Ω"

    class Meta:
        verbose_name = "–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –ø–æ –ª—ñ–¥—É"
        verbose_name_plural = "–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø–æ –ª—ñ–¥–∞—Ö"
        # üöÄ –ö–†–ò–¢–ò–ß–ù–Ü –Ü–ù–î–ï–ö–°–ò –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∑–≤—ñ—Ç—ñ–≤
        indexes = [
            # –î–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü—ñ—ó (–Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
            models.Index(fields=['operation_type']),

            # –î–ª—è –∑–≤'—è–∑–∫—É –∑ –ª—ñ–¥–æ–º
            models.Index(fields=['lead']),

            # –î–ª—è –∑–≤—ñ—Ç—ñ–≤ –ø–æ –¥–∞—Ç–∞—Ö
            models.Index(fields=['created_at']),

            # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü—ñ–π
            models.Index(fields=['lead', 'operation_type']),  # –°—É–º–∞ –ø–æ –ª—ñ–¥—É
            models.Index(fields=['operation_type', 'amount']),  # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø—ñ–¥—Å—É–º–∫–∏
            models.Index(fields=['created_at', 'operation_type']),  # –ó–≤—ñ—Ç–∏ –ø–æ –¥–∞—Ç–∞—Ö
            models.Index(fields=['lead', 'created_at']),  # –•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è –æ–ø–ª–∞—Ç –ª—ñ–¥–∞
        ]


class EmailIntegrationSettings(models.Model):
    name = models.CharField(max_length=100, unique=True, default="default", verbose_name="–ù–∞–∑–≤–∞ –∞–∫–∞—É–Ω—Ç–∞")
    email = models.EmailField(verbose_name="Email –ª–æ–≥—ñ–Ω—É")
    app_password = models.CharField(max_length=100, verbose_name="App Password")
    imap_host = models.CharField(max_length=100, default="imap.gmail.com", verbose_name="IMAP —Ö–æ—Å—Ç")
    folder = models.CharField(max_length=50, default="INBOX", verbose_name="–ü–∞–ø–∫–∞")

    allowed_sender = models.CharField(max_length=255, verbose_name="–î–æ–∑–≤–æ–ª–µ–Ω–∏–π –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫")
    allowed_subject_keyword = models.CharField(max_length=100, blank=True, verbose_name="–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–º—ñ")
    check_interval = models.PositiveIntegerField(default=30, verbose_name="–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (—Å–µ–∫)")

    def __str__(self):
        return f"{self.name} ({self.email})"

    class Meta:
        verbose_name = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Email"
        verbose_name_plural = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Email"
        # üöÄ –Ü–ù–î–ï–ö–°–ò –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        indexes = [
            models.Index(fields=['name']),
            models.Index(fields=['email']),
        ]


class ClientInteraction(models.Model):
    INTERACTION_TYPES = [
        ('call', '–î–∑–≤—ñ–Ω–æ–∫'),
        ('email', 'Email'),
        ('meeting', '–ó—É—Å—Ç—Ä—ñ—á'),
        ('sms', 'SMS'),
        ('messenger', '–ú–µ—Å–µ–Ω–¥–∂–µ—Ä'),
        ('social', '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ'),
        ('other', '–Ü–Ω—à–µ'),
    ]

    client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name='interactions', verbose_name="–ö–ª—ñ—î–Ω—Ç")
    interaction_type = models.CharField(max_length=20, choices=INTERACTION_TYPES, verbose_name="–¢–∏–ø –≤–∑–∞—î–º–æ–¥—ñ—ó")
    direction = models.CharField(max_length=10, choices=[
        ('incoming', '–í—Ö—ñ–¥–Ω–∏–π'),
        ('outgoing', '–í–∏—Ö—ñ–¥–Ω–∏–π'),
    ], verbose_name="–ù–∞–ø—Ä—è–º–æ–∫")

    subject = models.CharField(max_length=255, verbose_name="–¢–µ–º–∞")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å")
    outcome = models.CharField(max_length=100, choices=[
        ('positive', '–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π'),
        ('neutral', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π'),
        ('negative', '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π'),
        ('follow_up', '–ü–æ—Ç—Ä—ñ–±–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç'),
    ], verbose_name="–†–µ–∑—É–ª—å—Ç–∞—Ç")

    created_by = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–°—Ç–≤–æ—Ä–∏–≤")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞")
    follow_up_date = models.DateTimeField(null=True, blank=True, verbose_name="–î–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É")

    class Meta:
        verbose_name = "–í–∑–∞—î–º–æ–¥—ñ—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º"
        verbose_name_plural = "–í–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏"
        ordering = ['-created_at']


# üî• –ú–û–î–ï–õ–¨ –î–õ–Ø –ó–ê–î–ê–ß –ü–û –ö–õ–Ü–Ñ–ù–¢–ê–•
class ClientTask(models.Model):
    PRIORITY_CHOICES = [
        ('low', '–ù–∏–∑—å–∫–∏–π'),
        ('medium', '–°–µ—Ä–µ–¥–Ω—ñ–π'),
        ('high', '–í–∏—Å–æ–∫–∏–π'),
        ('urgent', '–¢–µ—Ä–º—ñ–Ω–æ–≤–æ'),
    ]

    STATUS_CHOICES = [
        ('pending', '–û—á—ñ–∫—É—î'),
        ('in_progress', '–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
        ('cancelled', '–°–∫–∞—Å–æ–≤–∞–Ω–æ'),
    ]

    client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name='tasks', verbose_name="–ö–ª—ñ—î–Ω—Ç")
    title = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å")

    assigned_to = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ")
    priority = models.CharField(max_length=10, choices=PRIORITY_CHOICES, default='medium', verbose_name="–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç")
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='pending', verbose_name="–°—Ç–∞—Ç—É—Å")

    due_date = models.DateTimeField(verbose_name="–î–µ–¥–ª–∞–π–Ω")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°—Ç–≤–æ—Ä–µ–Ω–æ")
    completed_at = models.DateTimeField(null=True, blank=True, verbose_name="–ó–∞–≤–µ—Ä—à–µ–Ω–æ")

    class Meta:
        verbose_name = "–ó–∞–¥–∞—á–∞ –ø–æ –∫–ª—ñ—î–Ω—Ç—É"
        verbose_name_plural = "–ó–∞–¥–∞—á—ñ –ø–æ –∫–ª—ñ—î–Ω—Ç–∞—Ö"
        ordering = ['due_date', '-priority']
