import re
from django.contrib.auth.models import User
from django.db import models


class CustomUser(models.Model):
    INTERFACE_CHOICES = [
        ('admin', '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä'),
        ('accountant', '–ú–µ–Ω–µ–¥–∂–µ—Ä'),
    ]

    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    interface_type = models.CharField(max_length=20, choices=INTERFACE_CHOICES, verbose_name="–¢–∏–ø —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")

    def __str__(self):
        return f"{self.user.username} ({self.get_interface_type_display()})"

    class Meta:
        verbose_name = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
        verbose_name_plural = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
        # üöÄ –Ü–ù–î–ï–ö–°–ò –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
        indexes = [
            models.Index(fields=['interface_type']),
            models.Index(fields=['user', 'interface_type']),
        ]


class Lead(models.Model):
    STATUS_CHOICES = [
        ('new', '–ù–æ–≤–∏–π'),
        ('queued', '–£ —á–µ—Ä–∑—ñ'),
        ('in_work', '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'),
        ('awaiting_packaging', '–û—á—ñ–∫—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–∫–ª–∞–¥—É'),
        ('on_the_way', '–í –¥–æ—Ä–æ–∑—ñ'),
        ('awaiting_cash', '–û—á—ñ–∫—É—é –∫–æ—à—Ç–∏ –≤—ñ–¥ –≤–æ–¥—ñ—è'),
        ('paid', '–û–ø–ª–∞—á–µ–Ω–æ'),
        ('declined', '–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'),
    ]

    full_name = models.CharField(max_length=255, verbose_name="–ü–Ü–ë")
    phone = models.CharField(max_length=30, blank=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(blank=True, verbose_name="Email")
    source = models.CharField(max_length=100, blank=True, verbose_name="–î–∂–µ—Ä–µ–ª–æ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å")
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–¶—ñ–Ω–∞")
    delivery_number = models.CharField(max_length=100, blank=True, verbose_name="–¢–¢–ù")
    status = models.CharField(max_length=30, choices=STATUS_CHOICES, default='new', verbose_name="–°—Ç–∞—Ç—É—Å")
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ")
    queued_position = models.PositiveIntegerField(null=True, blank=True, verbose_name="–ü–æ–∑–∏—Ü—ñ—è –≤ —á–µ—Ä–∑—ñ")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°—Ç–≤–æ—Ä–µ–Ω–æ")
    status_updated_at = models.DateTimeField(null=True, blank=True)
    actual_cash = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    full_address = models.CharField("–ê–¥—Ä–µ—Å–∞ (Google)", max_length=512, blank=True, null=True)
    country = models.CharField(max_length=100, blank=True, null=True)
    city = models.CharField(max_length=100, blank=True, null=True)
    postal_code = models.CharField(max_length=20, blank=True, null=True)
    street = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return f"{self.full_name} ‚Äî {self.price} –≥—Ä–Ω ({self.get_status_display()})"

    class Meta:
        verbose_name = "–õ—ñ–¥"
        verbose_name_plural = "–õ—ñ–¥–∏"
        # üöÄ –ö–†–ò–¢–ò–ß–ù–Ü –Ü–ù–î–ï–ö–°–ò –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–≤—ñ—Ç—ñ–≤ —ñ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        indexes = [
            # –î–ª—è –≤–æ—Ä–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ (–Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
            models.Index(fields=['status']),

            # –î–ª—è –∑–≤—ñ—Ç—ñ–≤ –ø–æ –¥–∞—Ç–∞—Ö (created_at –Ω–∞–π–±—ñ–ª—å—à –∫—Ä–∏—Ç–∏—á–Ω–∏–π)
            models.Index(fields=['created_at']),
            models.Index(fields=['status_updated_at']),

            # –î–ª—è –∑–≤'—è–∑–∫—É –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω
            models.Index(fields=['phone']),

            # –î–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
            models.Index(fields=['assigned_to']),

            # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            models.Index(fields=['assigned_to', 'status']),  # –ó–≤—ñ—Ç–∏ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
            models.Index(fields=['status', 'created_at']),  # –í–æ—Ä–æ–Ω–∫–∞ –ø–æ –¥–∞—Ç–∞—Ö
            models.Index(fields=['phone', 'status']),  # –ö–ª—ñ—î–Ω—Ç—Å—å–∫—ñ –∑–≤—ñ—Ç–∏
            models.Index(fields=['created_at', 'assigned_to']),  # –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤

            # –î–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∑–≤—ñ—Ç—ñ–≤
            models.Index(fields=['status', 'price']),  # –ó–∞–≤–µ—Ä—à–µ–Ω—ñ –ª—ñ–¥–∏ –∑ —Å—É–º–æ—é
        ]


class Client(models.Model):
    CLIENT_TYPE_CHOICES = [
        ('individual', '–§—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞'),
        ('company', '–ö–æ–º–ø–∞–Ω—ñ—è'),
        ('vip', 'VIP-–∫–ª—ñ—î–Ω—Ç'),
    ]

    STATUS_CHOICES = [
        ('active', '–ê–∫—Ç–∏–≤–Ω–∏–π'),
        ('inactive', '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'),
        ('blacklist', '–£ —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É'),
    ]

    full_name = models.CharField(max_length=255, verbose_name="–ü–Ü–ë")
    phone = models.CharField(max_length=30, unique=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(blank=True, null=True, verbose_name="Email")
    company_name = models.CharField(max_length=255, blank=True, verbose_name="–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó")
    type = models.CharField(max_length=20, choices=CLIENT_TYPE_CHOICES, default='individual', verbose_name="–¢–∏–ø")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='active', verbose_name="–°—Ç–∞—Ç—É—Å")
    notes = models.TextField(blank=True, verbose_name="–ù–æ—Ç–∞—Ç–∫–∏")
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ú–µ–Ω–µ–¥–∂–µ—Ä")
    difficulty_rating = models.PositiveSmallIntegerField(
        default=1,
        choices=[(i, f"{i} –∑—ñ—Ä–æ–∫") for i in range(1, 6)],
        verbose_name="–†–µ–π—Ç–∏–Ω–≥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°—Ç–≤–æ—Ä–µ–Ω–æ")

    def save(self, *args, **kwargs):
        self.phone = self.normalize_phone(self.phone)
        super().save(*args, **kwargs)

    @staticmethod
    def normalize_phone(phone: str) -> str:
        digits = re.sub(r'\D', '', phone)
        if digits.startswith("0"):
            digits = "38" + digits
        elif not digits.startswith("38") and len(digits) == 10:
            digits = "38" + digits
        return digits

    def __str__(self):
        return f"{self.full_name} ({self.phone})"

    class Meta:
        verbose_name = "–ö–ª—ñ—î–Ω—Ç"
        verbose_name_plural = "–ö–ª—ñ—î–Ω—Ç–∏"
        # üöÄ –Ü–ù–î–ï–ö–°–ò –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
        indexes = [
            # phone –≤–∂–µ —î unique, –∞–ª–µ –¥–æ–¥–∞—î–º–æ –¥–ª—è JOIN –∑ –ª—ñ–¥–∞–º–∏
            models.Index(fields=['phone']),
            models.Index(fields=['status']),
            models.Index(fields=['assigned_to']),
            models.Index(fields=['created_at']),
            models.Index(fields=['type', 'status']),  # –î–ª—è –∑–≤—ñ—Ç—ñ–≤ –ø–æ —Ç–∏–ø–∞—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        ]


class LeadPaymentOperation(models.Model):
    lead = models.ForeignKey(Lead, on_delete=models.CASCADE, related_name="payment_operations", verbose_name="–õ—ñ–¥")
    operation_type = models.CharField(max_length=20, choices=[
        ('expected', '–û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—É–º–∞'),
        ('received', '–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ –≤–æ–¥—ñ—è'),
    ], verbose_name="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó")
    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–∞")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    comment = models.CharField(max_length=255, blank=True, verbose_name="–ö–æ–º–µ–Ω—Ç–∞—Ä")

    def __str__(self):
        return f"{self.lead.full_name} ‚Äì {self.get_operation_type_display()} ‚Äì {self.amount} –≥—Ä–Ω"

    class Meta:
        verbose_name = "–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è –ø–æ –ª—ñ–¥—É"
        verbose_name_plural = "–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø–æ –ª—ñ–¥–∞—Ö"
        # üöÄ –ö–†–ò–¢–ò–ß–ù–Ü –Ü–ù–î–ï–ö–°–ò –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∑–≤—ñ—Ç—ñ–≤
        indexes = [
            # –î–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü—ñ—ó (–Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
            models.Index(fields=['operation_type']),

            # –î–ª—è –∑–≤'—è–∑–∫—É –∑ –ª—ñ–¥–æ–º
            models.Index(fields=['lead']),

            # –î–ª—è –∑–≤—ñ—Ç—ñ–≤ –ø–æ –¥–∞—Ç–∞—Ö
            models.Index(fields=['created_at']),

            # –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü—ñ–π
            models.Index(fields=['lead', 'operation_type']),  # –°—É–º–∞ –ø–æ –ª—ñ–¥—É
            models.Index(fields=['operation_type', 'amount']),  # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø—ñ–¥—Å—É–º–∫–∏
            models.Index(fields=['created_at', 'operation_type']),  # –ó–≤—ñ—Ç–∏ –ø–æ –¥–∞—Ç–∞—Ö
            models.Index(fields=['lead', 'created_at']),  # –•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è –æ–ø–ª–∞—Ç –ª—ñ–¥–∞
        ]


class EmailIntegrationSettings(models.Model):
    name = models.CharField(max_length=100, unique=True, default="default", verbose_name="–ù–∞–∑–≤–∞ –∞–∫–∞—É–Ω—Ç–∞")
    email = models.EmailField(verbose_name="Email –ª–æ–≥—ñ–Ω—É")
    app_password = models.CharField(max_length=100, verbose_name="App Password")
    imap_host = models.CharField(max_length=100, default="imap.gmail.com", verbose_name="IMAP —Ö–æ—Å—Ç")
    folder = models.CharField(max_length=50, default="INBOX", verbose_name="–ü–∞–ø–∫–∞")

    allowed_sender = models.CharField(max_length=255, verbose_name="–î–æ–∑–≤–æ–ª–µ–Ω–∏–π –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫")
    allowed_subject_keyword = models.CharField(max_length=100, blank=True, verbose_name="–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–º—ñ")
    check_interval = models.PositiveIntegerField(default=30, verbose_name="–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (—Å–µ–∫)")

    def __str__(self):
        return f"{self.name} ({self.email})"

    class Meta:
        verbose_name = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Email"
        verbose_name_plural = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Email"
        # üöÄ –Ü–ù–î–ï–ö–°–ò –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        indexes = [
            models.Index(fields=['name']),
            models.Index(fields=['email']),
        ]